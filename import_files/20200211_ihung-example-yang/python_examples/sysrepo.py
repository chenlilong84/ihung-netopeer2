# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sysrepo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sysrepo')
    _sysrepo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sysrepo', [dirname(__file__)])
        except ImportError:
            import _sysrepo
            return _sysrepo
        try:
            _mod = imp.load_module('_sysrepo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sysrepo = swig_import_helper()
    del swig_import_helper
else:
    import _sysrepo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def sigint_handler(signum):
    return _sysrepo.sigint_handler(signum)
sigint_handler = _sysrepo.sigint_handler

def global_loop():
    return _sysrepo.global_loop()
global_loop = _sysrepo.global_loop
class Wrap_cb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wrap_cb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wrap_cb, name)
    __repr__ = _swig_repr

    def __init__(self, callback):
        this = _sysrepo.new_Wrap_cb(callback)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Wrap_cb
    __del__ = lambda self: None

    def module_change_subscribe(self, session, module_name, xpath, event, request_id, private_data):
        return _sysrepo.Wrap_cb_module_change_subscribe(self, session, module_name, xpath, event, request_id, private_data)

    def rpc_cb(self, session, op_path, input, input_cnt, event, request_id, output, output_cnt, private_data):
        return _sysrepo.Wrap_cb_rpc_cb(self, session, op_path, input, input_cnt, event, request_id, output, output_cnt, private_data)

    def rpc_tree_cb(self, session, op_path, input, event, request_id, output, private_data):
        return _sysrepo.Wrap_cb_rpc_tree_cb(self, session, op_path, input, event, request_id, output, private_data)

    def event_notif(self, session, notif_type, path, values, values_cnt, timestamp, private_data):
        return _sysrepo.Wrap_cb_event_notif(self, session, notif_type, path, values, values_cnt, timestamp, private_data)

    def event_notif_tree(self, session, notif_type, notif, timestamp, private_data):
        return _sysrepo.Wrap_cb_event_notif_tree(self, session, notif_type, notif, timestamp, private_data)

    def oper_get_items_cb(self, session, module_name, path, request_xpath, request_id, parent, private_data):
        return _sysrepo.Wrap_cb_oper_get_items_cb(self, session, module_name, path, request_xpath, request_id, parent, private_data)

    def ly_module_imp_clb(self, mod_name, mod_rev, submod_name, sub_rev, user_data):
        return _sysrepo.Wrap_cb_ly_module_imp_clb(self, mod_name, mod_rev, submod_name, sub_rev, user_data)
    __swig_setmethods__["private_data"] = _sysrepo.Wrap_cb_private_data_set
    __swig_getmethods__["private_data"] = _sysrepo.Wrap_cb_private_data_get
    if _newclass:
        private_data = _swig_property(_sysrepo.Wrap_cb_private_data_get, _sysrepo.Wrap_cb_private_data_set)
Wrap_cb_swigregister = _sysrepo.Wrap_cb_swigregister
Wrap_cb_swigregister(Wrap_cb)
cvar = _sysrepo.cvar


def g_module_change_subscribe_cb(session, module_name, xpath, event, request_id, private_data):
    return _sysrepo.g_module_change_subscribe_cb(session, module_name, xpath, event, request_id, private_data)
g_module_change_subscribe_cb = _sysrepo.g_module_change_subscribe_cb

def g_rpc_cb(session, op_path, input, input_cnt, event, request_id, output, output_cnt, private_data):
    return _sysrepo.g_rpc_cb(session, op_path, input, input_cnt, event, request_id, output, output_cnt, private_data)
g_rpc_cb = _sysrepo.g_rpc_cb

def g_rpc_tree_cb(session, op_path, input, event, request_id, output, private_data):
    return _sysrepo.g_rpc_tree_cb(session, op_path, input, event, request_id, output, private_data)
g_rpc_tree_cb = _sysrepo.g_rpc_tree_cb

def g_event_notif_cb(session, notif_type, path, values, values_cnt, timestamp, private_data):
    return _sysrepo.g_event_notif_cb(session, notif_type, path, values, values_cnt, timestamp, private_data)
g_event_notif_cb = _sysrepo.g_event_notif_cb

def g_event_notif_tree_cb(session, notif_type, notif, timestamp, private_data):
    return _sysrepo.g_event_notif_tree_cb(session, notif_type, notif, timestamp, private_data)
g_event_notif_tree_cb = _sysrepo.g_event_notif_tree_cb

def g_oper_get_items_cb(session, module_name, path, request_xpath, request_id, parent, private_data):
    return _sysrepo.g_oper_get_items_cb(session, module_name, path, request_xpath, request_id, parent, private_data)
g_oper_get_items_cb = _sysrepo.g_oper_get_items_cb

def g_ly_module_imp_clb(mod_name, mod_rev, submod_name, sub_rev, user_data, format, free_module_data):
    return _sysrepo.g_ly_module_imp_clb(mod_name, mod_rev, submod_name, sub_rev, user_data, format, free_module_data)
g_ly_module_imp_clb = _sysrepo.g_ly_module_imp_clb
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sysrepo.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _sysrepo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sysrepo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sysrepo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sysrepo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sysrepo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sysrepo.SwigPyIterator_copy(self)

    def next(self):
        return _sysrepo.SwigPyIterator_next(self)

    def __next__(self):
        return _sysrepo.SwigPyIterator___next__(self)

    def previous(self):
        return _sysrepo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sysrepo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sysrepo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sysrepo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sysrepo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sysrepo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sysrepo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sysrepo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _sysrepo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _sysrepo.SHARED_PTR_DISOWN
class vectorData_Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorData_Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorData_Node, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorData_Node_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorData_Node___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorData_Node___bool__(self)

    def __len__(self):
        return _sysrepo.vectorData_Node___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorData_Node___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorData_Node___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorData_Node___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorData_Node___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorData_Node___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorData_Node___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorData_Node_pop(self)

    def append(self, x):
        return _sysrepo.vectorData_Node_append(self, x)

    def empty(self):
        return _sysrepo.vectorData_Node_empty(self)

    def size(self):
        return _sysrepo.vectorData_Node_size(self)

    def swap(self, v):
        return _sysrepo.vectorData_Node_swap(self, v)

    def begin(self):
        return _sysrepo.vectorData_Node_begin(self)

    def end(self):
        return _sysrepo.vectorData_Node_end(self)

    def rbegin(self):
        return _sysrepo.vectorData_Node_rbegin(self)

    def rend(self):
        return _sysrepo.vectorData_Node_rend(self)

    def clear(self):
        return _sysrepo.vectorData_Node_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorData_Node_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorData_Node_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorData_Node_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorData_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorData_Node_push_back(self, x)

    def front(self):
        return _sysrepo.vectorData_Node_front(self)

    def back(self):
        return _sysrepo.vectorData_Node_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorData_Node_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorData_Node_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorData_Node_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorData_Node_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorData_Node_capacity(self)
vectorData_Node_swigregister = _sysrepo.vectorData_Node_swigregister
vectorData_Node_swigregister(vectorData_Node)

class vectorSchema_Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorSchema_Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorSchema_Node, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorSchema_Node_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorSchema_Node___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorSchema_Node___bool__(self)

    def __len__(self):
        return _sysrepo.vectorSchema_Node___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorSchema_Node___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorSchema_Node___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorSchema_Node___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorSchema_Node___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorSchema_Node___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorSchema_Node___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorSchema_Node_pop(self)

    def append(self, x):
        return _sysrepo.vectorSchema_Node_append(self, x)

    def empty(self):
        return _sysrepo.vectorSchema_Node_empty(self)

    def size(self):
        return _sysrepo.vectorSchema_Node_size(self)

    def swap(self, v):
        return _sysrepo.vectorSchema_Node_swap(self, v)

    def begin(self):
        return _sysrepo.vectorSchema_Node_begin(self)

    def end(self):
        return _sysrepo.vectorSchema_Node_end(self)

    def rbegin(self):
        return _sysrepo.vectorSchema_Node_rbegin(self)

    def rend(self):
        return _sysrepo.vectorSchema_Node_rend(self)

    def clear(self):
        return _sysrepo.vectorSchema_Node_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorSchema_Node_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorSchema_Node_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorSchema_Node_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorSchema_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorSchema_Node_push_back(self, x)

    def front(self):
        return _sysrepo.vectorSchema_Node_front(self)

    def back(self):
        return _sysrepo.vectorSchema_Node_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorSchema_Node_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorSchema_Node_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorSchema_Node_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorSchema_Node_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorSchema_Node_capacity(self)
vectorSchema_Node_swigregister = _sysrepo.vectorSchema_Node_swigregister
vectorSchema_Node_swigregister(vectorSchema_Node)

class vector_String(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_String, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vector_String_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vector_String___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vector_String___bool__(self)

    def __len__(self):
        return _sysrepo.vector_String___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vector_String___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vector_String___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vector_String___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vector_String___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vector_String___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vector_String___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vector_String_pop(self)

    def append(self, x):
        return _sysrepo.vector_String_append(self, x)

    def empty(self):
        return _sysrepo.vector_String_empty(self)

    def size(self):
        return _sysrepo.vector_String_size(self)

    def swap(self, v):
        return _sysrepo.vector_String_swap(self, v)

    def begin(self):
        return _sysrepo.vector_String_begin(self)

    def end(self):
        return _sysrepo.vector_String_end(self)

    def rbegin(self):
        return _sysrepo.vector_String_rbegin(self)

    def rend(self):
        return _sysrepo.vector_String_rend(self)

    def clear(self):
        return _sysrepo.vector_String_clear(self)

    def get_allocator(self):
        return _sysrepo.vector_String_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vector_String_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vector_String_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vector_String(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vector_String_push_back(self, x)

    def front(self):
        return _sysrepo.vector_String_front(self)

    def back(self):
        return _sysrepo.vector_String_back(self)

    def assign(self, n, x):
        return _sysrepo.vector_String_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vector_String_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vector_String_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vector_String_reserve(self, n)

    def capacity(self):
        return _sysrepo.vector_String_capacity(self)
vector_String_swigregister = _sysrepo.vector_String_swigregister
vector_String_swigregister(vector_String)

class vectorModules(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorModules, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorModules, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorModules_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorModules___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorModules___bool__(self)

    def __len__(self):
        return _sysrepo.vectorModules___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorModules___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorModules___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorModules___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorModules___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorModules___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorModules___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorModules_pop(self)

    def append(self, x):
        return _sysrepo.vectorModules_append(self, x)

    def empty(self):
        return _sysrepo.vectorModules_empty(self)

    def size(self):
        return _sysrepo.vectorModules_size(self)

    def swap(self, v):
        return _sysrepo.vectorModules_swap(self, v)

    def begin(self):
        return _sysrepo.vectorModules_begin(self)

    def end(self):
        return _sysrepo.vectorModules_end(self)

    def rbegin(self):
        return _sysrepo.vectorModules_rbegin(self)

    def rend(self):
        return _sysrepo.vectorModules_rend(self)

    def clear(self):
        return _sysrepo.vectorModules_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorModules_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorModules_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorModules_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorModules(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorModules_push_back(self, x)

    def front(self):
        return _sysrepo.vectorModules_front(self)

    def back(self):
        return _sysrepo.vectorModules_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorModules_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorModules_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorModules_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorModules_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorModules_capacity(self)
vectorModules_swigregister = _sysrepo.vectorModules_swigregister
vectorModules_swigregister(vectorModules)

class vectorType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorType, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorType_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorType___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorType___bool__(self)

    def __len__(self):
        return _sysrepo.vectorType___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorType___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorType___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorType___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorType___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorType___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorType___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorType_pop(self)

    def append(self, x):
        return _sysrepo.vectorType_append(self, x)

    def empty(self):
        return _sysrepo.vectorType_empty(self)

    def size(self):
        return _sysrepo.vectorType_size(self)

    def swap(self, v):
        return _sysrepo.vectorType_swap(self, v)

    def begin(self):
        return _sysrepo.vectorType_begin(self)

    def end(self):
        return _sysrepo.vectorType_end(self)

    def rbegin(self):
        return _sysrepo.vectorType_rbegin(self)

    def rend(self):
        return _sysrepo.vectorType_rend(self)

    def clear(self):
        return _sysrepo.vectorType_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorType_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorType_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorType_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorType_push_back(self, x)

    def front(self):
        return _sysrepo.vectorType_front(self)

    def back(self):
        return _sysrepo.vectorType_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorType_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorType_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorType_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorType_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorType_capacity(self)
vectorType_swigregister = _sysrepo.vectorType_swigregister
vectorType_swigregister(vectorType)

class vectorExt_Instance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorExt_Instance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorExt_Instance, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorExt_Instance_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorExt_Instance___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorExt_Instance___bool__(self)

    def __len__(self):
        return _sysrepo.vectorExt_Instance___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorExt_Instance___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorExt_Instance___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorExt_Instance___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorExt_Instance___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorExt_Instance___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorExt_Instance___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorExt_Instance_pop(self)

    def append(self, x):
        return _sysrepo.vectorExt_Instance_append(self, x)

    def empty(self):
        return _sysrepo.vectorExt_Instance_empty(self)

    def size(self):
        return _sysrepo.vectorExt_Instance_size(self)

    def swap(self, v):
        return _sysrepo.vectorExt_Instance_swap(self, v)

    def begin(self):
        return _sysrepo.vectorExt_Instance_begin(self)

    def end(self):
        return _sysrepo.vectorExt_Instance_end(self)

    def rbegin(self):
        return _sysrepo.vectorExt_Instance_rbegin(self)

    def rend(self):
        return _sysrepo.vectorExt_Instance_rend(self)

    def clear(self):
        return _sysrepo.vectorExt_Instance_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorExt_Instance_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorExt_Instance_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorExt_Instance_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorExt_Instance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorExt_Instance_push_back(self, x)

    def front(self):
        return _sysrepo.vectorExt_Instance_front(self)

    def back(self):
        return _sysrepo.vectorExt_Instance_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorExt_Instance_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorExt_Instance_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorExt_Instance_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorExt_Instance_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorExt_Instance_capacity(self)
vectorExt_Instance_swigregister = _sysrepo.vectorExt_Instance_swigregister
vectorExt_Instance_swigregister(vectorExt_Instance)

class vectorIffeature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorIffeature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorIffeature, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorIffeature_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorIffeature___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorIffeature___bool__(self)

    def __len__(self):
        return _sysrepo.vectorIffeature___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorIffeature___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorIffeature___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorIffeature___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorIffeature___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorIffeature___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorIffeature___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorIffeature_pop(self)

    def append(self, x):
        return _sysrepo.vectorIffeature_append(self, x)

    def empty(self):
        return _sysrepo.vectorIffeature_empty(self)

    def size(self):
        return _sysrepo.vectorIffeature_size(self)

    def swap(self, v):
        return _sysrepo.vectorIffeature_swap(self, v)

    def begin(self):
        return _sysrepo.vectorIffeature_begin(self)

    def end(self):
        return _sysrepo.vectorIffeature_end(self)

    def rbegin(self):
        return _sysrepo.vectorIffeature_rbegin(self)

    def rend(self):
        return _sysrepo.vectorIffeature_rend(self)

    def clear(self):
        return _sysrepo.vectorIffeature_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorIffeature_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorIffeature_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorIffeature_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorIffeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorIffeature_push_back(self, x)

    def front(self):
        return _sysrepo.vectorIffeature_front(self)

    def back(self):
        return _sysrepo.vectorIffeature_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorIffeature_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorIffeature_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorIffeature_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorIffeature_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorIffeature_capacity(self)
vectorIffeature_swigregister = _sysrepo.vectorIffeature_swigregister
vectorIffeature_swigregister(vectorIffeature)

class vectorFeature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorFeature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorFeature, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorFeature_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorFeature___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorFeature___bool__(self)

    def __len__(self):
        return _sysrepo.vectorFeature___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorFeature___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorFeature___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorFeature___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorFeature___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorFeature___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorFeature___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorFeature_pop(self)

    def append(self, x):
        return _sysrepo.vectorFeature_append(self, x)

    def empty(self):
        return _sysrepo.vectorFeature_empty(self)

    def size(self):
        return _sysrepo.vectorFeature_size(self)

    def swap(self, v):
        return _sysrepo.vectorFeature_swap(self, v)

    def begin(self):
        return _sysrepo.vectorFeature_begin(self)

    def end(self):
        return _sysrepo.vectorFeature_end(self)

    def rbegin(self):
        return _sysrepo.vectorFeature_rbegin(self)

    def rend(self):
        return _sysrepo.vectorFeature_rend(self)

    def clear(self):
        return _sysrepo.vectorFeature_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorFeature_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorFeature_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorFeature_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorFeature_push_back(self, x)

    def front(self):
        return _sysrepo.vectorFeature_front(self)

    def back(self):
        return _sysrepo.vectorFeature_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorFeature_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorFeature_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorFeature_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorFeature_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorFeature_capacity(self)
vectorFeature_swigregister = _sysrepo.vectorFeature_swigregister
vectorFeature_swigregister(vectorFeature)

class vectorWhen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorWhen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorWhen, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorWhen_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorWhen___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorWhen___bool__(self)

    def __len__(self):
        return _sysrepo.vectorWhen___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorWhen___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorWhen___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorWhen___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorWhen___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorWhen___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorWhen___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorWhen_pop(self)

    def append(self, x):
        return _sysrepo.vectorWhen_append(self, x)

    def empty(self):
        return _sysrepo.vectorWhen_empty(self)

    def size(self):
        return _sysrepo.vectorWhen_size(self)

    def swap(self, v):
        return _sysrepo.vectorWhen_swap(self, v)

    def begin(self):
        return _sysrepo.vectorWhen_begin(self)

    def end(self):
        return _sysrepo.vectorWhen_end(self)

    def rbegin(self):
        return _sysrepo.vectorWhen_rbegin(self)

    def rend(self):
        return _sysrepo.vectorWhen_rend(self)

    def clear(self):
        return _sysrepo.vectorWhen_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorWhen_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorWhen_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorWhen_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorWhen(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorWhen_push_back(self, x)

    def front(self):
        return _sysrepo.vectorWhen_front(self)

    def back(self):
        return _sysrepo.vectorWhen_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorWhen_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorWhen_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorWhen_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorWhen_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorWhen_capacity(self)
vectorWhen_swigregister = _sysrepo.vectorWhen_swigregister
vectorWhen_swigregister(vectorWhen)

class vectorRefine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorRefine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorRefine, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorRefine_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorRefine___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorRefine___bool__(self)

    def __len__(self):
        return _sysrepo.vectorRefine___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorRefine___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorRefine___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorRefine___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorRefine___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorRefine___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorRefine___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorRefine_pop(self)

    def append(self, x):
        return _sysrepo.vectorRefine_append(self, x)

    def empty(self):
        return _sysrepo.vectorRefine_empty(self)

    def size(self):
        return _sysrepo.vectorRefine_size(self)

    def swap(self, v):
        return _sysrepo.vectorRefine_swap(self, v)

    def begin(self):
        return _sysrepo.vectorRefine_begin(self)

    def end(self):
        return _sysrepo.vectorRefine_end(self)

    def rbegin(self):
        return _sysrepo.vectorRefine_rbegin(self)

    def rend(self):
        return _sysrepo.vectorRefine_rend(self)

    def clear(self):
        return _sysrepo.vectorRefine_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorRefine_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorRefine_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorRefine_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorRefine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorRefine_push_back(self, x)

    def front(self):
        return _sysrepo.vectorRefine_front(self)

    def back(self):
        return _sysrepo.vectorRefine_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorRefine_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorRefine_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorRefine_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorRefine_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorRefine_capacity(self)
vectorRefine_swigregister = _sysrepo.vectorRefine_swigregister
vectorRefine_swigregister(vectorRefine)

class vectorXml_Elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorXml_Elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorXml_Elem, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorXml_Elem_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorXml_Elem___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorXml_Elem___bool__(self)

    def __len__(self):
        return _sysrepo.vectorXml_Elem___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorXml_Elem___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorXml_Elem___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorXml_Elem___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorXml_Elem___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorXml_Elem___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorXml_Elem___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorXml_Elem_pop(self)

    def append(self, x):
        return _sysrepo.vectorXml_Elem_append(self, x)

    def empty(self):
        return _sysrepo.vectorXml_Elem_empty(self)

    def size(self):
        return _sysrepo.vectorXml_Elem_size(self)

    def swap(self, v):
        return _sysrepo.vectorXml_Elem_swap(self, v)

    def begin(self):
        return _sysrepo.vectorXml_Elem_begin(self)

    def end(self):
        return _sysrepo.vectorXml_Elem_end(self)

    def rbegin(self):
        return _sysrepo.vectorXml_Elem_rbegin(self)

    def rend(self):
        return _sysrepo.vectorXml_Elem_rend(self)

    def clear(self):
        return _sysrepo.vectorXml_Elem_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorXml_Elem_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorXml_Elem_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorXml_Elem_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorXml_Elem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorXml_Elem_push_back(self, x)

    def front(self):
        return _sysrepo.vectorXml_Elem_front(self)

    def back(self):
        return _sysrepo.vectorXml_Elem_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorXml_Elem_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorXml_Elem_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorXml_Elem_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorXml_Elem_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorXml_Elem_capacity(self)
vectorXml_Elem_swigregister = _sysrepo.vectorXml_Elem_swigregister
vectorXml_Elem_swigregister(vectorXml_Elem)

class vectorDeviate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDeviate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDeviate, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorDeviate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorDeviate___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorDeviate___bool__(self)

    def __len__(self):
        return _sysrepo.vectorDeviate___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorDeviate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorDeviate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorDeviate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorDeviate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorDeviate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorDeviate___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorDeviate_pop(self)

    def append(self, x):
        return _sysrepo.vectorDeviate_append(self, x)

    def empty(self):
        return _sysrepo.vectorDeviate_empty(self)

    def size(self):
        return _sysrepo.vectorDeviate_size(self)

    def swap(self, v):
        return _sysrepo.vectorDeviate_swap(self, v)

    def begin(self):
        return _sysrepo.vectorDeviate_begin(self)

    def end(self):
        return _sysrepo.vectorDeviate_end(self)

    def rbegin(self):
        return _sysrepo.vectorDeviate_rbegin(self)

    def rend(self):
        return _sysrepo.vectorDeviate_rend(self)

    def clear(self):
        return _sysrepo.vectorDeviate_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorDeviate_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorDeviate_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorDeviate_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorDeviate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorDeviate_push_back(self, x)

    def front(self):
        return _sysrepo.vectorDeviate_front(self)

    def back(self):
        return _sysrepo.vectorDeviate_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorDeviate_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorDeviate_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorDeviate_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorDeviate_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorDeviate_capacity(self)
vectorDeviate_swigregister = _sysrepo.vectorDeviate_swigregister
vectorDeviate_swigregister(vectorDeviate)

class vectorDeviation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDeviation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDeviation, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorDeviation_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorDeviation___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorDeviation___bool__(self)

    def __len__(self):
        return _sysrepo.vectorDeviation___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorDeviation___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorDeviation___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorDeviation___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorDeviation___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorDeviation___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorDeviation___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorDeviation_pop(self)

    def append(self, x):
        return _sysrepo.vectorDeviation_append(self, x)

    def empty(self):
        return _sysrepo.vectorDeviation_empty(self)

    def size(self):
        return _sysrepo.vectorDeviation_size(self)

    def swap(self, v):
        return _sysrepo.vectorDeviation_swap(self, v)

    def begin(self):
        return _sysrepo.vectorDeviation_begin(self)

    def end(self):
        return _sysrepo.vectorDeviation_end(self)

    def rbegin(self):
        return _sysrepo.vectorDeviation_rbegin(self)

    def rend(self):
        return _sysrepo.vectorDeviation_rend(self)

    def clear(self):
        return _sysrepo.vectorDeviation_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorDeviation_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorDeviation_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorDeviation_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorDeviation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorDeviation_push_back(self, x)

    def front(self):
        return _sysrepo.vectorDeviation_front(self)

    def back(self):
        return _sysrepo.vectorDeviation_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorDeviation_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorDeviation_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorDeviation_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorDeviation_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorDeviation_capacity(self)
vectorDeviation_swigregister = _sysrepo.vectorDeviation_swigregister
vectorDeviation_swigregister(vectorDeviation)

class vectorIdent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorIdent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorIdent, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorIdent_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorIdent___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorIdent___bool__(self)

    def __len__(self):
        return _sysrepo.vectorIdent___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorIdent___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorIdent___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorIdent___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorIdent___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorIdent___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorIdent___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorIdent_pop(self)

    def append(self, x):
        return _sysrepo.vectorIdent_append(self, x)

    def empty(self):
        return _sysrepo.vectorIdent_empty(self)

    def size(self):
        return _sysrepo.vectorIdent_size(self)

    def swap(self, v):
        return _sysrepo.vectorIdent_swap(self, v)

    def begin(self):
        return _sysrepo.vectorIdent_begin(self)

    def end(self):
        return _sysrepo.vectorIdent_end(self)

    def rbegin(self):
        return _sysrepo.vectorIdent_rbegin(self)

    def rend(self):
        return _sysrepo.vectorIdent_rend(self)

    def clear(self):
        return _sysrepo.vectorIdent_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorIdent_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorIdent_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorIdent_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorIdent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorIdent_push_back(self, x)

    def front(self):
        return _sysrepo.vectorIdent_front(self)

    def back(self):
        return _sysrepo.vectorIdent_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorIdent_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorIdent_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorIdent_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorIdent_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorIdent_capacity(self)
vectorIdent_swigregister = _sysrepo.vectorIdent_swigregister
vectorIdent_swigregister(vectorIdent)

class vectorRestr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorRestr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorRestr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorRestr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorRestr___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorRestr___bool__(self)

    def __len__(self):
        return _sysrepo.vectorRestr___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorRestr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorRestr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorRestr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorRestr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorRestr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorRestr___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorRestr_pop(self)

    def append(self, x):
        return _sysrepo.vectorRestr_append(self, x)

    def empty(self):
        return _sysrepo.vectorRestr_empty(self)

    def size(self):
        return _sysrepo.vectorRestr_size(self)

    def swap(self, v):
        return _sysrepo.vectorRestr_swap(self, v)

    def begin(self):
        return _sysrepo.vectorRestr_begin(self)

    def end(self):
        return _sysrepo.vectorRestr_end(self)

    def rbegin(self):
        return _sysrepo.vectorRestr_rbegin(self)

    def rend(self):
        return _sysrepo.vectorRestr_rend(self)

    def clear(self):
        return _sysrepo.vectorRestr_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorRestr_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorRestr_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorRestr_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorRestr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorRestr_push_back(self, x)

    def front(self):
        return _sysrepo.vectorRestr_front(self)

    def back(self):
        return _sysrepo.vectorRestr_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorRestr_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorRestr_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorRestr_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorRestr_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorRestr_capacity(self)
vectorRestr_swigregister = _sysrepo.vectorRestr_swigregister
vectorRestr_swigregister(vectorRestr)

class vectorTpdf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorTpdf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorTpdf, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorTpdf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorTpdf___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorTpdf___bool__(self)

    def __len__(self):
        return _sysrepo.vectorTpdf___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorTpdf___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorTpdf___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorTpdf___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorTpdf___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorTpdf___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorTpdf___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorTpdf_pop(self)

    def append(self, x):
        return _sysrepo.vectorTpdf_append(self, x)

    def empty(self):
        return _sysrepo.vectorTpdf_empty(self)

    def size(self):
        return _sysrepo.vectorTpdf_size(self)

    def swap(self, v):
        return _sysrepo.vectorTpdf_swap(self, v)

    def begin(self):
        return _sysrepo.vectorTpdf_begin(self)

    def end(self):
        return _sysrepo.vectorTpdf_end(self)

    def rbegin(self):
        return _sysrepo.vectorTpdf_rbegin(self)

    def rend(self):
        return _sysrepo.vectorTpdf_rend(self)

    def clear(self):
        return _sysrepo.vectorTpdf_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorTpdf_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorTpdf_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorTpdf_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorTpdf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorTpdf_push_back(self, x)

    def front(self):
        return _sysrepo.vectorTpdf_front(self)

    def back(self):
        return _sysrepo.vectorTpdf_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorTpdf_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorTpdf_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorTpdf_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorTpdf_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorTpdf_capacity(self)
vectorTpdf_swigregister = _sysrepo.vectorTpdf_swigregister
vectorTpdf_swigregister(vectorTpdf)

class vectorUnique(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorUnique, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorUnique, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorUnique_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorUnique___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorUnique___bool__(self)

    def __len__(self):
        return _sysrepo.vectorUnique___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorUnique___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorUnique___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorUnique___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorUnique___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorUnique___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorUnique___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorUnique_pop(self)

    def append(self, x):
        return _sysrepo.vectorUnique_append(self, x)

    def empty(self):
        return _sysrepo.vectorUnique_empty(self)

    def size(self):
        return _sysrepo.vectorUnique_size(self)

    def swap(self, v):
        return _sysrepo.vectorUnique_swap(self, v)

    def begin(self):
        return _sysrepo.vectorUnique_begin(self)

    def end(self):
        return _sysrepo.vectorUnique_end(self)

    def rbegin(self):
        return _sysrepo.vectorUnique_rbegin(self)

    def rend(self):
        return _sysrepo.vectorUnique_rend(self)

    def clear(self):
        return _sysrepo.vectorUnique_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorUnique_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorUnique_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorUnique_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorUnique(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorUnique_push_back(self, x)

    def front(self):
        return _sysrepo.vectorUnique_front(self)

    def back(self):
        return _sysrepo.vectorUnique_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorUnique_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorUnique_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorUnique_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorUnique_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorUnique_capacity(self)
vectorUnique_swigregister = _sysrepo.vectorUnique_swigregister
vectorUnique_swigregister(vectorUnique)

class vectorSchema_Node_Leaf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorSchema_Node_Leaf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorSchema_Node_Leaf, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorSchema_Node_Leaf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorSchema_Node_Leaf___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorSchema_Node_Leaf___bool__(self)

    def __len__(self):
        return _sysrepo.vectorSchema_Node_Leaf___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorSchema_Node_Leaf___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorSchema_Node_Leaf___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorSchema_Node_Leaf___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorSchema_Node_Leaf___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorSchema_Node_Leaf___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorSchema_Node_Leaf___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorSchema_Node_Leaf_pop(self)

    def append(self, x):
        return _sysrepo.vectorSchema_Node_Leaf_append(self, x)

    def empty(self):
        return _sysrepo.vectorSchema_Node_Leaf_empty(self)

    def size(self):
        return _sysrepo.vectorSchema_Node_Leaf_size(self)

    def swap(self, v):
        return _sysrepo.vectorSchema_Node_Leaf_swap(self, v)

    def begin(self):
        return _sysrepo.vectorSchema_Node_Leaf_begin(self)

    def end(self):
        return _sysrepo.vectorSchema_Node_Leaf_end(self)

    def rbegin(self):
        return _sysrepo.vectorSchema_Node_Leaf_rbegin(self)

    def rend(self):
        return _sysrepo.vectorSchema_Node_Leaf_rend(self)

    def clear(self):
        return _sysrepo.vectorSchema_Node_Leaf_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorSchema_Node_Leaf_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorSchema_Node_Leaf_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorSchema_Node_Leaf_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorSchema_Node_Leaf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorSchema_Node_Leaf_push_back(self, x)

    def front(self):
        return _sysrepo.vectorSchema_Node_Leaf_front(self)

    def back(self):
        return _sysrepo.vectorSchema_Node_Leaf_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorSchema_Node_Leaf_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorSchema_Node_Leaf_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorSchema_Node_Leaf_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorSchema_Node_Leaf_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorSchema_Node_Leaf_capacity(self)
vectorSchema_Node_Leaf_swigregister = _sysrepo.vectorSchema_Node_Leaf_swigregister
vectorSchema_Node_Leaf_swigregister(vectorSchema_Node_Leaf)

class vectorSchema_Node_Augment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorSchema_Node_Augment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorSchema_Node_Augment, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorSchema_Node_Augment_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorSchema_Node_Augment___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorSchema_Node_Augment___bool__(self)

    def __len__(self):
        return _sysrepo.vectorSchema_Node_Augment___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorSchema_Node_Augment___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorSchema_Node_Augment___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorSchema_Node_Augment___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorSchema_Node_Augment___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorSchema_Node_Augment___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorSchema_Node_Augment___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorSchema_Node_Augment_pop(self)

    def append(self, x):
        return _sysrepo.vectorSchema_Node_Augment_append(self, x)

    def empty(self):
        return _sysrepo.vectorSchema_Node_Augment_empty(self)

    def size(self):
        return _sysrepo.vectorSchema_Node_Augment_size(self)

    def swap(self, v):
        return _sysrepo.vectorSchema_Node_Augment_swap(self, v)

    def begin(self):
        return _sysrepo.vectorSchema_Node_Augment_begin(self)

    def end(self):
        return _sysrepo.vectorSchema_Node_Augment_end(self)

    def rbegin(self):
        return _sysrepo.vectorSchema_Node_Augment_rbegin(self)

    def rend(self):
        return _sysrepo.vectorSchema_Node_Augment_rend(self)

    def clear(self):
        return _sysrepo.vectorSchema_Node_Augment_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorSchema_Node_Augment_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorSchema_Node_Augment_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorSchema_Node_Augment_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorSchema_Node_Augment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorSchema_Node_Augment_push_back(self, x)

    def front(self):
        return _sysrepo.vectorSchema_Node_Augment_front(self)

    def back(self):
        return _sysrepo.vectorSchema_Node_Augment_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorSchema_Node_Augment_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorSchema_Node_Augment_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorSchema_Node_Augment_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorSchema_Node_Augment_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorSchema_Node_Augment_capacity(self)
vectorSchema_Node_Augment_swigregister = _sysrepo.vectorSchema_Node_Augment_swigregister
vectorSchema_Node_Augment_swigregister(vectorSchema_Node_Augment)

class vectorType_Bit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorType_Bit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorType_Bit, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorType_Bit_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorType_Bit___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorType_Bit___bool__(self)

    def __len__(self):
        return _sysrepo.vectorType_Bit___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorType_Bit___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorType_Bit___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorType_Bit___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorType_Bit___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorType_Bit___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorType_Bit___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorType_Bit_pop(self)

    def append(self, x):
        return _sysrepo.vectorType_Bit_append(self, x)

    def empty(self):
        return _sysrepo.vectorType_Bit_empty(self)

    def size(self):
        return _sysrepo.vectorType_Bit_size(self)

    def swap(self, v):
        return _sysrepo.vectorType_Bit_swap(self, v)

    def begin(self):
        return _sysrepo.vectorType_Bit_begin(self)

    def end(self):
        return _sysrepo.vectorType_Bit_end(self)

    def rbegin(self):
        return _sysrepo.vectorType_Bit_rbegin(self)

    def rend(self):
        return _sysrepo.vectorType_Bit_rend(self)

    def clear(self):
        return _sysrepo.vectorType_Bit_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorType_Bit_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorType_Bit_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorType_Bit_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorType_Bit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorType_Bit_push_back(self, x)

    def front(self):
        return _sysrepo.vectorType_Bit_front(self)

    def back(self):
        return _sysrepo.vectorType_Bit_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorType_Bit_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorType_Bit_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorType_Bit_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorType_Bit_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorType_Bit_capacity(self)
vectorType_Bit_swigregister = _sysrepo.vectorType_Bit_swigregister
vectorType_Bit_swigregister(vectorType_Bit)

class vectorType_Enum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorType_Enum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorType_Enum, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorType_Enum_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorType_Enum___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorType_Enum___bool__(self)

    def __len__(self):
        return _sysrepo.vectorType_Enum___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorType_Enum___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorType_Enum___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorType_Enum___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorType_Enum___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorType_Enum___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorType_Enum___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorType_Enum_pop(self)

    def append(self, x):
        return _sysrepo.vectorType_Enum_append(self, x)

    def empty(self):
        return _sysrepo.vectorType_Enum_empty(self)

    def size(self):
        return _sysrepo.vectorType_Enum_size(self)

    def swap(self, v):
        return _sysrepo.vectorType_Enum_swap(self, v)

    def begin(self):
        return _sysrepo.vectorType_Enum_begin(self)

    def end(self):
        return _sysrepo.vectorType_Enum_end(self)

    def rbegin(self):
        return _sysrepo.vectorType_Enum_rbegin(self)

    def rend(self):
        return _sysrepo.vectorType_Enum_rend(self)

    def clear(self):
        return _sysrepo.vectorType_Enum_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorType_Enum_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorType_Enum_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorType_Enum_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorType_Enum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorType_Enum_push_back(self, x)

    def front(self):
        return _sysrepo.vectorType_Enum_front(self)

    def back(self):
        return _sysrepo.vectorType_Enum_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorType_Enum_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorType_Enum_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorType_Enum_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorType_Enum_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorType_Enum_capacity(self)
vectorType_Enum_swigregister = _sysrepo.vectorType_Enum_swigregister
vectorType_Enum_swigregister(vectorType_Enum)

class vectorError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorError, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sysrepo.vectorError_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sysrepo.vectorError___nonzero__(self)

    def __bool__(self):
        return _sysrepo.vectorError___bool__(self)

    def __len__(self):
        return _sysrepo.vectorError___len__(self)

    def __getslice__(self, i, j):
        return _sysrepo.vectorError___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sysrepo.vectorError___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sysrepo.vectorError___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sysrepo.vectorError___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sysrepo.vectorError___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sysrepo.vectorError___setitem__(self, *args)

    def pop(self):
        return _sysrepo.vectorError_pop(self)

    def append(self, x):
        return _sysrepo.vectorError_append(self, x)

    def empty(self):
        return _sysrepo.vectorError_empty(self)

    def size(self):
        return _sysrepo.vectorError_size(self)

    def swap(self, v):
        return _sysrepo.vectorError_swap(self, v)

    def begin(self):
        return _sysrepo.vectorError_begin(self)

    def end(self):
        return _sysrepo.vectorError_end(self)

    def rbegin(self):
        return _sysrepo.vectorError_rbegin(self)

    def rend(self):
        return _sysrepo.vectorError_rend(self)

    def clear(self):
        return _sysrepo.vectorError_clear(self)

    def get_allocator(self):
        return _sysrepo.vectorError_get_allocator(self)

    def pop_back(self):
        return _sysrepo.vectorError_pop_back(self)

    def erase(self, *args):
        return _sysrepo.vectorError_erase(self, *args)

    def __init__(self, *args):
        this = _sysrepo.new_vectorError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sysrepo.vectorError_push_back(self, x)

    def front(self):
        return _sysrepo.vectorError_front(self)

    def back(self):
        return _sysrepo.vectorError_back(self)

    def assign(self, n, x):
        return _sysrepo.vectorError_assign(self, n, x)

    def resize(self, *args):
        return _sysrepo.vectorError_resize(self, *args)

    def insert(self, *args):
        return _sysrepo.vectorError_insert(self, *args)

    def reserve(self, n):
        return _sysrepo.vectorError_reserve(self, n)

    def capacity(self):
        return _sysrepo.vectorError_capacity(self)
vectorError_swigregister = _sysrepo.vectorError_swigregister
vectorError_swigregister(vectorError)

class pairStringLysInformat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairStringLysInformat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairStringLysInformat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_pairStringLysInformat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _sysrepo.pairStringLysInformat_first_set
    __swig_getmethods__["first"] = _sysrepo.pairStringLysInformat_first_get
    if _newclass:
        first = _swig_property(_sysrepo.pairStringLysInformat_first_get, _sysrepo.pairStringLysInformat_first_set)
    __swig_setmethods__["second"] = _sysrepo.pairStringLysInformat_second_set
    __swig_getmethods__["second"] = _sysrepo.pairStringLysInformat_second_get
    if _newclass:
        second = _swig_property(_sysrepo.pairStringLysInformat_second_get, _sysrepo.pairStringLysInformat_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
pairStringLysInformat_swigregister = _sysrepo.pairStringLysInformat_swigregister
pairStringLysInformat_swigregister(pairStringLysInformat)


def get_repo_path():
    return _sysrepo.get_repo_path()
get_repo_path = _sysrepo.get_repo_path

def connection_count():
    return _sysrepo.connection_count()
connection_count = _sysrepo.connection_count
class sysrepo_exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sysrepo_exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sysrepo_exception, name)
    __repr__ = _swig_repr

    def __init__(self, error_code):
        this = _sysrepo.new_sysrepo_exception(error_code)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_sysrepo_exception
    __del__ = lambda self: None

    def error_code(self):
        return _sysrepo.sysrepo_exception_error_code(self)
sysrepo_exception_swigregister = _sysrepo.sysrepo_exception_swigregister
sysrepo_exception_swigregister(sysrepo_exception)
OPER_DEFAULT = cvar.OPER_DEFAULT

class Logs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logs, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sysrepo.new_Logs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Logs
    __del__ = lambda self: None

    def set_stderr(self, log_level):
        return _sysrepo.Logs_set_stderr(self, log_level)

    def set_syslog(self, app_name, log_level):
        return _sysrepo.Logs_set_syslog(self, app_name, log_level)
Logs_swigregister = _sysrepo.Logs_swigregister
Logs_swigregister(Logs)

class Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Connection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Connection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Connection
    __del__ = lambda self: None

    def get_context(self):
        return _sysrepo.Connection_get_context(self)

    def connection_recover(self):
        return _sysrepo.Connection_connection_recover(self)

    def install_module(self, schema_path, search_dir, features):
        return _sysrepo.Connection_install_module(self, schema_path, search_dir, features)

    def install_module_data(self, module_name, data, data_path, format):
        return _sysrepo.Connection_install_module_data(self, module_name, data, data_path, format)

    def remove_module(self, module_name):
        return _sysrepo.Connection_remove_module(self, module_name)

    def update_module(self, schema_path, search_dir):
        return _sysrepo.Connection_update_module(self, schema_path, search_dir)

    def cancel_update_module(self, module_name):
        return _sysrepo.Connection_cancel_update_module(self, module_name)

    def set_module_replay_support(self, module_name, replay_support):
        return _sysrepo.Connection_set_module_replay_support(self, module_name, replay_support)

    def set_module_access(self, module_name, owner, group, perm):
        return _sysrepo.Connection_set_module_access(self, module_name, owner, group, perm)

    def get_module_access(self, module_name):
        return _sysrepo.Connection_get_module_access(self, module_name)

    def enable_module_feature(self, module_name, feature_name):
        return _sysrepo.Connection_enable_module_feature(self, module_name, feature_name)

    def disable_module_feature(self, module_name, feature_name):
        return _sysrepo.Connection_disable_module_feature(self, module_name, feature_name)

    def get_module_info(self):
        return _sysrepo.Connection_get_module_info(self)

    def get_lock(self, datastore, module_name=None):
        return _sysrepo.Connection_get_lock(self, datastore, module_name)
Connection_swigregister = _sysrepo.Connection_swigregister
Connection_swigregister(Connection)

class Session(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Session, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Session, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Session(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def session_stop(self):
        return _sysrepo.Session_session_stop(self)

    def session_switch_ds(self, ds):
        return _sysrepo.Session_session_switch_ds(self, ds)

    def session_get_ds(self):
        return _sysrepo.Session_session_get_ds(self)

    def session_notif_buffer(self):
        return _sysrepo.Session_session_notif_buffer(self)

    def get_error(self):
        return _sysrepo.Session_get_error(self)

    def set_error(self, message, path):
        return _sysrepo.Session_set_error(self, message, path)

    def get_id(self):
        return _sysrepo.Session_get_id(self)

    def set_nc_id(self, nc_id):
        return _sysrepo.Session_set_nc_id(self, nc_id)

    def get_nc_id(self):
        return _sysrepo.Session_get_nc_id(self)

    def set_user(self, user):
        return _sysrepo.Session_set_user(self, user)

    def get_user(self):
        return _sysrepo.Session_get_user(self)

    def get_context(self):
        return _sysrepo.Session_get_context(self)

    def get_item(self, path, timeout_ms=0):
        return _sysrepo.Session_get_item(self, path, timeout_ms)

    def get_items(self, xpath, timeout_ms=0):
        return _sysrepo.Session_get_items(self, xpath, timeout_ms)

    def get_subtree(self, path, timeout_ms=0):
        return _sysrepo.Session_get_subtree(self, path, timeout_ms)

    def get_data(self, *args):
        return _sysrepo.Session_get_data(self, *args)

    def set_item(self, *args):
        return _sysrepo.Session_set_item(self, *args)

    def set_item_str(self, *args):
        return _sysrepo.Session_set_item_str(self, *args)

    def delete_item(self, *args):
        return _sysrepo.Session_delete_item(self, *args)

    def move_item(self, path, position, list_keys=None, leaflist_value=None, origin=None):
        return _sysrepo.Session_move_item(self, path, position, list_keys, leaflist_value, origin)

    def edit_batch(self, edit, default_operation):
        return _sysrepo.Session_edit_batch(self, edit, default_operation)

    def validate(self, timeout_ms=0):
        return _sysrepo.Session_validate(self, timeout_ms)

    def apply_changes(self, timeout_ms=0):
        return _sysrepo.Session_apply_changes(self, timeout_ms)

    def discard_changes(self):
        return _sysrepo.Session_discard_changes(self)

    def replace_config(self, src_config, trg_datastore, module_name=None, timeout_ms=0):
        return _sysrepo.Session_replace_config(self, src_config, trg_datastore, module_name, timeout_ms)

    def copy_config(self, src_datastore, trg_datastore, module_name=None, timeout_ms=0):
        return _sysrepo.Session_copy_config(self, src_datastore, trg_datastore, module_name, timeout_ms)

    def lock(self, module_name=None):
        return _sysrepo.Session_lock(self, module_name)

    def unlock(self, module_name=None):
        return _sysrepo.Session_unlock(self, module_name)

    def get_changes_iter(self, xpath):
        return _sysrepo.Session_get_changes_iter(self, xpath)

    def get_change_next(self, iter):
        return _sysrepo.Session_get_change_next(self, iter)

    def get_change_tree_next(self, iter):
        return _sysrepo.Session_get_change_tree_next(self, iter)
    __swig_destroy__ = _sysrepo.delete_Session
    __del__ = lambda self: None

    def rpc_send(self, *args):
        return _sysrepo.Session_rpc_send(self, *args)

    def event_notif_send(self, *args):
        return _sysrepo.Session_event_notif_send(self, *args)
Session_swigregister = _sysrepo.Session_swigregister
Session_swigregister(Session)

class Subscribe(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Subscribe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Subscribe, name)
    __repr__ = _swig_repr

    def __init__(self, sess):
        this = _sysrepo.new_Subscribe(sess)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["cb_list"] = _sysrepo.Subscribe_cb_list_set
    __swig_getmethods__["cb_list"] = _sysrepo.Subscribe_cb_list_get
    if _newclass:
        cb_list = _swig_property(_sysrepo.Subscribe_cb_list_get, _sysrepo.Subscribe_cb_list_set)

    def get_event_pipe(self):
        return _sysrepo.Subscribe_get_event_pipe(self)

    def process_events(self, sess=0):
        return _sysrepo.Subscribe_process_events(self, sess)
    __swig_destroy__ = _sysrepo.delete_Subscribe
    __del__ = lambda self: None

    def swig_sub(self):
        return _sysrepo.Subscribe_swig_sub(self)

    def swig_sess(self):
        return _sysrepo.Subscribe_swig_sess(self)
    __swig_setmethods__["wrap_cb_l"] = _sysrepo.Subscribe_wrap_cb_l_set
    __swig_getmethods__["wrap_cb_l"] = _sysrepo.Subscribe_wrap_cb_l_get
    if _newclass:
        wrap_cb_l = _swig_property(_sysrepo.Subscribe_wrap_cb_l_get, _sysrepo.Subscribe_wrap_cb_l_set)

    def additional_cleanup(self, private_data):
        return _sysrepo.Subscribe_additional_cleanup(self, private_data)

    def module_change_subscribe(self, *args):
        return _sysrepo.Subscribe_module_change_subscribe(self, *args)

    def rpc_subscribe(self, *args):
        return _sysrepo.Subscribe_rpc_subscribe(self, *args)

    def rpc_subscribe_tree(self, *args):
        return _sysrepo.Subscribe_rpc_subscribe_tree(self, *args)

    def event_notif_subscribe(self, *args):
        return _sysrepo.Subscribe_event_notif_subscribe(self, *args)

    def event_notif_subscribe_tree(self, *args):
        return _sysrepo.Subscribe_event_notif_subscribe_tree(self, *args)

    def oper_get_items_subscribe(self, *args):
        return _sysrepo.Subscribe_oper_get_items_subscribe(self, *args)

    def unsubscribe(self):
        return _sysrepo.Subscribe_unsubscribe(self)
Subscribe_swigregister = _sysrepo.Subscribe_swigregister
Subscribe_swigregister(Subscribe)

class Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr

    def __init__(self, data, type, deleter):
        this = _sysrepo.new_Data(data, type, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Data
    __del__ = lambda self: None

    def get_binary(self):
        return _sysrepo.Data_get_binary(self)

    def get_bits(self):
        return _sysrepo.Data_get_bits(self)

    def get_bool(self):
        return _sysrepo.Data_get_bool(self)

    def get_decimal64(self):
        return _sysrepo.Data_get_decimal64(self)

    def get_enum(self):
        return _sysrepo.Data_get_enum(self)

    def get_identityref(self):
        return _sysrepo.Data_get_identityref(self)

    def get_instanceid(self):
        return _sysrepo.Data_get_instanceid(self)

    def get_int8(self):
        return _sysrepo.Data_get_int8(self)

    def get_int16(self):
        return _sysrepo.Data_get_int16(self)

    def get_int32(self):
        return _sysrepo.Data_get_int32(self)

    def get_int64(self):
        return _sysrepo.Data_get_int64(self)

    def get_string(self):
        return _sysrepo.Data_get_string(self)

    def get_uint8(self):
        return _sysrepo.Data_get_uint8(self)

    def get_uint16(self):
        return _sysrepo.Data_get_uint16(self)

    def get_uint32(self):
        return _sysrepo.Data_get_uint32(self)

    def get_uint64(self):
        return _sysrepo.Data_get_uint64(self)
Data_swigregister = _sysrepo.Data_swigregister
Data_swigregister(Data)

class Val(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Val, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Val, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Val(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Val
    __del__ = lambda self: None

    def set(self, *args):
        return _sysrepo.Val_set(self, *args)

    def xpath(self):
        return _sysrepo.Val_xpath(self)

    def xpath_set(self, xpath):
        return _sysrepo.Val_xpath_set(self, xpath)

    def type(self):
        return _sysrepo.Val_type(self)

    def dflt(self):
        return _sysrepo.Val_dflt(self)

    def dflt_set(self, data):
        return _sysrepo.Val_dflt_set(self, data)

    def data(self):
        return _sysrepo.Val_data(self)

    def empty(self):
        return _sysrepo.Val_empty(self)

    def to_string(self):
        return _sysrepo.Val_to_string(self)

    def val_to_string(self):
        return _sysrepo.Val_val_to_string(self)

    def dup(self):
        return _sysrepo.Val_dup(self)
Val_swigregister = _sysrepo.Val_swigregister
Val_swigregister(Val)

class Vals(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vals, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vals, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Vals(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Vals
    __del__ = lambda self: None

    def val(self, n):
        return _sysrepo.Vals_val(self, n)

    def val_cnt(self):
        return _sysrepo.Vals_val_cnt(self)

    def dup(self):
        return _sysrepo.Vals_dup(self)

    def reallocate(self, n):
        return _sysrepo.Vals_reallocate(self, n)
Vals_swigregister = _sysrepo.Vals_swigregister
Vals_swigregister(Vals)

class Vals_Holder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vals_Holder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vals_Holder, name)
    __repr__ = _swig_repr

    def __init__(self, vals, cnt):
        this = _sysrepo.new_Vals_Holder(vals, cnt)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, n):
        return _sysrepo.Vals_Holder_allocate(self, n)

    def reallocate(self, n):
        return _sysrepo.Vals_Holder_reallocate(self, n)

    def val_cnt(self):
        return _sysrepo.Vals_Holder_val_cnt(self)

    def vals(self):
        return _sysrepo.Vals_Holder_vals(self)
    __swig_destroy__ = _sysrepo.delete_Vals_Holder
    __del__ = lambda self: None
Vals_Holder_swigregister = _sysrepo.Vals_Holder_swigregister
Vals_Holder_swigregister(Vals_Holder)

class Change_Iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Change_Iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Change_Iter, name)
    __repr__ = _swig_repr

    def __init__(self, iter=None):
        this = _sysrepo.new_Change_Iter(iter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Change_Iter
    __del__ = lambda self: None

    def iter(self):
        return _sysrepo.Change_Iter_iter(self)
Change_Iter_swigregister = _sysrepo.Change_Iter_swigregister
Change_Iter_swigregister(Change_Iter)

class Errors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Errors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Errors, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sysrepo.new_Errors()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Errors
    __del__ = lambda self: None

    def error_code(self):
        return _sysrepo.Errors_error_code(self)

    def message(self, idx):
        return _sysrepo.Errors_message(self, idx)

    def xpath(self, idx):
        return _sysrepo.Errors_xpath(self, idx)

    def error_cnt(self):
        return _sysrepo.Errors_error_cnt(self)
Errors_swigregister = _sysrepo.Errors_swigregister
Errors_swigregister(Errors)

class Iter_Change(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Iter_Change, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Iter_Change, name)
    __repr__ = _swig_repr

    def __init__(self, iter=None):
        this = _sysrepo.new_Iter_Change(iter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Iter_Change
    __del__ = lambda self: None
Iter_Change_swigregister = _sysrepo.Iter_Change_swigregister
Iter_Change_swigregister(Iter_Change)

class Change(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Change, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Change, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sysrepo.new_Change()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Change
    __del__ = lambda self: None

    def oper(self):
        return _sysrepo.Change_oper(self)

    def new_val(self):
        return _sysrepo.Change_new_val(self)

    def old_val(self):
        return _sysrepo.Change_old_val(self)
Change_swigregister = _sysrepo.Change_swigregister
Change_swigregister(Change)

class Tree_Change(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tree_Change, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tree_Change, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sysrepo.new_Tree_Change()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Tree_Change
    __del__ = lambda self: None

    def oper(self):
        return _sysrepo.Tree_Change_oper(self)

    def node(self):
        return _sysrepo.Tree_Change_node(self)

    def prev_value(self):
        return _sysrepo.Tree_Change_prev_value(self)

    def prev_list(self):
        return _sysrepo.Tree_Change_prev_list(self)

    def prev_dflt(self):
        return _sysrepo.Tree_Change_prev_dflt(self)
Tree_Change_swigregister = _sysrepo.Tree_Change_swigregister
Tree_Change_swigregister(Tree_Change)

class Xpath_Ctx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xpath_Ctx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xpath_Ctx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sysrepo.new_Xpath_Ctx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begining(self):
        return _sysrepo.Xpath_Ctx_begining(self)

    def current_node(self):
        return _sysrepo.Xpath_Ctx_current_node(self)

    def replaced_position(self):
        return _sysrepo.Xpath_Ctx_replaced_position(self)

    def replaced_char(self):
        return _sysrepo.Xpath_Ctx_replaced_char(self)
    __swig_destroy__ = _sysrepo.delete_Xpath_Ctx
    __del__ = lambda self: None

    def next_node(self, xpath):
        return _sysrepo.Xpath_Ctx_next_node(self, xpath)

    def next_node_with_ns(self, xpath):
        return _sysrepo.Xpath_Ctx_next_node_with_ns(self, xpath)

    def next_key_name(self, xpath):
        return _sysrepo.Xpath_Ctx_next_key_name(self, xpath)

    def next_key_value(self, xpath):
        return _sysrepo.Xpath_Ctx_next_key_value(self, xpath)

    def node(self, xpath, node_name):
        return _sysrepo.Xpath_Ctx_node(self, xpath, node_name)

    def node_rel(self, xpath, node_name):
        return _sysrepo.Xpath_Ctx_node_rel(self, xpath, node_name)

    def node_idx(self, xpath, index):
        return _sysrepo.Xpath_Ctx_node_idx(self, xpath, index)

    def node_idx_rel(self, xpath, index):
        return _sysrepo.Xpath_Ctx_node_idx_rel(self, xpath, index)

    def node_key_value(self, xpath, key):
        return _sysrepo.Xpath_Ctx_node_key_value(self, xpath, key)

    def node_key_value_idx(self, xpath, index):
        return _sysrepo.Xpath_Ctx_node_key_value_idx(self, xpath, index)

    def key_value(self, xpath, node_name, key_name):
        return _sysrepo.Xpath_Ctx_key_value(self, xpath, node_name, key_name)

    def key_value_idx(self, xpath, node_index, key_index):
        return _sysrepo.Xpath_Ctx_key_value_idx(self, xpath, node_index, key_index)

    def last_node(self, xpath):
        return _sysrepo.Xpath_Ctx_last_node(self, xpath)

    def node_name(self, xpath):
        return _sysrepo.Xpath_Ctx_node_name(self, xpath)

    def node_name_eq(self, xpath, node_str):
        return _sysrepo.Xpath_Ctx_node_name_eq(self, xpath, node_str)

    def recover(self):
        return _sysrepo.Xpath_Ctx_recover(self)
Xpath_Ctx_swigregister = _sysrepo.Xpath_Ctx_swigregister
Xpath_Ctx_swigregister(Xpath_Ctx)


def check_libyang_error(ctx):
    return _sysrepo.check_libyang_error(ctx)
check_libyang_error = _sysrepo.check_libyang_error
Free_Type_CONTEXT = _sysrepo.Free_Type_CONTEXT
Free_Type_DATA_NODE = _sysrepo.Free_Type_DATA_NODE
Free_Type_SCHEMA_NODE = _sysrepo.Free_Type_SCHEMA_NODE
Free_Type_MODULE = _sysrepo.Free_Type_MODULE
Free_Type_SUBMODULE = _sysrepo.Free_Type_SUBMODULE
Free_Type_XML = _sysrepo.Free_Type_XML
Free_Type_SET = _sysrepo.Free_Type_SET
Free_Type_DIFFLIST = _sysrepo.Free_Type_DIFFLIST
class value_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, value_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, value_t, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["ctx"] = _sysrepo.value_t_ctx_set
    __swig_getmethods__["ctx"] = _sysrepo.value_t_ctx_get
    if _newclass:
        ctx = _swig_property(_sysrepo.value_t_ctx_get, _sysrepo.value_t_ctx_set)
    __swig_setmethods__["data"] = _sysrepo.value_t_data_set
    __swig_getmethods__["data"] = _sysrepo.value_t_data_get
    if _newclass:
        data = _swig_property(_sysrepo.value_t_data_get, _sysrepo.value_t_data_set)
    __swig_setmethods__["schema"] = _sysrepo.value_t_schema_set
    __swig_getmethods__["schema"] = _sysrepo.value_t_schema_get
    if _newclass:
        schema = _swig_property(_sysrepo.value_t_schema_get, _sysrepo.value_t_schema_set)
    __swig_setmethods__["module"] = _sysrepo.value_t_module_set
    __swig_getmethods__["module"] = _sysrepo.value_t_module_get
    if _newclass:
        module = _swig_property(_sysrepo.value_t_module_get, _sysrepo.value_t_module_set)
    __swig_setmethods__["submodule"] = _sysrepo.value_t_submodule_set
    __swig_getmethods__["submodule"] = _sysrepo.value_t_submodule_get
    if _newclass:
        submodule = _swig_property(_sysrepo.value_t_submodule_get, _sysrepo.value_t_submodule_set)
    __swig_setmethods__["elem"] = _sysrepo.value_t_elem_set
    __swig_getmethods__["elem"] = _sysrepo.value_t_elem_get
    if _newclass:
        elem = _swig_property(_sysrepo.value_t_elem_get, _sysrepo.value_t_elem_set)
    __swig_setmethods__["set"] = _sysrepo.value_t_set_set
    __swig_getmethods__["set"] = _sysrepo.value_t_set_get
    if _newclass:
        set = _swig_property(_sysrepo.value_t_set_get, _sysrepo.value_t_set_set)
    __swig_setmethods__["diff"] = _sysrepo.value_t_diff_set
    __swig_getmethods__["diff"] = _sysrepo.value_t_diff_get
    if _newclass:
        diff = _swig_property(_sysrepo.value_t_diff_get, _sysrepo.value_t_diff_set)
value_t_swigregister = _sysrepo.value_t_swigregister
value_t_swigregister(value_t)

class Deleter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Deleter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Deleter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Deleter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Deleter
    __del__ = lambda self: None
Deleter_swigregister = _sysrepo.Deleter_swigregister
Deleter_swigregister(Deleter)

class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Context
    __del__ = lambda self: None

    def set_searchdir(self, search_dir):
        return _sysrepo.Context_set_searchdir(self, search_dir)

    def unset_searchdirs(self, idx):
        return _sysrepo.Context_unset_searchdirs(self, idx)

    def get_searchdirs(self):
        return _sysrepo.Context_get_searchdirs(self)

    def set_allimplemented(self):
        return _sysrepo.Context_set_allimplemented(self)

    def unset_allimplemented(self):
        return _sysrepo.Context_unset_allimplemented(self)

    def set_disable_searchdirs(self):
        return _sysrepo.Context_set_disable_searchdirs(self)

    def unset_disable_searchdirs(self):
        return _sysrepo.Context_unset_disable_searchdirs(self)

    def set_disable_searchdir_cwd(self):
        return _sysrepo.Context_set_disable_searchdir_cwd(self)

    def unset_disable_searchdir_cwd(self):
        return _sysrepo.Context_unset_disable_searchdir_cwd(self)

    def set_prefer_searchdirs(self):
        return _sysrepo.Context_set_prefer_searchdirs(self)

    def unset_prefer_searchdirs(self):
        return _sysrepo.Context_unset_prefer_searchdirs(self)

    def info(self):
        return _sysrepo.Context_info(self)

    def get_module_iter(self):
        return _sysrepo.Context_get_module_iter(self)

    def get_disabled_module_iter(self):
        return _sysrepo.Context_get_disabled_module_iter(self)

    def get_module(self, name, revision=None, implemented=0):
        return _sysrepo.Context_get_module(self, name, revision, implemented)

    def get_module_older(self, module):
        return _sysrepo.Context_get_module_older(self, module)

    def load_module(self, name, revision=None):
        return _sysrepo.Context_load_module(self, name, revision)

    def get_module_by_ns(self, ns, revision=None, implemented=0):
        return _sysrepo.Context_get_module_by_ns(self, ns, revision, implemented)

    def get_submodule(self, module, revision=None, submodule=None, sub_revision=None):
        return _sysrepo.Context_get_submodule(self, module, revision, submodule, sub_revision)

    def get_submodule2(self, main_module, submodule=None):
        return _sysrepo.Context_get_submodule2(self, main_module, submodule)

    def get_node(self, start, data_path, output=0):
        return _sysrepo.Context_get_node(self, start, data_path, output)

    def data_instantiables(self, options):
        return _sysrepo.Context_data_instantiables(self, options)

    def find_path(self, schema_path):
        return _sysrepo.Context_find_path(self, schema_path)

    def clean(self):
        return _sysrepo.Context_clean(self)

    def add_missing_module_callback(self, *args):
        return _sysrepo.Context_add_missing_module_callback(self, *args)

    def parse_data_mem(self, data, format, options=0):
        return _sysrepo.Context_parse_data_mem(self, data, format, options)

    def parse_data_fd(self, fd, format, options=0):
        return _sysrepo.Context_parse_data_fd(self, fd, format, options)

    def parse_data_path(self, path, format, options=0):
        return _sysrepo.Context_parse_data_path(self, path, format, options)

    def parse_data_xml(self, elem, options=0):
        return _sysrepo.Context_parse_data_xml(self, elem, options)

    def parse_module_mem(self, data, format):
        return _sysrepo.Context_parse_module_mem(self, data, format)

    def parse_module_fd(self, fd, format):
        return _sysrepo.Context_parse_module_fd(self, fd, format)

    def parse_module_path(self, path, format):
        return _sysrepo.Context_parse_module_path(self, path, format)
    __swig_setmethods__["mod_missing_cb"] = _sysrepo.Context_mod_missing_cb_set
    __swig_getmethods__["mod_missing_cb"] = _sysrepo.Context_mod_missing_cb_get
    if _newclass:
        mod_missing_cb = _swig_property(_sysrepo.Context_mod_missing_cb_get, _sysrepo.Context_mod_missing_cb_set)
    __swig_setmethods__["mod_missing_deleter"] = _sysrepo.Context_mod_missing_deleter_set
    __swig_getmethods__["mod_missing_deleter"] = _sysrepo.Context_mod_missing_deleter_get
    if _newclass:
        mod_missing_deleter = _swig_property(_sysrepo.Context_mod_missing_deleter_get, _sysrepo.Context_mod_missing_deleter_set)
    if _newclass:
        cpp_mod_missing_cb = staticmethod(_sysrepo.Context_cpp_mod_missing_cb)
    else:
        cpp_mod_missing_cb = _sysrepo.Context_cpp_mod_missing_cb
    if _newclass:
        cpp_mod_missing_deleter = staticmethod(_sysrepo.Context_cpp_mod_missing_deleter)
    else:
        cpp_mod_missing_deleter = _sysrepo.Context_cpp_mod_missing_deleter

    def swig_ctx(self):
        return _sysrepo.Context_swig_ctx(self)
    __swig_setmethods__["wrap_cb_l"] = _sysrepo.Context_wrap_cb_l_set
    __swig_getmethods__["wrap_cb_l"] = _sysrepo.Context_wrap_cb_l_get
    if _newclass:
        wrap_cb_l = _swig_property(_sysrepo.Context_wrap_cb_l_get, _sysrepo.Context_wrap_cb_l_set)

    def set_module_imp_clb(self, clb, user_data=None):
        return _sysrepo.Context_set_module_imp_clb(self, clb, user_data)
Context_swigregister = _sysrepo.Context_swigregister
Context_swigregister(Context)

def Context_cpp_mod_missing_cb(mod_name, mod_rev, submod_name, sub_rev, user_data, format, free_module_data):
    return _sysrepo.Context_cpp_mod_missing_cb(mod_name, mod_rev, submod_name, sub_rev, user_data, format, free_module_data)
Context_cpp_mod_missing_cb = _sysrepo.Context_cpp_mod_missing_cb

def Context_cpp_mod_missing_deleter(data, user_data):
    return _sysrepo.Context_cpp_mod_missing_deleter(data, user_data)
Context_cpp_mod_missing_deleter = _sysrepo.Context_cpp_mod_missing_deleter


def create_new_Context(ctx):
    return _sysrepo.create_new_Context(ctx)
create_new_Context = _sysrepo.create_new_Context
class Error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr

    def __init__(self, eitem):
        this = _sysrepo.new_Error(eitem)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Error
    __del__ = lambda self: None

    def err(self):
        return _sysrepo.Error_err(self)

    def vecode(self):
        return _sysrepo.Error_vecode(self)

    def errmsg(self):
        return _sysrepo.Error_errmsg(self)

    def errpath(self):
        return _sysrepo.Error_errpath(self)

    def errapptag(self):
        return _sysrepo.Error_errapptag(self)
Error_swigregister = _sysrepo.Error_swigregister
Error_swigregister(Error)


def get_ly_errors(context):
    return _sysrepo.get_ly_errors(context)
get_ly_errors = _sysrepo.get_ly_errors

def set_log_options(options):
    return _sysrepo.set_log_options(options)
set_log_options = _sysrepo.set_log_options

def set_log_verbosity(level):
    return _sysrepo.set_log_verbosity(level)
set_log_verbosity = _sysrepo.set_log_verbosity
class Set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Set, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Set(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Set
    __del__ = lambda self: None

    def size(self):
        return _sysrepo.Set_size(self)

    def number(self):
        return _sysrepo.Set_number(self)

    def data(self):
        return _sysrepo.Set_data(self)

    def schema(self):
        return _sysrepo.Set_schema(self)

    def dup(self):
        return _sysrepo.Set_dup(self)

    def add(self, *args):
        return _sysrepo.Set_add(self, *args)

    def contains(self, *args):
        return _sysrepo.Set_contains(self, *args)

    def clean(self):
        return _sysrepo.Set_clean(self)

    def rm(self, *args):
        return _sysrepo.Set_rm(self, *args)

    def rm_index(self, index):
        return _sysrepo.Set_rm_index(self, index)
Set_swigregister = _sysrepo.Set_swigregister
Set_swigregister(Set)

class Value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr

    def __init__(self, value, value_type, value_flags, deleter):
        this = _sysrepo.new_Value(value, value_type, value_flags, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Value
    __del__ = lambda self: None

    def binary(self):
        return _sysrepo.Value_binary(self)

    def bln(self):
        return _sysrepo.Value_bln(self)

    def dec64(self):
        return _sysrepo.Value_dec64(self)

    def enm(self):
        return _sysrepo.Value_enm(self)

    def ident(self):
        return _sysrepo.Value_ident(self)

    def instance(self):
        return _sysrepo.Value_instance(self)

    def int8(self):
        return _sysrepo.Value_int8(self)

    def int16(self):
        return _sysrepo.Value_int16(self)

    def int32(self):
        return _sysrepo.Value_int32(self)

    def int64(self):
        return _sysrepo.Value_int64(self)

    def leafref(self):
        return _sysrepo.Value_leafref(self)

    def string(self):
        return _sysrepo.Value_string(self)

    def uint8(self):
        return _sysrepo.Value_uint8(self)

    def uint16(self):
        return _sysrepo.Value_uint16(self)

    def uintu32(self):
        return _sysrepo.Value_uintu32(self)

    def uint64(self):
        return _sysrepo.Value_uint64(self)
Value_swigregister = _sysrepo.Value_swigregister
Value_swigregister(Value)

class Data_Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data_Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data_Node, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Data_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Data_Node
    __del__ = lambda self: None

    def schema(self):
        return _sysrepo.Data_Node_schema(self)

    def validity(self):
        return _sysrepo.Data_Node_validity(self)

    def dflt(self):
        return _sysrepo.Data_Node_dflt(self)

    def when_status(self):
        return _sysrepo.Data_Node_when_status(self)

    def attr(self):
        return _sysrepo.Data_Node_attr(self)

    def next(self):
        return _sysrepo.Data_Node_next(self)

    def prev(self):
        return _sysrepo.Data_Node_prev(self)

    def parent(self):
        return _sysrepo.Data_Node_parent(self)

    def child(self):
        return _sysrepo.Data_Node_child(self)

    def path(self):
        return _sysrepo.Data_Node_path(self)

    def dup(self, recursive):
        return _sysrepo.Data_Node_dup(self, recursive)

    def dup_withsiblings(self, recursive):
        return _sysrepo.Data_Node_dup_withsiblings(self, recursive)

    def dup_to_ctx(self, recursive, context):
        return _sysrepo.Data_Node_dup_to_ctx(self, recursive, context)

    def merge(self, source, options):
        return _sysrepo.Data_Node_merge(self, source, options)

    def merge_to_ctx(self, source, options, context):
        return _sysrepo.Data_Node_merge_to_ctx(self, source, options, context)

    def insert(self, new_node):
        return _sysrepo.Data_Node_insert(self, new_node)

    def insert_sibling(self, new_node):
        return _sysrepo.Data_Node_insert_sibling(self, new_node)

    def insert_before(self, new_node):
        return _sysrepo.Data_Node_insert_before(self, new_node)

    def insert_after(self, new_node):
        return _sysrepo.Data_Node_insert_after(self, new_node)

    def schema_sort(self, recursive):
        return _sysrepo.Data_Node_schema_sort(self, recursive)

    def find_path(self, expr):
        return _sysrepo.Data_Node_find_path(self, expr)

    def find_instance(self, schema):
        return _sysrepo.Data_Node_find_instance(self, schema)

    def first_sibling(self):
        return _sysrepo.Data_Node_first_sibling(self)

    def validate(self, *args):
        return _sysrepo.Data_Node_validate(self, *args)

    def validate_value(self, value):
        return _sysrepo.Data_Node_validate_value(self, value)

    def diff(self, second, options):
        return _sysrepo.Data_Node_diff(self, second, options)

    def new_path(self, *args):
        return _sysrepo.Data_Node_new_path(self, *args)

    def list_pos(self):
        return _sysrepo.Data_Node_list_pos(self)

    def unlink(self):
        return _sysrepo.Data_Node_unlink(self)

    def insert_attr(self, module, name, value):
        return _sysrepo.Data_Node_insert_attr(self, module, name, value)

    def node_module(self):
        return _sysrepo.Data_Node_node_module(self)

    def print_mem(self, format, options):
        return _sysrepo.Data_Node_print_mem(self, format, options)

    def tree_for(self):
        return _sysrepo.Data_Node_tree_for(self)

    def tree_dfs(self):
        return _sysrepo.Data_Node_tree_dfs(self)

    def swig_node(self):
        return _sysrepo.Data_Node_swig_node(self)

    def swig_deleter(self):
        return _sysrepo.Data_Node_swig_deleter(self)

    def C_lyd_node(self):
        return _sysrepo.Data_Node_C_lyd_node(self)

    def subtype(self):
        return _sysrepo.Data_Node_subtype(self)

    def reset(self, reset_val):
        return _sysrepo.Data_Node_reset(self, reset_val)
Data_Node_swigregister = _sysrepo.Data_Node_swigregister
Data_Node_swigregister(Data_Node)


def create_new_Data_Node(node):
    return _sysrepo.create_new_Data_Node(node)
create_new_Data_Node = _sysrepo.create_new_Data_Node
class Data_Node_Leaf_List(Data_Node):
    __swig_setmethods__ = {}
    for _s in [Data_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data_Node_Leaf_List, name, value)
    __swig_getmethods__ = {}
    for _s in [Data_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Data_Node_Leaf_List, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Data_Node_Leaf_List(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Data_Node_Leaf_List
    __del__ = lambda self: None

    def value_str(self):
        return _sysrepo.Data_Node_Leaf_List_value_str(self)

    def value(self):
        return _sysrepo.Data_Node_Leaf_List_value(self)

    def value_type(self):
        return _sysrepo.Data_Node_Leaf_List_value_type(self)

    def child(self):
        return _sysrepo.Data_Node_Leaf_List_child(self)

    def change_leaf(self, val_str):
        return _sysrepo.Data_Node_Leaf_List_change_leaf(self, val_str)

    def wd_default(self):
        return _sysrepo.Data_Node_Leaf_List_wd_default(self)

    def leaf_type(self):
        return _sysrepo.Data_Node_Leaf_List_leaf_type(self)
Data_Node_Leaf_List_swigregister = _sysrepo.Data_Node_Leaf_List_swigregister
Data_Node_Leaf_List_swigregister(Data_Node_Leaf_List)

class Data_Node_Anydata(Data_Node):
    __swig_setmethods__ = {}
    for _s in [Data_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data_Node_Anydata, name, value)
    __swig_getmethods__ = {}
    for _s in [Data_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Data_Node_Anydata, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Data_Node_Anydata(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Data_Node_Anydata
    __del__ = lambda self: None

    def value_type(self):
        return _sysrepo.Data_Node_Anydata_value_type(self)

    def value(self):
        return _sysrepo.Data_Node_Anydata_value(self)

    def child(self):
        return _sysrepo.Data_Node_Anydata_child(self)
Data_Node_Anydata_swigregister = _sysrepo.Data_Node_Anydata_swigregister
Data_Node_Anydata_swigregister(Data_Node_Anydata)

class Attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Attr, name)
    __repr__ = _swig_repr

    def __init__(self, attr, deleter=0):
        this = _sysrepo.new_Attr(attr, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Attr
    __del__ = lambda self: None

    def parent(self):
        return _sysrepo.Attr_parent(self)

    def next(self):
        return _sysrepo.Attr_next(self)

    def name(self):
        return _sysrepo.Attr_name(self)

    def value_str(self):
        return _sysrepo.Attr_value_str(self)

    def value(self):
        return _sysrepo.Attr_value(self)

    def value_type(self):
        return _sysrepo.Attr_value_type(self)
Attr_swigregister = _sysrepo.Attr_swigregister
Attr_swigregister(Attr)

class Difflist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Difflist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Difflist, name)
    __repr__ = _swig_repr

    def __init__(self, diff, deleter):
        this = _sysrepo.new_Difflist(diff, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Difflist
    __del__ = lambda self: None

    def type(self):
        return _sysrepo.Difflist_type(self)

    def first(self):
        return _sysrepo.Difflist_first(self)

    def second(self):
        return _sysrepo.Difflist_second(self)
Difflist_swigregister = _sysrepo.Difflist_swigregister
Difflist_swigregister(Difflist)

class Module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr

    def __init__(self, module, deleter):
        this = _sysrepo.new_Module(module, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Module
    __del__ = lambda self: None

    def name(self):
        return _sysrepo.Module_name(self)

    def prefix(self):
        return _sysrepo.Module_prefix(self)

    def dsc(self):
        return _sysrepo.Module_dsc(self)

    def ref(self):
        return _sysrepo.Module_ref(self)

    def org(self):
        return _sysrepo.Module_org(self)

    def contact(self):
        return _sysrepo.Module_contact(self)

    def filepath(self):
        return _sysrepo.Module_filepath(self)

    def type(self):
        return _sysrepo.Module_type(self)

    def version(self):
        return _sysrepo.Module_version(self)

    def deviated(self):
        return _sysrepo.Module_deviated(self)

    def disabled(self):
        return _sysrepo.Module_disabled(self)

    def implemented(self):
        return _sysrepo.Module_implemented(self)

    def rev_size(self):
        return _sysrepo.Module_rev_size(self)

    def imp_size(self):
        return _sysrepo.Module_imp_size(self)

    def inc_size(self):
        return _sysrepo.Module_inc_size(self)

    def ident_size(self):
        return _sysrepo.Module_ident_size(self)

    def tpdf_size(self):
        return _sysrepo.Module_tpdf_size(self)

    def features_size(self):
        return _sysrepo.Module_features_size(self)

    def augment_size(self):
        return _sysrepo.Module_augment_size(self)

    def devaiation_size(self):
        return _sysrepo.Module_devaiation_size(self)

    def extensions_size(self):
        return _sysrepo.Module_extensions_size(self)

    def ext_size(self):
        return _sysrepo.Module_ext_size(self)

    def ns(self):
        return _sysrepo.Module_ns(self)

    def rev(self):
        return _sysrepo.Module_rev(self)

    def deviation(self):
        return _sysrepo.Module_deviation(self)

    def data(self):
        return _sysrepo.Module_data(self)

    def data_instantiables(self, options):
        return _sysrepo.Module_data_instantiables(self, options)

    def print_mem(self, *args):
        return _sysrepo.Module_print_mem(self, *args)

    def feature_enable(self, feature):
        return _sysrepo.Module_feature_enable(self, feature)

    def feature_disable(self, feature):
        return _sysrepo.Module_feature_disable(self, feature)

    def feature_state(self, feature):
        return _sysrepo.Module_feature_state(self, feature)
Module_swigregister = _sysrepo.Module_swigregister
Module_swigregister(Module)

class Submodule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Submodule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Submodule, name)
    __repr__ = _swig_repr

    def __init__(self, submodule, deleter):
        this = _sysrepo.new_Submodule(submodule, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Submodule
    __del__ = lambda self: None

    def ctx(self):
        return _sysrepo.Submodule_ctx(self)

    def name(self):
        return _sysrepo.Submodule_name(self)

    def prefix(self):
        return _sysrepo.Submodule_prefix(self)

    def dsc(self):
        return _sysrepo.Submodule_dsc(self)

    def ref(self):
        return _sysrepo.Submodule_ref(self)

    def org(self):
        return _sysrepo.Submodule_org(self)

    def contact(self):
        return _sysrepo.Submodule_contact(self)

    def filepath(self):
        return _sysrepo.Submodule_filepath(self)

    def type(self):
        return _sysrepo.Submodule_type(self)

    def version(self):
        return _sysrepo.Submodule_version(self)

    def deviated(self):
        return _sysrepo.Submodule_deviated(self)

    def disabled(self):
        return _sysrepo.Submodule_disabled(self)

    def implemented(self):
        return _sysrepo.Submodule_implemented(self)

    def rev_size(self):
        return _sysrepo.Submodule_rev_size(self)

    def imp_size(self):
        return _sysrepo.Submodule_imp_size(self)

    def inc_size(self):
        return _sysrepo.Submodule_inc_size(self)

    def ident_size(self):
        return _sysrepo.Submodule_ident_size(self)

    def tpdf_size(self):
        return _sysrepo.Submodule_tpdf_size(self)

    def features_size(self):
        return _sysrepo.Submodule_features_size(self)

    def augment_size(self):
        return _sysrepo.Submodule_augment_size(self)

    def deviation_size(self):
        return _sysrepo.Submodule_deviation_size(self)

    def extensions_size(self):
        return _sysrepo.Submodule_extensions_size(self)

    def ext_size(self):
        return _sysrepo.Submodule_ext_size(self)

    def rev(self):
        return _sysrepo.Submodule_rev(self)

    def deviation(self):
        return _sysrepo.Submodule_deviation(self)

    def belongsto(self):
        return _sysrepo.Submodule_belongsto(self)
Submodule_swigregister = _sysrepo.Submodule_swigregister
Submodule_swigregister(Submodule)

class Type_Info_Binary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Binary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Binary, name)
    __repr__ = _swig_repr

    def __init__(self, info_binary, deleter):
        this = _sysrepo.new_Type_Info_Binary(info_binary, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Binary
    __del__ = lambda self: None

    def length(self):
        return _sysrepo.Type_Info_Binary_length(self)
Type_Info_Binary_swigregister = _sysrepo.Type_Info_Binary_swigregister
Type_Info_Binary_swigregister(Type_Info_Binary)

class Type_Bit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Bit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Bit, name)
    __repr__ = _swig_repr

    def __init__(self, info_bit, deleter):
        this = _sysrepo.new_Type_Bit(info_bit, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Bit
    __del__ = lambda self: None

    def name(self):
        return _sysrepo.Type_Bit_name(self)

    def dsc(self):
        return _sysrepo.Type_Bit_dsc(self)

    def ref(self):
        return _sysrepo.Type_Bit_ref(self)

    def flags(self):
        return _sysrepo.Type_Bit_flags(self)

    def ext_size(self):
        return _sysrepo.Type_Bit_ext_size(self)

    def iffeature_size(self):
        return _sysrepo.Type_Bit_iffeature_size(self)

    def pos(self):
        return _sysrepo.Type_Bit_pos(self)

    def ext(self):
        return _sysrepo.Type_Bit_ext(self)

    def iffeature(self):
        return _sysrepo.Type_Bit_iffeature(self)
Type_Bit_swigregister = _sysrepo.Type_Bit_swigregister
Type_Bit_swigregister(Type_Bit)

class Type_Info_Bits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Bits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Bits, name)
    __repr__ = _swig_repr

    def __init__(self, info_bits, deleter):
        this = _sysrepo.new_Type_Info_Bits(info_bits, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Bits
    __del__ = lambda self: None

    def bit(self):
        return _sysrepo.Type_Info_Bits_bit(self)

    def count(self):
        return _sysrepo.Type_Info_Bits_count(self)
Type_Info_Bits_swigregister = _sysrepo.Type_Info_Bits_swigregister
Type_Info_Bits_swigregister(Type_Info_Bits)

class Type_Info_Dec64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Dec64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Dec64, name)
    __repr__ = _swig_repr

    def __init__(self, info_dec64, deleter):
        this = _sysrepo.new_Type_Info_Dec64(info_dec64, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Dec64
    __del__ = lambda self: None

    def range(self):
        return _sysrepo.Type_Info_Dec64_range(self)

    def dig(self):
        return _sysrepo.Type_Info_Dec64_dig(self)

    def div(self):
        return _sysrepo.Type_Info_Dec64_div(self)
Type_Info_Dec64_swigregister = _sysrepo.Type_Info_Dec64_swigregister
Type_Info_Dec64_swigregister(Type_Info_Dec64)

class Type_Enum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Enum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Enum, name)
    __repr__ = _swig_repr

    def __init__(self, info_enum, deleter):
        this = _sysrepo.new_Type_Enum(info_enum, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Enum
    __del__ = lambda self: None

    def name(self):
        return _sysrepo.Type_Enum_name(self)

    def dsc(self):
        return _sysrepo.Type_Enum_dsc(self)

    def ref(self):
        return _sysrepo.Type_Enum_ref(self)

    def flags(self):
        return _sysrepo.Type_Enum_flags(self)

    def ext_size(self):
        return _sysrepo.Type_Enum_ext_size(self)

    def iffeature_size(self):
        return _sysrepo.Type_Enum_iffeature_size(self)

    def value(self):
        return _sysrepo.Type_Enum_value(self)

    def ext(self):
        return _sysrepo.Type_Enum_ext(self)

    def iffeature(self):
        return _sysrepo.Type_Enum_iffeature(self)
Type_Enum_swigregister = _sysrepo.Type_Enum_swigregister
Type_Enum_swigregister(Type_Enum)

class Type_Info_Enums(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Enums, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Enums, name)
    __repr__ = _swig_repr

    def __init__(self, info_enums, deleter):
        this = _sysrepo.new_Type_Info_Enums(info_enums, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Enums
    __del__ = lambda self: None

    def enm(self):
        return _sysrepo.Type_Info_Enums_enm(self)

    def count(self):
        return _sysrepo.Type_Info_Enums_count(self)
Type_Info_Enums_swigregister = _sysrepo.Type_Info_Enums_swigregister
Type_Info_Enums_swigregister(Type_Info_Enums)

class Type_Info_Ident(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Ident, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Ident, name)
    __repr__ = _swig_repr

    def __init__(self, info_ident, deleter):
        this = _sysrepo.new_Type_Info_Ident(info_ident, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Ident
    __del__ = lambda self: None

    def ref(self):
        return _sysrepo.Type_Info_Ident_ref(self)

    def count(self):
        return _sysrepo.Type_Info_Ident_count(self)
Type_Info_Ident_swigregister = _sysrepo.Type_Info_Ident_swigregister
Type_Info_Ident_swigregister(Type_Info_Ident)

class Type_Info_Inst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Inst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Inst, name)
    __repr__ = _swig_repr

    def __init__(self, info_inst, deleter):
        this = _sysrepo.new_Type_Info_Inst(info_inst, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Inst
    __del__ = lambda self: None

    def req(self):
        return _sysrepo.Type_Info_Inst_req(self)
Type_Info_Inst_swigregister = _sysrepo.Type_Info_Inst_swigregister
Type_Info_Inst_swigregister(Type_Info_Inst)

class Type_Info_Num(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Num, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Num, name)
    __repr__ = _swig_repr

    def __init__(self, info_num, deleter):
        this = _sysrepo.new_Type_Info_Num(info_num, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Num
    __del__ = lambda self: None

    def range(self):
        return _sysrepo.Type_Info_Num_range(self)
Type_Info_Num_swigregister = _sysrepo.Type_Info_Num_swigregister
Type_Info_Num_swigregister(Type_Info_Num)

class Type_Info_Lref(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Lref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Lref, name)
    __repr__ = _swig_repr

    def __init__(self, info_lref, deleter):
        this = _sysrepo.new_Type_Info_Lref(info_lref, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Lref
    __del__ = lambda self: None

    def path(self):
        return _sysrepo.Type_Info_Lref_path(self)

    def target(self):
        return _sysrepo.Type_Info_Lref_target(self)

    def req(self):
        return _sysrepo.Type_Info_Lref_req(self)
Type_Info_Lref_swigregister = _sysrepo.Type_Info_Lref_swigregister
Type_Info_Lref_swigregister(Type_Info_Lref)

class Type_Info_Str(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Str, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Str, name)
    __repr__ = _swig_repr

    def __init__(self, info_str, deleter):
        this = _sysrepo.new_Type_Info_Str(info_str, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Str
    __del__ = lambda self: None

    def length(self):
        return _sysrepo.Type_Info_Str_length(self)

    def patterns(self):
        return _sysrepo.Type_Info_Str_patterns(self)

    def pat_count(self):
        return _sysrepo.Type_Info_Str_pat_count(self)
Type_Info_Str_swigregister = _sysrepo.Type_Info_Str_swigregister
Type_Info_Str_swigregister(Type_Info_Str)

class Type_Info_Union(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Union, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Union, name)
    __repr__ = _swig_repr

    def __init__(self, info_union, deleter):
        this = _sysrepo.new_Type_Info_Union(info_union, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info_Union
    __del__ = lambda self: None

    def types(self):
        return _sysrepo.Type_Info_Union_types(self)

    def count(self):
        return _sysrepo.Type_Info_Union_count(self)

    def has_ptr_type(self):
        return _sysrepo.Type_Info_Union_has_ptr_type(self)
Type_Info_Union_swigregister = _sysrepo.Type_Info_Union_swigregister
Type_Info_Union_swigregister(Type_Info_Union)

class Type_Info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info, name)
    __repr__ = _swig_repr

    def __init__(self, info, type, flags, deleter):
        this = _sysrepo.new_Type_Info(info, type, flags, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type_Info
    __del__ = lambda self: None

    def binary(self):
        return _sysrepo.Type_Info_binary(self)

    def bits(self):
        return _sysrepo.Type_Info_bits(self)

    def dec64(self):
        return _sysrepo.Type_Info_dec64(self)

    def enums(self):
        return _sysrepo.Type_Info_enums(self)

    def ident(self):
        return _sysrepo.Type_Info_ident(self)

    def inst(self):
        return _sysrepo.Type_Info_inst(self)

    def num(self):
        return _sysrepo.Type_Info_num(self)

    def lref(self):
        return _sysrepo.Type_Info_lref(self)

    def str(self):
        return _sysrepo.Type_Info_str(self)

    def uni(self):
        return _sysrepo.Type_Info_uni(self)
Type_Info_swigregister = _sysrepo.Type_Info_swigregister
Type_Info_swigregister(Type_Info)

class Type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type, name)
    __repr__ = _swig_repr

    def __init__(self, type, deleter):
        this = _sysrepo.new_Type(type, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Type
    __del__ = lambda self: None

    def base(self):
        return _sysrepo.Type_base(self)

    def ext_size(self):
        return _sysrepo.Type_ext_size(self)

    def ext(self):
        return _sysrepo.Type_ext(self)

    def der(self):
        return _sysrepo.Type_der(self)

    def parent(self):
        return _sysrepo.Type_parent(self)

    def info(self):
        return _sysrepo.Type_info(self)
Type_swigregister = _sysrepo.Type_swigregister
Type_swigregister(Type)

class Iffeature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Iffeature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Iffeature, name)
    __repr__ = _swig_repr

    def __init__(self, iffeature, deleter):
        this = _sysrepo.new_Iffeature(iffeature, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Iffeature
    __del__ = lambda self: None

    def expr(self):
        return _sysrepo.Iffeature_expr(self)

    def ext_size(self):
        return _sysrepo.Iffeature_ext_size(self)

    def ext(self):
        return _sysrepo.Iffeature_ext(self)

    def value(self):
        return _sysrepo.Iffeature_value(self)
Iffeature_swigregister = _sysrepo.Iffeature_swigregister
Iffeature_swigregister(Iffeature)

class Ext_Instance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ext_Instance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ext_Instance, name)
    __repr__ = _swig_repr

    def __init__(self, ext_instance, deleter):
        this = _sysrepo.new_Ext_Instance(ext_instance, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Ext_Instance
    __del__ = lambda self: None

    def arg_value(self):
        return _sysrepo.Ext_Instance_arg_value(self)

    def flags(self):
        return _sysrepo.Ext_Instance_flags(self)

    def ext_size(self):
        return _sysrepo.Ext_Instance_ext_size(self)

    def insubstmt_index(self):
        return _sysrepo.Ext_Instance_insubstmt_index(self)

    def insubstmt(self):
        return _sysrepo.Ext_Instance_insubstmt(self)

    def parent_type(self):
        return _sysrepo.Ext_Instance_parent_type(self)

    def ext_type(self):
        return _sysrepo.Ext_Instance_ext_type(self)

    def ext(self):
        return _sysrepo.Ext_Instance_ext(self)

    def _def(self):
        return _sysrepo.Ext_Instance__def(self)

    def priv(self):
        return _sysrepo.Ext_Instance_priv(self)

    def module(self):
        return _sysrepo.Ext_Instance_module(self)

    def nodetype(self):
        return _sysrepo.Ext_Instance_nodetype(self)
Ext_Instance_swigregister = _sysrepo.Ext_Instance_swigregister
Ext_Instance_swigregister(Ext_Instance)

class Schema_Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node, name)
    __repr__ = _swig_repr

    def __init__(self, node, deleter):
        this = _sysrepo.new_Schema_Node(node, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node
    __del__ = lambda self: None

    def name(self):
        return _sysrepo.Schema_Node_name(self)

    def dsc(self):
        return _sysrepo.Schema_Node_dsc(self)

    def ref(self):
        return _sysrepo.Schema_Node_ref(self)

    def flags(self):
        return _sysrepo.Schema_Node_flags(self)

    def ext_size(self):
        return _sysrepo.Schema_Node_ext_size(self)

    def iffeature_size(self):
        return _sysrepo.Schema_Node_iffeature_size(self)

    def ext(self):
        return _sysrepo.Schema_Node_ext(self)

    def iffeature(self):
        return _sysrepo.Schema_Node_iffeature(self)

    def module(self):
        return _sysrepo.Schema_Node_module(self)

    def nodetype(self):
        return _sysrepo.Schema_Node_nodetype(self)

    def parent(self):
        return _sysrepo.Schema_Node_parent(self)

    def child(self):
        return _sysrepo.Schema_Node_child(self)

    def next(self):
        return _sysrepo.Schema_Node_next(self)

    def prev(self):
        return _sysrepo.Schema_Node_prev(self)

    def path(self, options=0):
        return _sysrepo.Schema_Node_path(self, options)

    def validate_value(self, value):
        return _sysrepo.Schema_Node_validate_value(self, value)

    def child_instantiables(self, options):
        return _sysrepo.Schema_Node_child_instantiables(self, options)

    def find_path(self, path):
        return _sysrepo.Schema_Node_find_path(self, path)

    def xpath_atomize(self, *args):
        return _sysrepo.Schema_Node_xpath_atomize(self, *args)

    def tree_for(self):
        return _sysrepo.Schema_Node_tree_for(self)

    def tree_dfs(self):
        return _sysrepo.Schema_Node_tree_dfs(self)

    def swig_node(self):
        return _sysrepo.Schema_Node_swig_node(self)

    def swig_deleter(self):
        return _sysrepo.Schema_Node_swig_deleter(self)

    def subtype(self):
        return _sysrepo.Schema_Node_subtype(self)
Schema_Node_swigregister = _sysrepo.Schema_Node_swigregister
Schema_Node_swigregister(Schema_Node)

class Schema_Node_Container(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Container, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Container, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Container(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Container
    __del__ = lambda self: None

    def when(self):
        return _sysrepo.Schema_Node_Container_when(self)

    def must(self):
        return _sysrepo.Schema_Node_Container_must(self)

    def ptdf(self):
        return _sysrepo.Schema_Node_Container_ptdf(self)

    def presence(self):
        return _sysrepo.Schema_Node_Container_presence(self)
Schema_Node_Container_swigregister = _sysrepo.Schema_Node_Container_swigregister
Schema_Node_Container_swigregister(Schema_Node_Container)

class Schema_Node_Choice(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Choice, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Choice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Choice(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Choice
    __del__ = lambda self: None

    def when(self):
        return _sysrepo.Schema_Node_Choice_when(self)

    def dflt(self):
        return _sysrepo.Schema_Node_Choice_dflt(self)
Schema_Node_Choice_swigregister = _sysrepo.Schema_Node_Choice_swigregister
Schema_Node_Choice_swigregister(Schema_Node_Choice)

class Schema_Node_Leaf(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Leaf, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Leaf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Leaf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Leaf
    __del__ = lambda self: None

    def backlinks(self):
        return _sysrepo.Schema_Node_Leaf_backlinks(self)

    def when(self):
        return _sysrepo.Schema_Node_Leaf_when(self)

    def type(self):
        return _sysrepo.Schema_Node_Leaf_type(self)

    def units(self):
        return _sysrepo.Schema_Node_Leaf_units(self)

    def dflt(self):
        return _sysrepo.Schema_Node_Leaf_dflt(self)

    def child(self):
        return _sysrepo.Schema_Node_Leaf_child(self)

    def is_key(self):
        return _sysrepo.Schema_Node_Leaf_is_key(self)
Schema_Node_Leaf_swigregister = _sysrepo.Schema_Node_Leaf_swigregister
Schema_Node_Leaf_swigregister(Schema_Node_Leaf)

class Schema_Node_Leaflist(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Leaflist, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Leaflist, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Leaflist(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Leaflist
    __del__ = lambda self: None

    def dflt_size(self):
        return _sysrepo.Schema_Node_Leaflist_dflt_size(self)

    def must_size(self):
        return _sysrepo.Schema_Node_Leaflist_must_size(self)

    def when(self):
        return _sysrepo.Schema_Node_Leaflist_when(self)

    def backlinks(self):
        return _sysrepo.Schema_Node_Leaflist_backlinks(self)

    def must(self):
        return _sysrepo.Schema_Node_Leaflist_must(self)

    def type(self):
        return _sysrepo.Schema_Node_Leaflist_type(self)

    def units(self):
        return _sysrepo.Schema_Node_Leaflist_units(self)

    def dflt(self):
        return _sysrepo.Schema_Node_Leaflist_dflt(self)

    def min(self):
        return _sysrepo.Schema_Node_Leaflist_min(self)

    def max(self):
        return _sysrepo.Schema_Node_Leaflist_max(self)

    def child(self):
        return _sysrepo.Schema_Node_Leaflist_child(self)
Schema_Node_Leaflist_swigregister = _sysrepo.Schema_Node_Leaflist_swigregister
Schema_Node_Leaflist_swigregister(Schema_Node_Leaflist)

class Schema_Node_List(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_List, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_List, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_List(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_List
    __del__ = lambda self: None

    def must_size(self):
        return _sysrepo.Schema_Node_List_must_size(self)

    def tpdf_size(self):
        return _sysrepo.Schema_Node_List_tpdf_size(self)

    def keys_size(self):
        return _sysrepo.Schema_Node_List_keys_size(self)

    def unique_size(self):
        return _sysrepo.Schema_Node_List_unique_size(self)

    def when(self):
        return _sysrepo.Schema_Node_List_when(self)

    def must(self):
        return _sysrepo.Schema_Node_List_must(self)

    def tpdf(self):
        return _sysrepo.Schema_Node_List_tpdf(self)

    def keys(self):
        return _sysrepo.Schema_Node_List_keys(self)

    def unique(self):
        return _sysrepo.Schema_Node_List_unique(self)

    def min(self):
        return _sysrepo.Schema_Node_List_min(self)

    def max(self):
        return _sysrepo.Schema_Node_List_max(self)

    def keys_str(self):
        return _sysrepo.Schema_Node_List_keys_str(self)
Schema_Node_List_swigregister = _sysrepo.Schema_Node_List_swigregister
Schema_Node_List_swigregister(Schema_Node_List)

class Schema_Node_Anydata(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Anydata, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Anydata, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Anydata(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Anydata
    __del__ = lambda self: None

    def must_size(self):
        return _sysrepo.Schema_Node_Anydata_must_size(self)

    def when(self):
        return _sysrepo.Schema_Node_Anydata_when(self)

    def must(self):
        return _sysrepo.Schema_Node_Anydata_must(self)
Schema_Node_Anydata_swigregister = _sysrepo.Schema_Node_Anydata_swigregister
Schema_Node_Anydata_swigregister(Schema_Node_Anydata)

class Schema_Node_Uses(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Uses, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Uses, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Uses(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Uses
    __del__ = lambda self: None

    def augment_size(self):
        return _sysrepo.Schema_Node_Uses_augment_size(self)

    def when(self):
        return _sysrepo.Schema_Node_Uses_when(self)

    def refine(self):
        return _sysrepo.Schema_Node_Uses_refine(self)

    def augment(self):
        return _sysrepo.Schema_Node_Uses_augment(self)

    def grp(self):
        return _sysrepo.Schema_Node_Uses_grp(self)
Schema_Node_Uses_swigregister = _sysrepo.Schema_Node_Uses_swigregister
Schema_Node_Uses_swigregister(Schema_Node_Uses)

class Schema_Node_Grp(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Grp, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Grp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Grp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Grp
    __del__ = lambda self: None

    def tpdf_size(self):
        return _sysrepo.Schema_Node_Grp_tpdf_size(self)

    def tpdf(self):
        return _sysrepo.Schema_Node_Grp_tpdf(self)
Schema_Node_Grp_swigregister = _sysrepo.Schema_Node_Grp_swigregister
Schema_Node_Grp_swigregister(Schema_Node_Grp)

class Schema_Node_Case(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Case, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Case, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Case(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Case
    __del__ = lambda self: None

    def when(self):
        return _sysrepo.Schema_Node_Case_when(self)
Schema_Node_Case_swigregister = _sysrepo.Schema_Node_Case_swigregister
Schema_Node_Case_swigregister(Schema_Node_Case)

class Schema_Node_Inout(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Inout, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Inout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Inout(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Inout
    __del__ = lambda self: None

    def tpdf_size(self):
        return _sysrepo.Schema_Node_Inout_tpdf_size(self)

    def must_size(self):
        return _sysrepo.Schema_Node_Inout_must_size(self)

    def tpdf(self):
        return _sysrepo.Schema_Node_Inout_tpdf(self)

    def must(self):
        return _sysrepo.Schema_Node_Inout_must(self)
Schema_Node_Inout_swigregister = _sysrepo.Schema_Node_Inout_swigregister
Schema_Node_Inout_swigregister(Schema_Node_Inout)

class Schema_Node_Notif(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Notif, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Notif, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Notif(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Notif
    __del__ = lambda self: None

    def tpdf_size(self):
        return _sysrepo.Schema_Node_Notif_tpdf_size(self)

    def must_size(self):
        return _sysrepo.Schema_Node_Notif_must_size(self)

    def tpdf(self):
        return _sysrepo.Schema_Node_Notif_tpdf(self)

    def must(self):
        return _sysrepo.Schema_Node_Notif_must(self)
Schema_Node_Notif_swigregister = _sysrepo.Schema_Node_Notif_swigregister
Schema_Node_Notif_swigregister(Schema_Node_Notif)

class Schema_Node_Rpc_Action(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Rpc_Action, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Rpc_Action, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Rpc_Action(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Rpc_Action
    __del__ = lambda self: None

    def tpdf_size(self):
        return _sysrepo.Schema_Node_Rpc_Action_tpdf_size(self)

    def tpdf(self):
        return _sysrepo.Schema_Node_Rpc_Action_tpdf(self)
Schema_Node_Rpc_Action_swigregister = _sysrepo.Schema_Node_Rpc_Action_swigregister
Schema_Node_Rpc_Action_swigregister(Schema_Node_Rpc_Action)

class Schema_Node_Augment(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Augment, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Augment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sysrepo.new_Schema_Node_Augment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Schema_Node_Augment
    __del__ = lambda self: None

    def when(self):
        return _sysrepo.Schema_Node_Augment_when(self)

    def target(self):
        return _sysrepo.Schema_Node_Augment_target(self)
Schema_Node_Augment_swigregister = _sysrepo.Schema_Node_Augment_swigregister
Schema_Node_Augment_swigregister(Schema_Node_Augment)

class Substmt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Substmt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Substmt, name)
    __repr__ = _swig_repr

    def __init__(self, substmt, deleter):
        this = _sysrepo.new_Substmt(substmt, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Substmt
    __del__ = lambda self: None

    def stmt(self):
        return _sysrepo.Substmt_stmt(self)

    def offset(self):
        return _sysrepo.Substmt_offset(self)

    def cardinality(self):
        return _sysrepo.Substmt_cardinality(self)
Substmt_swigregister = _sysrepo.Substmt_swigregister
Substmt_swigregister(Substmt)

class Ext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ext, name)
    __repr__ = _swig_repr

    def __init__(self, ext, deleter):
        this = _sysrepo.new_Ext(ext, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Ext
    __del__ = lambda self: None

    def name(self):
        return _sysrepo.Ext_name(self)

    def dsc(self):
        return _sysrepo.Ext_dsc(self)

    def ref(self):
        return _sysrepo.Ext_ref(self)

    def flags(self):
        return _sysrepo.Ext_flags(self)

    def ext_size(self):
        return _sysrepo.Ext_ext_size(self)

    def ext_instance(self):
        return _sysrepo.Ext_ext_instance(self)

    def argument(self):
        return _sysrepo.Ext_argument(self)

    def module(self):
        return _sysrepo.Ext_module(self)
Ext_swigregister = _sysrepo.Ext_swigregister
Ext_swigregister(Ext)

class Refine_Mod_List(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Refine_Mod_List, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Refine_Mod_List, name)
    __repr__ = _swig_repr

    def __init__(self, list, deleter):
        this = _sysrepo.new_Refine_Mod_List(list, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Refine_Mod_List
    __del__ = lambda self: None

    def min(self):
        return _sysrepo.Refine_Mod_List_min(self)

    def max(self):
        return _sysrepo.Refine_Mod_List_max(self)
Refine_Mod_List_swigregister = _sysrepo.Refine_Mod_List_swigregister
Refine_Mod_List_swigregister(Refine_Mod_List)

class Refine_Mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Refine_Mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Refine_Mod, name)
    __repr__ = _swig_repr

    def __init__(self, mod, target_type, deleter):
        this = _sysrepo.new_Refine_Mod(mod, target_type, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Refine_Mod
    __del__ = lambda self: None

    def presence(self):
        return _sysrepo.Refine_Mod_presence(self)

    def list(self):
        return _sysrepo.Refine_Mod_list(self)
Refine_Mod_swigregister = _sysrepo.Refine_Mod_swigregister
Refine_Mod_swigregister(Refine_Mod)

class Refine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Refine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Refine, name)
    __repr__ = _swig_repr

    def __init__(self, refine, deleter):
        this = _sysrepo.new_Refine(refine, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Refine
    __del__ = lambda self: None

    def target_name(self):
        return _sysrepo.Refine_target_name(self)

    def dsc(self):
        return _sysrepo.Refine_dsc(self)

    def ref(self):
        return _sysrepo.Refine_ref(self)

    def flags(self):
        return _sysrepo.Refine_flags(self)

    def ext_size(self):
        return _sysrepo.Refine_ext_size(self)

    def iffeature_size(self):
        return _sysrepo.Refine_iffeature_size(self)

    def target_type(self):
        return _sysrepo.Refine_target_type(self)

    def must_size(self):
        return _sysrepo.Refine_must_size(self)

    def dflt_size(self):
        return _sysrepo.Refine_dflt_size(self)

    def ext(self):
        return _sysrepo.Refine_ext(self)

    def iffeature(self):
        return _sysrepo.Refine_iffeature(self)

    def module(self):
        return _sysrepo.Refine_module(self)

    def must(self):
        return _sysrepo.Refine_must(self)

    def dflt(self):
        return _sysrepo.Refine_dflt(self)

    def mod(self):
        return _sysrepo.Refine_mod(self)
Refine_swigregister = _sysrepo.Refine_swigregister
Refine_swigregister(Refine)

class Deviate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Deviate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Deviate, name)
    __repr__ = _swig_repr

    def __init__(self, deviate, deleter):
        this = _sysrepo.new_Deviate(deviate, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Deviate
    __del__ = lambda self: None

    def mod(self):
        return _sysrepo.Deviate_mod(self)

    def flags(self):
        return _sysrepo.Deviate_flags(self)

    def dflt_size(self):
        return _sysrepo.Deviate_dflt_size(self)

    def ext_size(self):
        return _sysrepo.Deviate_ext_size(self)

    def min_set(self):
        return _sysrepo.Deviate_min_set(self)

    def max_set(self):
        return _sysrepo.Deviate_max_set(self)

    def must_size(self):
        return _sysrepo.Deviate_must_size(self)

    def unique_size(self):
        return _sysrepo.Deviate_unique_size(self)

    def min(self):
        return _sysrepo.Deviate_min(self)

    def max(self):
        return _sysrepo.Deviate_max(self)

    def must(self):
        return _sysrepo.Deviate_must(self)

    def unique(self):
        return _sysrepo.Deviate_unique(self)

    def type(self):
        return _sysrepo.Deviate_type(self)

    def units(self):
        return _sysrepo.Deviate_units(self)

    def dflt(self):
        return _sysrepo.Deviate_dflt(self)

    def ext(self):
        return _sysrepo.Deviate_ext(self)
Deviate_swigregister = _sysrepo.Deviate_swigregister
Deviate_swigregister(Deviate)

class Deviation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Deviation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Deviation, name)
    __repr__ = _swig_repr

    def __init__(self, deviation, deleter):
        this = _sysrepo.new_Deviation(deviation, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Deviation
    __del__ = lambda self: None

    def target_name(self):
        return _sysrepo.Deviation_target_name(self)

    def dsc(self):
        return _sysrepo.Deviation_dsc(self)

    def ref(self):
        return _sysrepo.Deviation_ref(self)

    def orig_node(self):
        return _sysrepo.Deviation_orig_node(self)

    def deviate_size(self):
        return _sysrepo.Deviation_deviate_size(self)

    def ext_size(self):
        return _sysrepo.Deviation_ext_size(self)

    def deviate(self):
        return _sysrepo.Deviation_deviate(self)

    def ext(self):
        return _sysrepo.Deviation_ext(self)
Deviation_swigregister = _sysrepo.Deviation_swigregister
Deviation_swigregister(Deviation)

class Import(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Import, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Import, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, deleter):
        this = _sysrepo.new_Import(arg2, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Import
    __del__ = lambda self: None

    def module(self):
        return _sysrepo.Import_module(self)

    def prefix(self):
        return _sysrepo.Import_prefix(self)

    def rev(self):
        return _sysrepo.Import_rev(self)

    def ext_size(self):
        return _sysrepo.Import_ext_size(self)

    def ext(self):
        return _sysrepo.Import_ext(self)

    def dsc(self):
        return _sysrepo.Import_dsc(self)

    def ref(self):
        return _sysrepo.Import_ref(self)
Import_swigregister = _sysrepo.Import_swigregister
Import_swigregister(Import)

class Include(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Include, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Include, name)
    __repr__ = _swig_repr

    def __init__(self, include, deleter):
        this = _sysrepo.new_Include(include, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Include
    __del__ = lambda self: None

    def submodule(self):
        return _sysrepo.Include_submodule(self)

    def rev(self):
        return _sysrepo.Include_rev(self)

    def ext_size(self):
        return _sysrepo.Include_ext_size(self)

    def ext(self):
        return _sysrepo.Include_ext(self)

    def dsc(self):
        return _sysrepo.Include_dsc(self)

    def ref(self):
        return _sysrepo.Include_ref(self)
Include_swigregister = _sysrepo.Include_swigregister
Include_swigregister(Include)

class Revision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Revision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Revision, name)
    __repr__ = _swig_repr

    def __init__(self, revision, deleter):
        this = _sysrepo.new_Revision(revision, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Revision
    __del__ = lambda self: None

    def date(self):
        return _sysrepo.Revision_date(self)

    def ext_size(self):
        return _sysrepo.Revision_ext_size(self)

    def dsc(self):
        return _sysrepo.Revision_dsc(self)

    def ref(self):
        return _sysrepo.Revision_ref(self)
Revision_swigregister = _sysrepo.Revision_swigregister
Revision_swigregister(Revision)

class Tpdf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tpdf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tpdf, name)
    __repr__ = _swig_repr

    def __init__(self, tpdf, deleter):
        this = _sysrepo.new_Tpdf(tpdf, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Tpdf
    __del__ = lambda self: None

    def name(self):
        return _sysrepo.Tpdf_name(self)

    def dsc(self):
        return _sysrepo.Tpdf_dsc(self)

    def ref(self):
        return _sysrepo.Tpdf_ref(self)

    def flags(self):
        return _sysrepo.Tpdf_flags(self)

    def ext_size(self):
        return _sysrepo.Tpdf_ext_size(self)

    def padding_iffsize(self):
        return _sysrepo.Tpdf_padding_iffsize(self)

    def has_union_leafref(self):
        return _sysrepo.Tpdf_has_union_leafref(self)

    def ext(self):
        return _sysrepo.Tpdf_ext(self)

    def units(self):
        return _sysrepo.Tpdf_units(self)

    def module(self):
        return _sysrepo.Tpdf_module(self)

    def type(self):
        return _sysrepo.Tpdf_type(self)

    def dflt(self):
        return _sysrepo.Tpdf_dflt(self)
Tpdf_swigregister = _sysrepo.Tpdf_swigregister
Tpdf_swigregister(Tpdf)

class Unique(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unique, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Unique, name)
    __repr__ = _swig_repr

    def __init__(self, unique, deleter):
        this = _sysrepo.new_Unique(unique, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Unique
    __del__ = lambda self: None

    def expr(self):
        return _sysrepo.Unique_expr(self)

    def expr_size(self):
        return _sysrepo.Unique_expr_size(self)

    def trg_type(self):
        return _sysrepo.Unique_trg_type(self)
Unique_swigregister = _sysrepo.Unique_swigregister
Unique_swigregister(Unique)

class Feature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Feature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Feature, name)
    __repr__ = _swig_repr

    def __init__(self, feature, arg3):
        this = _sysrepo.new_Feature(feature, arg3)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Feature
    __del__ = lambda self: None

    def name(self):
        return _sysrepo.Feature_name(self)

    def dsc(self):
        return _sysrepo.Feature_dsc(self)

    def ref(self):
        return _sysrepo.Feature_ref(self)

    def flags(self):
        return _sysrepo.Feature_flags(self)

    def ext_size(self):
        return _sysrepo.Feature_ext_size(self)

    def iffeature_size(self):
        return _sysrepo.Feature_iffeature_size(self)

    def ext(self):
        return _sysrepo.Feature_ext(self)

    def iffeature(self):
        return _sysrepo.Feature_iffeature(self)

    def module(self):
        return _sysrepo.Feature_module(self)

    def depfeatures(self):
        return _sysrepo.Feature_depfeatures(self)
Feature_swigregister = _sysrepo.Feature_swigregister
Feature_swigregister(Feature)

class Restr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Restr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Restr, name)
    __repr__ = _swig_repr

    def __init__(self, restr, deleter):
        this = _sysrepo.new_Restr(restr, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Restr
    __del__ = lambda self: None

    def expr(self):
        return _sysrepo.Restr_expr(self)

    def dsc(self):
        return _sysrepo.Restr_dsc(self)

    def ref(self):
        return _sysrepo.Restr_ref(self)

    def eapptag(self):
        return _sysrepo.Restr_eapptag(self)

    def emsg(self):
        return _sysrepo.Restr_emsg(self)

    def ext(self):
        return _sysrepo.Restr_ext(self)

    def ext_size(self):
        return _sysrepo.Restr_ext_size(self)
Restr_swigregister = _sysrepo.Restr_swigregister
Restr_swigregister(Restr)

class When(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, When, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, When, name)
    __repr__ = _swig_repr

    def __init__(self, when, deleter=0):
        this = _sysrepo.new_When(when, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_When
    __del__ = lambda self: None

    def cond(self):
        return _sysrepo.When_cond(self)

    def dsc(self):
        return _sysrepo.When_dsc(self)

    def ref(self):
        return _sysrepo.When_ref(self)

    def ext(self):
        return _sysrepo.When_ext(self)

    def ext_size(self):
        return _sysrepo.When_ext_size(self)
When_swigregister = _sysrepo.When_swigregister
When_swigregister(When)

class Ident(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ident, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ident, name)
    __repr__ = _swig_repr

    def __init__(self, ident, deleter):
        this = _sysrepo.new_Ident(ident, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Ident
    __del__ = lambda self: None

    def name(self):
        return _sysrepo.Ident_name(self)

    def dsc(self):
        return _sysrepo.Ident_dsc(self)

    def ref(self):
        return _sysrepo.Ident_ref(self)

    def flags(self):
        return _sysrepo.Ident_flags(self)

    def ext_size(self):
        return _sysrepo.Ident_ext_size(self)

    def iffeature_size(self):
        return _sysrepo.Ident_iffeature_size(self)

    def base_size(self):
        return _sysrepo.Ident_base_size(self)

    def ext(self):
        return _sysrepo.Ident_ext(self)

    def iffeature(self):
        return _sysrepo.Ident_iffeature(self)

    def module(self):
        return _sysrepo.Ident_module(self)

    def base(self):
        return _sysrepo.Ident_base(self)

    def der(self):
        return _sysrepo.Ident_der(self)
Ident_swigregister = _sysrepo.Ident_swigregister
Ident_swigregister(Ident)

class Xml_Ns(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xml_Ns, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xml_Ns, name)
    __repr__ = _swig_repr

    def __init__(self, ns, deleter):
        this = _sysrepo.new_Xml_Ns(ns, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Xml_Ns
    __del__ = lambda self: None

    def type(self):
        return _sysrepo.Xml_Ns_type(self)

    def next(self):
        return _sysrepo.Xml_Ns_next(self)

    def prefix(self):
        return _sysrepo.Xml_Ns_prefix(self)

    def value(self):
        return _sysrepo.Xml_Ns_value(self)
Xml_Ns_swigregister = _sysrepo.Xml_Ns_swigregister
Xml_Ns_swigregister(Xml_Ns)

class Xml_Attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xml_Attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xml_Attr, name)
    __repr__ = _swig_repr

    def __init__(self, attr, deleter):
        this = _sysrepo.new_Xml_Attr(attr, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Xml_Attr
    __del__ = lambda self: None

    def type(self):
        return _sysrepo.Xml_Attr_type(self)

    def next(self):
        return _sysrepo.Xml_Attr_next(self)

    def ns(self):
        return _sysrepo.Xml_Attr_ns(self)

    def name(self):
        return _sysrepo.Xml_Attr_name(self)

    def value(self):
        return _sysrepo.Xml_Attr_value(self)
Xml_Attr_swigregister = _sysrepo.Xml_Attr_swigregister
Xml_Attr_swigregister(Xml_Attr)

class Xml_Elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xml_Elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xml_Elem, name)
    __repr__ = _swig_repr

    def __init__(self, context, elem, deleter):
        this = _sysrepo.new_Xml_Elem(context, elem, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sysrepo.delete_Xml_Elem
    __del__ = lambda self: None

    def flags(self):
        return _sysrepo.Xml_Elem_flags(self)

    def parent(self):
        return _sysrepo.Xml_Elem_parent(self)

    def attr(self):
        return _sysrepo.Xml_Elem_attr(self)

    def child(self):
        return _sysrepo.Xml_Elem_child(self)

    def next(self):
        return _sysrepo.Xml_Elem_next(self)

    def prev(self):
        return _sysrepo.Xml_Elem_prev(self)

    def name(self):
        return _sysrepo.Xml_Elem_name(self)

    def ns(self):
        return _sysrepo.Xml_Elem_ns(self)

    def content(self):
        return _sysrepo.Xml_Elem_content(self)

    def get_attr(self, name, ns=None):
        return _sysrepo.Xml_Elem_get_attr(self, name, ns)

    def get_ns(self, prefix):
        return _sysrepo.Xml_Elem_get_ns(self, prefix)

    def print_mem(self, options):
        return _sysrepo.Xml_Elem_print_mem(self, options)

    def tree_for(self):
        return _sysrepo.Xml_Elem_tree_for(self)

    def tree_dfs(self):
        return _sysrepo.Xml_Elem_tree_dfs(self)
Xml_Elem_swigregister = _sysrepo.Xml_Elem_swigregister
Xml_Elem_swigregister(Xml_Elem)

SR_ERR_OK = _sysrepo.SR_ERR_OK
SR_ERR_INVAL_ARG = _sysrepo.SR_ERR_INVAL_ARG
SR_ERR_LY = _sysrepo.SR_ERR_LY
SR_ERR_SYS = _sysrepo.SR_ERR_SYS
SR_ERR_NOMEM = _sysrepo.SR_ERR_NOMEM
SR_ERR_NOT_FOUND = _sysrepo.SR_ERR_NOT_FOUND
SR_ERR_EXISTS = _sysrepo.SR_ERR_EXISTS
SR_ERR_INTERNAL = _sysrepo.SR_ERR_INTERNAL
SR_ERR_INIT_FAILED = _sysrepo.SR_ERR_INIT_FAILED
SR_ERR_UNSUPPORTED = _sysrepo.SR_ERR_UNSUPPORTED
SR_ERR_UNKNOWN_MODEL = _sysrepo.SR_ERR_UNKNOWN_MODEL
SR_ERR_BAD_ELEMENT = _sysrepo.SR_ERR_BAD_ELEMENT
SR_ERR_VALIDATION_FAILED = _sysrepo.SR_ERR_VALIDATION_FAILED
SR_ERR_OPERATION_FAILED = _sysrepo.SR_ERR_OPERATION_FAILED
SR_ERR_UNAUTHORIZED = _sysrepo.SR_ERR_UNAUTHORIZED
SR_ERR_LOCKED = _sysrepo.SR_ERR_LOCKED
SR_ERR_TIME_OUT = _sysrepo.SR_ERR_TIME_OUT
SR_ERR_CALLBACK_FAILED = _sysrepo.SR_ERR_CALLBACK_FAILED
SR_ERR_CALLBACK_SHELVE = _sysrepo.SR_ERR_CALLBACK_SHELVE
SR_LL_NONE = _sysrepo.SR_LL_NONE
SR_LL_ERR = _sysrepo.SR_LL_ERR
SR_LL_WRN = _sysrepo.SR_LL_WRN
SR_LL_INF = _sysrepo.SR_LL_INF
SR_LL_DBG = _sysrepo.SR_LL_DBG
SR_CONN_DEFAULT = _sysrepo.SR_CONN_DEFAULT
SR_CONN_CACHE_RUNNING = _sysrepo.SR_CONN_CACHE_RUNNING
SR_CONN_NO_SCHED_CHANGES = _sysrepo.SR_CONN_NO_SCHED_CHANGES
SR_DS_STARTUP = _sysrepo.SR_DS_STARTUP
SR_DS_RUNNING = _sysrepo.SR_DS_RUNNING
SR_DS_CANDIDATE = _sysrepo.SR_DS_CANDIDATE
SR_DS_OPERATIONAL = _sysrepo.SR_DS_OPERATIONAL
SR_UNKNOWN_T = _sysrepo.SR_UNKNOWN_T
SR_LIST_T = _sysrepo.SR_LIST_T
SR_CONTAINER_T = _sysrepo.SR_CONTAINER_T
SR_CONTAINER_PRESENCE_T = _sysrepo.SR_CONTAINER_PRESENCE_T
SR_LEAF_EMPTY_T = _sysrepo.SR_LEAF_EMPTY_T
SR_NOTIFICATION_T = _sysrepo.SR_NOTIFICATION_T
SR_BINARY_T = _sysrepo.SR_BINARY_T
SR_BITS_T = _sysrepo.SR_BITS_T
SR_BOOL_T = _sysrepo.SR_BOOL_T
SR_DECIMAL64_T = _sysrepo.SR_DECIMAL64_T
SR_ENUM_T = _sysrepo.SR_ENUM_T
SR_IDENTITYREF_T = _sysrepo.SR_IDENTITYREF_T
SR_INSTANCEID_T = _sysrepo.SR_INSTANCEID_T
SR_INT8_T = _sysrepo.SR_INT8_T
SR_INT16_T = _sysrepo.SR_INT16_T
SR_INT32_T = _sysrepo.SR_INT32_T
SR_INT64_T = _sysrepo.SR_INT64_T
SR_STRING_T = _sysrepo.SR_STRING_T
SR_UINT8_T = _sysrepo.SR_UINT8_T
SR_UINT16_T = _sysrepo.SR_UINT16_T
SR_UINT32_T = _sysrepo.SR_UINT32_T
SR_UINT64_T = _sysrepo.SR_UINT64_T
SR_ANYXML_T = _sysrepo.SR_ANYXML_T
SR_ANYDATA_T = _sysrepo.SR_ANYDATA_T
SR_OPER_DEFAULT = _sysrepo.SR_OPER_DEFAULT
SR_OPER_NO_STATE = _sysrepo.SR_OPER_NO_STATE
SR_OPER_NO_CONFIG = _sysrepo.SR_OPER_NO_CONFIG
SR_OPER_NO_SUBS = _sysrepo.SR_OPER_NO_SUBS
SR_OPER_NO_STORED = _sysrepo.SR_OPER_NO_STORED
SR_OPER_WITH_ORIGIN = _sysrepo.SR_OPER_WITH_ORIGIN
SR_EDIT_DEFAULT = _sysrepo.SR_EDIT_DEFAULT
SR_EDIT_NON_RECURSIVE = _sysrepo.SR_EDIT_NON_RECURSIVE
SR_EDIT_STRICT = _sysrepo.SR_EDIT_STRICT
SR_MOVE_BEFORE = _sysrepo.SR_MOVE_BEFORE
SR_MOVE_AFTER = _sysrepo.SR_MOVE_AFTER
SR_MOVE_FIRST = _sysrepo.SR_MOVE_FIRST
SR_MOVE_LAST = _sysrepo.SR_MOVE_LAST
SR_SUBSCR_DEFAULT = _sysrepo.SR_SUBSCR_DEFAULT
SR_SUBSCR_CTX_REUSE = _sysrepo.SR_SUBSCR_CTX_REUSE
SR_SUBSCR_NO_THREAD = _sysrepo.SR_SUBSCR_NO_THREAD
SR_SUBSCR_PASSIVE = _sysrepo.SR_SUBSCR_PASSIVE
SR_SUBSCR_DONE_ONLY = _sysrepo.SR_SUBSCR_DONE_ONLY
SR_SUBSCR_ENABLED = _sysrepo.SR_SUBSCR_ENABLED
SR_SUBSCR_UPDATE = _sysrepo.SR_SUBSCR_UPDATE
SR_SUBSCR_UNLOCKED = _sysrepo.SR_SUBSCR_UNLOCKED
SR_EV_UPDATE = _sysrepo.SR_EV_UPDATE
SR_EV_CHANGE = _sysrepo.SR_EV_CHANGE
SR_EV_DONE = _sysrepo.SR_EV_DONE
SR_EV_ABORT = _sysrepo.SR_EV_ABORT
SR_EV_ENABLED = _sysrepo.SR_EV_ENABLED
SR_EV_RPC = _sysrepo.SR_EV_RPC
SR_OP_CREATED = _sysrepo.SR_OP_CREATED
SR_OP_MODIFIED = _sysrepo.SR_OP_MODIFIED
SR_OP_DELETED = _sysrepo.SR_OP_DELETED
SR_OP_MOVED = _sysrepo.SR_OP_MOVED
SR_EV_NOTIF_REALTIME = _sysrepo.SR_EV_NOTIF_REALTIME
SR_EV_NOTIF_REPLAY = _sysrepo.SR_EV_NOTIF_REPLAY
SR_EV_NOTIF_REPLAY_COMPLETE = _sysrepo.SR_EV_NOTIF_REPLAY_COMPLETE
SR_EV_NOTIF_STOP = _sysrepo.SR_EV_NOTIF_STOP
LY_LLERR = _sysrepo.LY_LLERR
LY_LLWRN = _sysrepo.LY_LLWRN
LY_LLVRB = _sysrepo.LY_LLVRB
LY_LLDBG = _sysrepo.LY_LLDBG
LY_SUCCESS = _sysrepo.LY_SUCCESS
LY_EMEM = _sysrepo.LY_EMEM
LY_ESYS = _sysrepo.LY_ESYS
LY_EINVAL = _sysrepo.LY_EINVAL
LY_EINT = _sysrepo.LY_EINT
LY_EVALID = _sysrepo.LY_EVALID
LY_EPLUGIN = _sysrepo.LY_EPLUGIN
LYVE_SUCCESS = _sysrepo.LYVE_SUCCESS
LYVE_XML_MISS = _sysrepo.LYVE_XML_MISS
LYVE_XML_INVAL = _sysrepo.LYVE_XML_INVAL
LYVE_XML_INCHAR = _sysrepo.LYVE_XML_INCHAR
LYVE_EOF = _sysrepo.LYVE_EOF
LYVE_INSTMT = _sysrepo.LYVE_INSTMT
LYVE_INPAR = _sysrepo.LYVE_INPAR
LYVE_INID = _sysrepo.LYVE_INID
LYVE_INDATE = _sysrepo.LYVE_INDATE
LYVE_INARG = _sysrepo.LYVE_INARG
LYVE_MISSSTMT = _sysrepo.LYVE_MISSSTMT
LYVE_MISSARG = _sysrepo.LYVE_MISSARG
LYVE_TOOMANY = _sysrepo.LYVE_TOOMANY
LYVE_DUPID = _sysrepo.LYVE_DUPID
LYVE_DUPLEAFLIST = _sysrepo.LYVE_DUPLEAFLIST
LYVE_DUPLIST = _sysrepo.LYVE_DUPLIST
LYVE_NOUNIQ = _sysrepo.LYVE_NOUNIQ
LYVE_ENUM_INVAL = _sysrepo.LYVE_ENUM_INVAL
LYVE_ENUM_INNAME = _sysrepo.LYVE_ENUM_INNAME
LYVE_ENUM_WS = _sysrepo.LYVE_ENUM_WS
LYVE_BITS_INVAL = _sysrepo.LYVE_BITS_INVAL
LYVE_BITS_INNAME = _sysrepo.LYVE_BITS_INNAME
LYVE_INMOD = _sysrepo.LYVE_INMOD
LYVE_KEY_NLEAF = _sysrepo.LYVE_KEY_NLEAF
LYVE_KEY_TYPE = _sysrepo.LYVE_KEY_TYPE
LYVE_KEY_CONFIG = _sysrepo.LYVE_KEY_CONFIG
LYVE_KEY_MISS = _sysrepo.LYVE_KEY_MISS
LYVE_KEY_DUP = _sysrepo.LYVE_KEY_DUP
LYVE_INREGEX = _sysrepo.LYVE_INREGEX
LYVE_INRESOLV = _sysrepo.LYVE_INRESOLV
LYVE_INSTATUS = _sysrepo.LYVE_INSTATUS
LYVE_CIRC_LEAFREFS = _sysrepo.LYVE_CIRC_LEAFREFS
LYVE_CIRC_FEATURES = _sysrepo.LYVE_CIRC_FEATURES
LYVE_CIRC_IMPORTS = _sysrepo.LYVE_CIRC_IMPORTS
LYVE_CIRC_INCLUDES = _sysrepo.LYVE_CIRC_INCLUDES
LYVE_INVER = _sysrepo.LYVE_INVER
LYVE_SUBMODULE = _sysrepo.LYVE_SUBMODULE
LYVE_OBSDATA = _sysrepo.LYVE_OBSDATA
LYVE_NORESOLV = _sysrepo.LYVE_NORESOLV
LYVE_INELEM = _sysrepo.LYVE_INELEM
LYVE_MISSELEM = _sysrepo.LYVE_MISSELEM
LYVE_INVAL = _sysrepo.LYVE_INVAL
LYVE_INMETA = _sysrepo.LYVE_INMETA
LYVE_INATTR = _sysrepo.LYVE_INATTR
LYVE_MISSATTR = _sysrepo.LYVE_MISSATTR
LYVE_NOCONSTR = _sysrepo.LYVE_NOCONSTR
LYVE_INCHAR = _sysrepo.LYVE_INCHAR
LYVE_INPRED = _sysrepo.LYVE_INPRED
LYVE_MCASEDATA = _sysrepo.LYVE_MCASEDATA
LYVE_NOMUST = _sysrepo.LYVE_NOMUST
LYVE_NOWHEN = _sysrepo.LYVE_NOWHEN
LYVE_INORDER = _sysrepo.LYVE_INORDER
LYVE_INWHEN = _sysrepo.LYVE_INWHEN
LYVE_NOMIN = _sysrepo.LYVE_NOMIN
LYVE_NOMAX = _sysrepo.LYVE_NOMAX
LYVE_NOREQINS = _sysrepo.LYVE_NOREQINS
LYVE_NOLEAFREF = _sysrepo.LYVE_NOLEAFREF
LYVE_NOMANDCHOICE = _sysrepo.LYVE_NOMANDCHOICE
LYVE_XPATH_INTOK = _sysrepo.LYVE_XPATH_INTOK
LYVE_XPATH_EOF = _sysrepo.LYVE_XPATH_EOF
LYVE_XPATH_INOP = _sysrepo.LYVE_XPATH_INOP
LYVE_XPATH_INCTX = _sysrepo.LYVE_XPATH_INCTX
LYVE_XPATH_INMOD = _sysrepo.LYVE_XPATH_INMOD
LYVE_XPATH_INFUNC = _sysrepo.LYVE_XPATH_INFUNC
LYVE_XPATH_INARGCOUNT = _sysrepo.LYVE_XPATH_INARGCOUNT
LYVE_XPATH_INARGTYPE = _sysrepo.LYVE_XPATH_INARGTYPE
LYVE_XPATH_DUMMY = _sysrepo.LYVE_XPATH_DUMMY
LYVE_XPATH_NOEND = _sysrepo.LYVE_XPATH_NOEND
LYVE_PATH_INCHAR = _sysrepo.LYVE_PATH_INCHAR
LYVE_PATH_INMOD = _sysrepo.LYVE_PATH_INMOD
LYVE_PATH_MISSMOD = _sysrepo.LYVE_PATH_MISSMOD
LYVE_PATH_INNODE = _sysrepo.LYVE_PATH_INNODE
LYVE_PATH_INKEY = _sysrepo.LYVE_PATH_INKEY
LYVE_PATH_MISSKEY = _sysrepo.LYVE_PATH_MISSKEY
LYVE_PATH_INIDENTREF = _sysrepo.LYVE_PATH_INIDENTREF
LYVE_PATH_EXISTS = _sysrepo.LYVE_PATH_EXISTS
LYVE_PATH_MISSPAR = _sysrepo.LYVE_PATH_MISSPAR
LYVE_PATH_PREDTOOMANY = _sysrepo.LYVE_PATH_PREDTOOMANY
LYS_IN_UNKNOWN = _sysrepo.LYS_IN_UNKNOWN
LYS_IN_YANG = _sysrepo.LYS_IN_YANG
LYS_IN_YIN = _sysrepo.LYS_IN_YIN
LYS_OUT_UNKNOWN = _sysrepo.LYS_OUT_UNKNOWN
LYS_OUT_YANG = _sysrepo.LYS_OUT_YANG
LYS_OUT_YIN = _sysrepo.LYS_OUT_YIN
LYS_OUT_TREE = _sysrepo.LYS_OUT_TREE
LYS_OUT_INFO = _sysrepo.LYS_OUT_INFO
LYS_OUT_JSON = _sysrepo.LYS_OUT_JSON
LYS_UNKNOWN = _sysrepo.LYS_UNKNOWN
LYS_CONTAINER = _sysrepo.LYS_CONTAINER
LYS_CHOICE = _sysrepo.LYS_CHOICE
LYS_LEAF = _sysrepo.LYS_LEAF
LYS_LEAFLIST = _sysrepo.LYS_LEAFLIST
LYS_LIST = _sysrepo.LYS_LIST
LYS_ANYXML = _sysrepo.LYS_ANYXML
LYS_CASE = _sysrepo.LYS_CASE
LYS_NOTIF = _sysrepo.LYS_NOTIF
LYS_RPC = _sysrepo.LYS_RPC
LYS_INPUT = _sysrepo.LYS_INPUT
LYS_OUTPUT = _sysrepo.LYS_OUTPUT
LYS_GROUPING = _sysrepo.LYS_GROUPING
LYS_USES = _sysrepo.LYS_USES
LYS_AUGMENT = _sysrepo.LYS_AUGMENT
LYS_ACTION = _sysrepo.LYS_ACTION
LYS_ANYDATA = _sysrepo.LYS_ANYDATA
LYS_EXT = _sysrepo.LYS_EXT
LY_STMT_NODE = _sysrepo.LY_STMT_NODE
LY_STMT_UNKNOWN = _sysrepo.LY_STMT_UNKNOWN
LY_STMT_ARGUMENT = _sysrepo.LY_STMT_ARGUMENT
LY_STMT_BASE = _sysrepo.LY_STMT_BASE
LY_STMT_BELONGSTO = _sysrepo.LY_STMT_BELONGSTO
LY_STMT_CONTACT = _sysrepo.LY_STMT_CONTACT
LY_STMT_DEFAULT = _sysrepo.LY_STMT_DEFAULT
LY_STMT_DESCRIPTION = _sysrepo.LY_STMT_DESCRIPTION
LY_STMT_ERRTAG = _sysrepo.LY_STMT_ERRTAG
LY_STMT_ERRMSG = _sysrepo.LY_STMT_ERRMSG
LY_STMT_KEY = _sysrepo.LY_STMT_KEY
LY_STMT_NAMESPACE = _sysrepo.LY_STMT_NAMESPACE
LY_STMT_ORGANIZATION = _sysrepo.LY_STMT_ORGANIZATION
LY_STMT_PATH = _sysrepo.LY_STMT_PATH
LY_STMT_PREFIX = _sysrepo.LY_STMT_PREFIX
LY_STMT_PRESENCE = _sysrepo.LY_STMT_PRESENCE
LY_STMT_REFERENCE = _sysrepo.LY_STMT_REFERENCE
LY_STMT_REVISIONDATE = _sysrepo.LY_STMT_REVISIONDATE
LY_STMT_UNITS = _sysrepo.LY_STMT_UNITS
LY_STMT_VALUE = _sysrepo.LY_STMT_VALUE
LY_STMT_VERSION = _sysrepo.LY_STMT_VERSION
LY_STMT_MODIFIER = _sysrepo.LY_STMT_MODIFIER
LY_STMT_REQINSTANCE = _sysrepo.LY_STMT_REQINSTANCE
LY_STMT_YINELEM = _sysrepo.LY_STMT_YINELEM
LY_STMT_CONFIG = _sysrepo.LY_STMT_CONFIG
LY_STMT_MANDATORY = _sysrepo.LY_STMT_MANDATORY
LY_STMT_ORDEREDBY = _sysrepo.LY_STMT_ORDEREDBY
LY_STMT_STATUS = _sysrepo.LY_STMT_STATUS
LY_STMT_DIGITS = _sysrepo.LY_STMT_DIGITS
LY_STMT_MAX = _sysrepo.LY_STMT_MAX
LY_STMT_MIN = _sysrepo.LY_STMT_MIN
LY_STMT_POSITION = _sysrepo.LY_STMT_POSITION
LY_STMT_UNIQUE = _sysrepo.LY_STMT_UNIQUE
LY_STMT_MODULE = _sysrepo.LY_STMT_MODULE
LY_STMT_ACTION = _sysrepo.LY_STMT_ACTION
LY_STMT_ANYDATA = _sysrepo.LY_STMT_ANYDATA
LY_STMT_ANYXML = _sysrepo.LY_STMT_ANYXML
LY_STMT_CASE = _sysrepo.LY_STMT_CASE
LY_STMT_CHOICE = _sysrepo.LY_STMT_CHOICE
LY_STMT_CONTAINER = _sysrepo.LY_STMT_CONTAINER
LY_STMT_GROUPING = _sysrepo.LY_STMT_GROUPING
LY_STMT_INPUT = _sysrepo.LY_STMT_INPUT
LY_STMT_LEAF = _sysrepo.LY_STMT_LEAF
LY_STMT_LEAFLIST = _sysrepo.LY_STMT_LEAFLIST
LY_STMT_LIST = _sysrepo.LY_STMT_LIST
LY_STMT_NOTIFICATION = _sysrepo.LY_STMT_NOTIFICATION
LY_STMT_OUTPUT = _sysrepo.LY_STMT_OUTPUT
LY_STMT_USES = _sysrepo.LY_STMT_USES
LY_STMT_TYPEDEF = _sysrepo.LY_STMT_TYPEDEF
LY_STMT_TYPE = _sysrepo.LY_STMT_TYPE
LY_STMT_IFFEATURE = _sysrepo.LY_STMT_IFFEATURE
LY_STMT_LENGTH = _sysrepo.LY_STMT_LENGTH
LY_STMT_MUST = _sysrepo.LY_STMT_MUST
LY_STMT_PATTERN = _sysrepo.LY_STMT_PATTERN
LY_STMT_RANGE = _sysrepo.LY_STMT_RANGE
LY_STMT_WHEN = _sysrepo.LY_STMT_WHEN
LY_STMT_REVISION = _sysrepo.LY_STMT_REVISION
LY_STMT_SUBMODULE = _sysrepo.LY_STMT_SUBMODULE
LY_STMT_RPC = _sysrepo.LY_STMT_RPC
LY_STMT_BIT = _sysrepo.LY_STMT_BIT
LY_STMT_ENUM = _sysrepo.LY_STMT_ENUM
LY_STMT_REFINE = _sysrepo.LY_STMT_REFINE
LY_STMT_AUGMENT = _sysrepo.LY_STMT_AUGMENT
LY_STMT_DEVIATE = _sysrepo.LY_STMT_DEVIATE
LY_STMT_DEVIATION = _sysrepo.LY_STMT_DEVIATION
LY_STMT_EXTENSION = _sysrepo.LY_STMT_EXTENSION
LY_STMT_FEATURE = _sysrepo.LY_STMT_FEATURE
LY_STMT_IDENTITY = _sysrepo.LY_STMT_IDENTITY
LY_STMT_IMPORT = _sysrepo.LY_STMT_IMPORT
LY_STMT_INCLUDE = _sysrepo.LY_STMT_INCLUDE
LY_STMT_CARD_OPT = _sysrepo.LY_STMT_CARD_OPT
LY_STMT_CARD_MAND = _sysrepo.LY_STMT_CARD_MAND
LY_STMT_CARD_SOME = _sysrepo.LY_STMT_CARD_SOME
LY_STMT_CARD_ANY = _sysrepo.LY_STMT_CARD_ANY
LYEXT_ERR = _sysrepo.LYEXT_ERR
LYEXT_FLAG = _sysrepo.LYEXT_FLAG
LYEXT_COMPLEX = _sysrepo.LYEXT_COMPLEX
LYS_VERSION_UNDEF = _sysrepo.LYS_VERSION_UNDEF
LYS_VERSION_1 = _sysrepo.LYS_VERSION_1
LYS_VERSION_1_1 = _sysrepo.LYS_VERSION_1_1
LY_TYPE_DER = _sysrepo.LY_TYPE_DER
LY_TYPE_BINARY = _sysrepo.LY_TYPE_BINARY
LY_TYPE_BITS = _sysrepo.LY_TYPE_BITS
LY_TYPE_BOOL = _sysrepo.LY_TYPE_BOOL
LY_TYPE_DEC64 = _sysrepo.LY_TYPE_DEC64
LY_TYPE_EMPTY = _sysrepo.LY_TYPE_EMPTY
LY_TYPE_ENUM = _sysrepo.LY_TYPE_ENUM
LY_TYPE_IDENT = _sysrepo.LY_TYPE_IDENT
LY_TYPE_INST = _sysrepo.LY_TYPE_INST
LY_TYPE_LEAFREF = _sysrepo.LY_TYPE_LEAFREF
LY_TYPE_STRING = _sysrepo.LY_TYPE_STRING
LY_TYPE_UNION = _sysrepo.LY_TYPE_UNION
LY_TYPE_INT8 = _sysrepo.LY_TYPE_INT8
LY_TYPE_UINT8 = _sysrepo.LY_TYPE_UINT8
LY_TYPE_INT16 = _sysrepo.LY_TYPE_INT16
LY_TYPE_UINT16 = _sysrepo.LY_TYPE_UINT16
LY_TYPE_INT32 = _sysrepo.LY_TYPE_INT32
LY_TYPE_UINT32 = _sysrepo.LY_TYPE_UINT32
LY_TYPE_INT64 = _sysrepo.LY_TYPE_INT64
LY_TYPE_UINT64 = _sysrepo.LY_TYPE_UINT64
LY_TYPE_UNKNOWN = _sysrepo.LY_TYPE_UNKNOWN
LY_DEVIATE_NO = _sysrepo.LY_DEVIATE_NO
LY_DEVIATE_ADD = _sysrepo.LY_DEVIATE_ADD
LY_DEVIATE_RPL = _sysrepo.LY_DEVIATE_RPL
LY_DEVIATE_DEL = _sysrepo.LY_DEVIATE_DEL
LYXP_NODE_ROOT = _sysrepo.LYXP_NODE_ROOT
LYXP_NODE_ROOT_CONFIG = _sysrepo.LYXP_NODE_ROOT_CONFIG
LYXP_NODE_ELEM = _sysrepo.LYXP_NODE_ELEM
LYXP_NODE_TEXT = _sysrepo.LYXP_NODE_TEXT
LYXP_NODE_ATTR = _sysrepo.LYXP_NODE_ATTR
LYXP_NODE_NONE = _sysrepo.LYXP_NODE_NONE
LYD_UNKNOWN = _sysrepo.LYD_UNKNOWN
LYD_XML = _sysrepo.LYD_XML
LYD_JSON = _sysrepo.LYD_JSON
LYD_LYB = _sysrepo.LYD_LYB
LYD_ANYDATA_CONSTSTRING = _sysrepo.LYD_ANYDATA_CONSTSTRING
LYD_ANYDATA_STRING = _sysrepo.LYD_ANYDATA_STRING
LYD_ANYDATA_JSON = _sysrepo.LYD_ANYDATA_JSON
LYD_ANYDATA_JSOND = _sysrepo.LYD_ANYDATA_JSOND
LYD_ANYDATA_SXML = _sysrepo.LYD_ANYDATA_SXML
LYD_ANYDATA_SXMLD = _sysrepo.LYD_ANYDATA_SXMLD
LYD_ANYDATA_XML = _sysrepo.LYD_ANYDATA_XML
LYD_ANYDATA_DATATREE = _sysrepo.LYD_ANYDATA_DATATREE
LYD_ANYDATA_LYB = _sysrepo.LYD_ANYDATA_LYB
LYD_ANYDATA_LYBD = _sysrepo.LYD_ANYDATA_LYBD
LYD_DIFF_END = _sysrepo.LYD_DIFF_END
LYD_DIFF_DELETED = _sysrepo.LYD_DIFF_DELETED
LYD_DIFF_CHANGED = _sysrepo.LYD_DIFF_CHANGED
LYD_DIFF_MOVEDAFTER1 = _sysrepo.LYD_DIFF_MOVEDAFTER1
LYD_DIFF_CREATED = _sysrepo.LYD_DIFF_CREATED
LYD_DIFF_MOVEDAFTER2 = _sysrepo.LYD_DIFF_MOVEDAFTER2
LYEXT_PAR_MODULE = _sysrepo.LYEXT_PAR_MODULE
LYEXT_PAR_NODE = _sysrepo.LYEXT_PAR_NODE
LYEXT_PAR_TPDF = _sysrepo.LYEXT_PAR_TPDF
LYEXT_PAR_TYPE = _sysrepo.LYEXT_PAR_TYPE
LYEXT_PAR_TYPE_BIT = _sysrepo.LYEXT_PAR_TYPE_BIT
LYEXT_PAR_TYPE_ENUM = _sysrepo.LYEXT_PAR_TYPE_ENUM
LYEXT_PAR_FEATURE = _sysrepo.LYEXT_PAR_FEATURE
LYEXT_PAR_RESTR = _sysrepo.LYEXT_PAR_RESTR
LYEXT_PAR_WHEN = _sysrepo.LYEXT_PAR_WHEN
LYEXT_PAR_IDENT = _sysrepo.LYEXT_PAR_IDENT
LYEXT_PAR_EXT = _sysrepo.LYEXT_PAR_EXT
LYEXT_PAR_EXTINST = _sysrepo.LYEXT_PAR_EXTINST
LYEXT_PAR_REFINE = _sysrepo.LYEXT_PAR_REFINE
LYEXT_PAR_DEVIATION = _sysrepo.LYEXT_PAR_DEVIATION
LYEXT_PAR_DEVIATE = _sysrepo.LYEXT_PAR_DEVIATE
LYEXT_PAR_IMPORT = _sysrepo.LYEXT_PAR_IMPORT
LYEXT_PAR_INCLUDE = _sysrepo.LYEXT_PAR_INCLUDE
LYEXT_PAR_REVISION = _sysrepo.LYEXT_PAR_REVISION
LYEXT_PAR_IFFEATURE = _sysrepo.LYEXT_PAR_IFFEATURE
LYEXT_SUBSTMT_ALL = _sysrepo.LYEXT_SUBSTMT_ALL
LYEXT_SUBSTMT_SELF = _sysrepo.LYEXT_SUBSTMT_SELF
LYEXT_SUBSTMT_ARGUMENT = _sysrepo.LYEXT_SUBSTMT_ARGUMENT
LYEXT_SUBSTMT_BASE = _sysrepo.LYEXT_SUBSTMT_BASE
LYEXT_SUBSTMT_BELONGSTO = _sysrepo.LYEXT_SUBSTMT_BELONGSTO
LYEXT_SUBSTMT_CONTACT = _sysrepo.LYEXT_SUBSTMT_CONTACT
LYEXT_SUBSTMT_DEFAULT = _sysrepo.LYEXT_SUBSTMT_DEFAULT
LYEXT_SUBSTMT_DESCRIPTION = _sysrepo.LYEXT_SUBSTMT_DESCRIPTION
LYEXT_SUBSTMT_ERRTAG = _sysrepo.LYEXT_SUBSTMT_ERRTAG
LYEXT_SUBSTMT_ERRMSG = _sysrepo.LYEXT_SUBSTMT_ERRMSG
LYEXT_SUBSTMT_KEY = _sysrepo.LYEXT_SUBSTMT_KEY
LYEXT_SUBSTMT_NAMESPACE = _sysrepo.LYEXT_SUBSTMT_NAMESPACE
LYEXT_SUBSTMT_ORGANIZATION = _sysrepo.LYEXT_SUBSTMT_ORGANIZATION
LYEXT_SUBSTMT_PATH = _sysrepo.LYEXT_SUBSTMT_PATH
LYEXT_SUBSTMT_PREFIX = _sysrepo.LYEXT_SUBSTMT_PREFIX
LYEXT_SUBSTMT_PRESENCE = _sysrepo.LYEXT_SUBSTMT_PRESENCE
LYEXT_SUBSTMT_REFERENCE = _sysrepo.LYEXT_SUBSTMT_REFERENCE
LYEXT_SUBSTMT_REVISIONDATE = _sysrepo.LYEXT_SUBSTMT_REVISIONDATE
LYEXT_SUBSTMT_UNITS = _sysrepo.LYEXT_SUBSTMT_UNITS
LYEXT_SUBSTMT_VALUE = _sysrepo.LYEXT_SUBSTMT_VALUE
LYEXT_SUBSTMT_VERSION = _sysrepo.LYEXT_SUBSTMT_VERSION
LYEXT_SUBSTMT_MODIFIER = _sysrepo.LYEXT_SUBSTMT_MODIFIER
LYEXT_SUBSTMT_REQINSTANCE = _sysrepo.LYEXT_SUBSTMT_REQINSTANCE
LYEXT_SUBSTMT_YINELEM = _sysrepo.LYEXT_SUBSTMT_YINELEM
LYEXT_SUBSTMT_CONFIG = _sysrepo.LYEXT_SUBSTMT_CONFIG
LYEXT_SUBSTMT_MANDATORY = _sysrepo.LYEXT_SUBSTMT_MANDATORY
LYEXT_SUBSTMT_ORDEREDBY = _sysrepo.LYEXT_SUBSTMT_ORDEREDBY
LYEXT_SUBSTMT_STATUS = _sysrepo.LYEXT_SUBSTMT_STATUS
LYEXT_SUBSTMT_DIGITS = _sysrepo.LYEXT_SUBSTMT_DIGITS
LYEXT_SUBSTMT_MAX = _sysrepo.LYEXT_SUBSTMT_MAX
LYEXT_SUBSTMT_MIN = _sysrepo.LYEXT_SUBSTMT_MIN
LYEXT_SUBSTMT_POSITION = _sysrepo.LYEXT_SUBSTMT_POSITION
LYEXT_SUBSTMT_UNIQUE = _sysrepo.LYEXT_SUBSTMT_UNIQUE
LYEXT_VLOG_NONE = _sysrepo.LYEXT_VLOG_NONE
LYEXT_VLOG_XML = _sysrepo.LYEXT_VLOG_XML
LYEXT_VLOG_LYS = _sysrepo.LYEXT_VLOG_LYS
LYEXT_VLOG_LYD = _sysrepo.LYEXT_VLOG_LYD
LYEXT_VLOG_STR = _sysrepo.LYEXT_VLOG_STR
LYEXT_VLOG_PREV = _sysrepo.LYEXT_VLOG_PREV
LYXML_ATTR_STD = _sysrepo.LYXML_ATTR_STD
LYXML_ATTR_NS = _sysrepo.LYXML_ATTR_NS
# This file is compatible with both classic and new-style classes.


