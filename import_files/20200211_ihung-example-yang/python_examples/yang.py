# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_yang')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_yang')
    _yang = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_yang', [dirname(__file__)])
        except ImportError:
            import _yang
            return _yang
        try:
            _mod = imp.load_module('_yang', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _yang = swig_import_helper()
    del swig_import_helper
else:
    import _yang
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SHARED_PTR_DISOWN = _yang.SHARED_PTR_DISOWN
class Wrap_cb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wrap_cb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wrap_cb, name)
    __repr__ = _swig_repr

    def __init__(self, callback):
        this = _yang.new_Wrap_cb(callback)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Wrap_cb
    __del__ = lambda self: None

    def ly_module_imp_clb(self, mod_name, mod_rev, submod_name, sub_rev, user_data):
        return _yang.Wrap_cb_ly_module_imp_clb(self, mod_name, mod_rev, submod_name, sub_rev, user_data)
    __swig_setmethods__["private_ctx"] = _yang.Wrap_cb_private_ctx_set
    __swig_getmethods__["private_ctx"] = _yang.Wrap_cb_private_ctx_get
    if _newclass:
        private_ctx = _swig_property(_yang.Wrap_cb_private_ctx_get, _yang.Wrap_cb_private_ctx_set)
Wrap_cb_swigregister = _yang.Wrap_cb_swigregister
Wrap_cb_swigregister(Wrap_cb)


def g_ly_module_imp_clb(mod_name, mod_rev, submod_name, sub_rev, user_data, format, free_module_data):
    return _yang.g_ly_module_imp_clb(mod_name, mod_rev, submod_name, sub_rev, user_data, format, free_module_data)
g_ly_module_imp_clb = _yang.g_ly_module_imp_clb
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yang.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _yang.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _yang.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _yang.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _yang.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _yang.SwigPyIterator_equal(self, x)

    def copy(self):
        return _yang.SwigPyIterator_copy(self)

    def next(self):
        return _yang.SwigPyIterator_next(self)

    def __next__(self):
        return _yang.SwigPyIterator___next__(self)

    def previous(self):
        return _yang.SwigPyIterator_previous(self)

    def advance(self, n):
        return _yang.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _yang.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _yang.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _yang.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _yang.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _yang.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _yang.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _yang.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorData_Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorData_Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorData_Node, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorData_Node_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorData_Node___nonzero__(self)

    def __bool__(self):
        return _yang.vectorData_Node___bool__(self)

    def __len__(self):
        return _yang.vectorData_Node___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorData_Node___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorData_Node___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorData_Node___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorData_Node___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorData_Node___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorData_Node___setitem__(self, *args)

    def pop(self):
        return _yang.vectorData_Node_pop(self)

    def append(self, x):
        return _yang.vectorData_Node_append(self, x)

    def empty(self):
        return _yang.vectorData_Node_empty(self)

    def size(self):
        return _yang.vectorData_Node_size(self)

    def swap(self, v):
        return _yang.vectorData_Node_swap(self, v)

    def begin(self):
        return _yang.vectorData_Node_begin(self)

    def end(self):
        return _yang.vectorData_Node_end(self)

    def rbegin(self):
        return _yang.vectorData_Node_rbegin(self)

    def rend(self):
        return _yang.vectorData_Node_rend(self)

    def clear(self):
        return _yang.vectorData_Node_clear(self)

    def get_allocator(self):
        return _yang.vectorData_Node_get_allocator(self)

    def pop_back(self):
        return _yang.vectorData_Node_pop_back(self)

    def erase(self, *args):
        return _yang.vectorData_Node_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorData_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorData_Node_push_back(self, x)

    def front(self):
        return _yang.vectorData_Node_front(self)

    def back(self):
        return _yang.vectorData_Node_back(self)

    def assign(self, n, x):
        return _yang.vectorData_Node_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorData_Node_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorData_Node_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorData_Node_reserve(self, n)

    def capacity(self):
        return _yang.vectorData_Node_capacity(self)
vectorData_Node_swigregister = _yang.vectorData_Node_swigregister
vectorData_Node_swigregister(vectorData_Node)

class vectorSchema_Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorSchema_Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorSchema_Node, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorSchema_Node_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorSchema_Node___nonzero__(self)

    def __bool__(self):
        return _yang.vectorSchema_Node___bool__(self)

    def __len__(self):
        return _yang.vectorSchema_Node___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorSchema_Node___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorSchema_Node___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorSchema_Node___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorSchema_Node___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorSchema_Node___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorSchema_Node___setitem__(self, *args)

    def pop(self):
        return _yang.vectorSchema_Node_pop(self)

    def append(self, x):
        return _yang.vectorSchema_Node_append(self, x)

    def empty(self):
        return _yang.vectorSchema_Node_empty(self)

    def size(self):
        return _yang.vectorSchema_Node_size(self)

    def swap(self, v):
        return _yang.vectorSchema_Node_swap(self, v)

    def begin(self):
        return _yang.vectorSchema_Node_begin(self)

    def end(self):
        return _yang.vectorSchema_Node_end(self)

    def rbegin(self):
        return _yang.vectorSchema_Node_rbegin(self)

    def rend(self):
        return _yang.vectorSchema_Node_rend(self)

    def clear(self):
        return _yang.vectorSchema_Node_clear(self)

    def get_allocator(self):
        return _yang.vectorSchema_Node_get_allocator(self)

    def pop_back(self):
        return _yang.vectorSchema_Node_pop_back(self)

    def erase(self, *args):
        return _yang.vectorSchema_Node_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorSchema_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorSchema_Node_push_back(self, x)

    def front(self):
        return _yang.vectorSchema_Node_front(self)

    def back(self):
        return _yang.vectorSchema_Node_back(self)

    def assign(self, n, x):
        return _yang.vectorSchema_Node_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorSchema_Node_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorSchema_Node_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorSchema_Node_reserve(self, n)

    def capacity(self):
        return _yang.vectorSchema_Node_capacity(self)
vectorSchema_Node_swigregister = _yang.vectorSchema_Node_swigregister
vectorSchema_Node_swigregister(vectorSchema_Node)

class vector_String(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_String, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vector_String_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vector_String___nonzero__(self)

    def __bool__(self):
        return _yang.vector_String___bool__(self)

    def __len__(self):
        return _yang.vector_String___len__(self)

    def __getslice__(self, i, j):
        return _yang.vector_String___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vector_String___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vector_String___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vector_String___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vector_String___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vector_String___setitem__(self, *args)

    def pop(self):
        return _yang.vector_String_pop(self)

    def append(self, x):
        return _yang.vector_String_append(self, x)

    def empty(self):
        return _yang.vector_String_empty(self)

    def size(self):
        return _yang.vector_String_size(self)

    def swap(self, v):
        return _yang.vector_String_swap(self, v)

    def begin(self):
        return _yang.vector_String_begin(self)

    def end(self):
        return _yang.vector_String_end(self)

    def rbegin(self):
        return _yang.vector_String_rbegin(self)

    def rend(self):
        return _yang.vector_String_rend(self)

    def clear(self):
        return _yang.vector_String_clear(self)

    def get_allocator(self):
        return _yang.vector_String_get_allocator(self)

    def pop_back(self):
        return _yang.vector_String_pop_back(self)

    def erase(self, *args):
        return _yang.vector_String_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vector_String(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vector_String_push_back(self, x)

    def front(self):
        return _yang.vector_String_front(self)

    def back(self):
        return _yang.vector_String_back(self)

    def assign(self, n, x):
        return _yang.vector_String_assign(self, n, x)

    def resize(self, *args):
        return _yang.vector_String_resize(self, *args)

    def insert(self, *args):
        return _yang.vector_String_insert(self, *args)

    def reserve(self, n):
        return _yang.vector_String_reserve(self, n)

    def capacity(self):
        return _yang.vector_String_capacity(self)
vector_String_swigregister = _yang.vector_String_swigregister
vector_String_swigregister(vector_String)

class vectorModules(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorModules, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorModules, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorModules_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorModules___nonzero__(self)

    def __bool__(self):
        return _yang.vectorModules___bool__(self)

    def __len__(self):
        return _yang.vectorModules___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorModules___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorModules___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorModules___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorModules___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorModules___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorModules___setitem__(self, *args)

    def pop(self):
        return _yang.vectorModules_pop(self)

    def append(self, x):
        return _yang.vectorModules_append(self, x)

    def empty(self):
        return _yang.vectorModules_empty(self)

    def size(self):
        return _yang.vectorModules_size(self)

    def swap(self, v):
        return _yang.vectorModules_swap(self, v)

    def begin(self):
        return _yang.vectorModules_begin(self)

    def end(self):
        return _yang.vectorModules_end(self)

    def rbegin(self):
        return _yang.vectorModules_rbegin(self)

    def rend(self):
        return _yang.vectorModules_rend(self)

    def clear(self):
        return _yang.vectorModules_clear(self)

    def get_allocator(self):
        return _yang.vectorModules_get_allocator(self)

    def pop_back(self):
        return _yang.vectorModules_pop_back(self)

    def erase(self, *args):
        return _yang.vectorModules_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorModules(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorModules_push_back(self, x)

    def front(self):
        return _yang.vectorModules_front(self)

    def back(self):
        return _yang.vectorModules_back(self)

    def assign(self, n, x):
        return _yang.vectorModules_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorModules_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorModules_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorModules_reserve(self, n)

    def capacity(self):
        return _yang.vectorModules_capacity(self)
vectorModules_swigregister = _yang.vectorModules_swigregister
vectorModules_swigregister(vectorModules)

class vectorType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorType, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorType_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorType___nonzero__(self)

    def __bool__(self):
        return _yang.vectorType___bool__(self)

    def __len__(self):
        return _yang.vectorType___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorType___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorType___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorType___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorType___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorType___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorType___setitem__(self, *args)

    def pop(self):
        return _yang.vectorType_pop(self)

    def append(self, x):
        return _yang.vectorType_append(self, x)

    def empty(self):
        return _yang.vectorType_empty(self)

    def size(self):
        return _yang.vectorType_size(self)

    def swap(self, v):
        return _yang.vectorType_swap(self, v)

    def begin(self):
        return _yang.vectorType_begin(self)

    def end(self):
        return _yang.vectorType_end(self)

    def rbegin(self):
        return _yang.vectorType_rbegin(self)

    def rend(self):
        return _yang.vectorType_rend(self)

    def clear(self):
        return _yang.vectorType_clear(self)

    def get_allocator(self):
        return _yang.vectorType_get_allocator(self)

    def pop_back(self):
        return _yang.vectorType_pop_back(self)

    def erase(self, *args):
        return _yang.vectorType_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorType_push_back(self, x)

    def front(self):
        return _yang.vectorType_front(self)

    def back(self):
        return _yang.vectorType_back(self)

    def assign(self, n, x):
        return _yang.vectorType_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorType_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorType_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorType_reserve(self, n)

    def capacity(self):
        return _yang.vectorType_capacity(self)
vectorType_swigregister = _yang.vectorType_swigregister
vectorType_swigregister(vectorType)

class vectorExt_Instance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorExt_Instance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorExt_Instance, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorExt_Instance_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorExt_Instance___nonzero__(self)

    def __bool__(self):
        return _yang.vectorExt_Instance___bool__(self)

    def __len__(self):
        return _yang.vectorExt_Instance___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorExt_Instance___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorExt_Instance___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorExt_Instance___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorExt_Instance___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorExt_Instance___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorExt_Instance___setitem__(self, *args)

    def pop(self):
        return _yang.vectorExt_Instance_pop(self)

    def append(self, x):
        return _yang.vectorExt_Instance_append(self, x)

    def empty(self):
        return _yang.vectorExt_Instance_empty(self)

    def size(self):
        return _yang.vectorExt_Instance_size(self)

    def swap(self, v):
        return _yang.vectorExt_Instance_swap(self, v)

    def begin(self):
        return _yang.vectorExt_Instance_begin(self)

    def end(self):
        return _yang.vectorExt_Instance_end(self)

    def rbegin(self):
        return _yang.vectorExt_Instance_rbegin(self)

    def rend(self):
        return _yang.vectorExt_Instance_rend(self)

    def clear(self):
        return _yang.vectorExt_Instance_clear(self)

    def get_allocator(self):
        return _yang.vectorExt_Instance_get_allocator(self)

    def pop_back(self):
        return _yang.vectorExt_Instance_pop_back(self)

    def erase(self, *args):
        return _yang.vectorExt_Instance_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorExt_Instance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorExt_Instance_push_back(self, x)

    def front(self):
        return _yang.vectorExt_Instance_front(self)

    def back(self):
        return _yang.vectorExt_Instance_back(self)

    def assign(self, n, x):
        return _yang.vectorExt_Instance_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorExt_Instance_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorExt_Instance_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorExt_Instance_reserve(self, n)

    def capacity(self):
        return _yang.vectorExt_Instance_capacity(self)
vectorExt_Instance_swigregister = _yang.vectorExt_Instance_swigregister
vectorExt_Instance_swigregister(vectorExt_Instance)

class vectorIffeature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorIffeature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorIffeature, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorIffeature_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorIffeature___nonzero__(self)

    def __bool__(self):
        return _yang.vectorIffeature___bool__(self)

    def __len__(self):
        return _yang.vectorIffeature___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorIffeature___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorIffeature___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorIffeature___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorIffeature___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorIffeature___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorIffeature___setitem__(self, *args)

    def pop(self):
        return _yang.vectorIffeature_pop(self)

    def append(self, x):
        return _yang.vectorIffeature_append(self, x)

    def empty(self):
        return _yang.vectorIffeature_empty(self)

    def size(self):
        return _yang.vectorIffeature_size(self)

    def swap(self, v):
        return _yang.vectorIffeature_swap(self, v)

    def begin(self):
        return _yang.vectorIffeature_begin(self)

    def end(self):
        return _yang.vectorIffeature_end(self)

    def rbegin(self):
        return _yang.vectorIffeature_rbegin(self)

    def rend(self):
        return _yang.vectorIffeature_rend(self)

    def clear(self):
        return _yang.vectorIffeature_clear(self)

    def get_allocator(self):
        return _yang.vectorIffeature_get_allocator(self)

    def pop_back(self):
        return _yang.vectorIffeature_pop_back(self)

    def erase(self, *args):
        return _yang.vectorIffeature_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorIffeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorIffeature_push_back(self, x)

    def front(self):
        return _yang.vectorIffeature_front(self)

    def back(self):
        return _yang.vectorIffeature_back(self)

    def assign(self, n, x):
        return _yang.vectorIffeature_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorIffeature_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorIffeature_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorIffeature_reserve(self, n)

    def capacity(self):
        return _yang.vectorIffeature_capacity(self)
vectorIffeature_swigregister = _yang.vectorIffeature_swigregister
vectorIffeature_swigregister(vectorIffeature)

class vectorFeature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorFeature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorFeature, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorFeature_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorFeature___nonzero__(self)

    def __bool__(self):
        return _yang.vectorFeature___bool__(self)

    def __len__(self):
        return _yang.vectorFeature___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorFeature___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorFeature___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorFeature___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorFeature___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorFeature___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorFeature___setitem__(self, *args)

    def pop(self):
        return _yang.vectorFeature_pop(self)

    def append(self, x):
        return _yang.vectorFeature_append(self, x)

    def empty(self):
        return _yang.vectorFeature_empty(self)

    def size(self):
        return _yang.vectorFeature_size(self)

    def swap(self, v):
        return _yang.vectorFeature_swap(self, v)

    def begin(self):
        return _yang.vectorFeature_begin(self)

    def end(self):
        return _yang.vectorFeature_end(self)

    def rbegin(self):
        return _yang.vectorFeature_rbegin(self)

    def rend(self):
        return _yang.vectorFeature_rend(self)

    def clear(self):
        return _yang.vectorFeature_clear(self)

    def get_allocator(self):
        return _yang.vectorFeature_get_allocator(self)

    def pop_back(self):
        return _yang.vectorFeature_pop_back(self)

    def erase(self, *args):
        return _yang.vectorFeature_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorFeature_push_back(self, x)

    def front(self):
        return _yang.vectorFeature_front(self)

    def back(self):
        return _yang.vectorFeature_back(self)

    def assign(self, n, x):
        return _yang.vectorFeature_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorFeature_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorFeature_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorFeature_reserve(self, n)

    def capacity(self):
        return _yang.vectorFeature_capacity(self)
vectorFeature_swigregister = _yang.vectorFeature_swigregister
vectorFeature_swigregister(vectorFeature)

class vectorWhen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorWhen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorWhen, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorWhen_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorWhen___nonzero__(self)

    def __bool__(self):
        return _yang.vectorWhen___bool__(self)

    def __len__(self):
        return _yang.vectorWhen___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorWhen___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorWhen___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorWhen___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorWhen___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorWhen___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorWhen___setitem__(self, *args)

    def pop(self):
        return _yang.vectorWhen_pop(self)

    def append(self, x):
        return _yang.vectorWhen_append(self, x)

    def empty(self):
        return _yang.vectorWhen_empty(self)

    def size(self):
        return _yang.vectorWhen_size(self)

    def swap(self, v):
        return _yang.vectorWhen_swap(self, v)

    def begin(self):
        return _yang.vectorWhen_begin(self)

    def end(self):
        return _yang.vectorWhen_end(self)

    def rbegin(self):
        return _yang.vectorWhen_rbegin(self)

    def rend(self):
        return _yang.vectorWhen_rend(self)

    def clear(self):
        return _yang.vectorWhen_clear(self)

    def get_allocator(self):
        return _yang.vectorWhen_get_allocator(self)

    def pop_back(self):
        return _yang.vectorWhen_pop_back(self)

    def erase(self, *args):
        return _yang.vectorWhen_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorWhen(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorWhen_push_back(self, x)

    def front(self):
        return _yang.vectorWhen_front(self)

    def back(self):
        return _yang.vectorWhen_back(self)

    def assign(self, n, x):
        return _yang.vectorWhen_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorWhen_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorWhen_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorWhen_reserve(self, n)

    def capacity(self):
        return _yang.vectorWhen_capacity(self)
vectorWhen_swigregister = _yang.vectorWhen_swigregister
vectorWhen_swigregister(vectorWhen)

class vectorRefine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorRefine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorRefine, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorRefine_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorRefine___nonzero__(self)

    def __bool__(self):
        return _yang.vectorRefine___bool__(self)

    def __len__(self):
        return _yang.vectorRefine___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorRefine___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorRefine___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorRefine___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorRefine___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorRefine___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorRefine___setitem__(self, *args)

    def pop(self):
        return _yang.vectorRefine_pop(self)

    def append(self, x):
        return _yang.vectorRefine_append(self, x)

    def empty(self):
        return _yang.vectorRefine_empty(self)

    def size(self):
        return _yang.vectorRefine_size(self)

    def swap(self, v):
        return _yang.vectorRefine_swap(self, v)

    def begin(self):
        return _yang.vectorRefine_begin(self)

    def end(self):
        return _yang.vectorRefine_end(self)

    def rbegin(self):
        return _yang.vectorRefine_rbegin(self)

    def rend(self):
        return _yang.vectorRefine_rend(self)

    def clear(self):
        return _yang.vectorRefine_clear(self)

    def get_allocator(self):
        return _yang.vectorRefine_get_allocator(self)

    def pop_back(self):
        return _yang.vectorRefine_pop_back(self)

    def erase(self, *args):
        return _yang.vectorRefine_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorRefine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorRefine_push_back(self, x)

    def front(self):
        return _yang.vectorRefine_front(self)

    def back(self):
        return _yang.vectorRefine_back(self)

    def assign(self, n, x):
        return _yang.vectorRefine_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorRefine_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorRefine_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorRefine_reserve(self, n)

    def capacity(self):
        return _yang.vectorRefine_capacity(self)
vectorRefine_swigregister = _yang.vectorRefine_swigregister
vectorRefine_swigregister(vectorRefine)

class vectorXml_Elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorXml_Elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorXml_Elem, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorXml_Elem_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorXml_Elem___nonzero__(self)

    def __bool__(self):
        return _yang.vectorXml_Elem___bool__(self)

    def __len__(self):
        return _yang.vectorXml_Elem___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorXml_Elem___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorXml_Elem___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorXml_Elem___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorXml_Elem___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorXml_Elem___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorXml_Elem___setitem__(self, *args)

    def pop(self):
        return _yang.vectorXml_Elem_pop(self)

    def append(self, x):
        return _yang.vectorXml_Elem_append(self, x)

    def empty(self):
        return _yang.vectorXml_Elem_empty(self)

    def size(self):
        return _yang.vectorXml_Elem_size(self)

    def swap(self, v):
        return _yang.vectorXml_Elem_swap(self, v)

    def begin(self):
        return _yang.vectorXml_Elem_begin(self)

    def end(self):
        return _yang.vectorXml_Elem_end(self)

    def rbegin(self):
        return _yang.vectorXml_Elem_rbegin(self)

    def rend(self):
        return _yang.vectorXml_Elem_rend(self)

    def clear(self):
        return _yang.vectorXml_Elem_clear(self)

    def get_allocator(self):
        return _yang.vectorXml_Elem_get_allocator(self)

    def pop_back(self):
        return _yang.vectorXml_Elem_pop_back(self)

    def erase(self, *args):
        return _yang.vectorXml_Elem_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorXml_Elem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorXml_Elem_push_back(self, x)

    def front(self):
        return _yang.vectorXml_Elem_front(self)

    def back(self):
        return _yang.vectorXml_Elem_back(self)

    def assign(self, n, x):
        return _yang.vectorXml_Elem_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorXml_Elem_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorXml_Elem_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorXml_Elem_reserve(self, n)

    def capacity(self):
        return _yang.vectorXml_Elem_capacity(self)
vectorXml_Elem_swigregister = _yang.vectorXml_Elem_swigregister
vectorXml_Elem_swigregister(vectorXml_Elem)

class vectorDeviate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDeviate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDeviate, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorDeviate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorDeviate___nonzero__(self)

    def __bool__(self):
        return _yang.vectorDeviate___bool__(self)

    def __len__(self):
        return _yang.vectorDeviate___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorDeviate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorDeviate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorDeviate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorDeviate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorDeviate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorDeviate___setitem__(self, *args)

    def pop(self):
        return _yang.vectorDeviate_pop(self)

    def append(self, x):
        return _yang.vectorDeviate_append(self, x)

    def empty(self):
        return _yang.vectorDeviate_empty(self)

    def size(self):
        return _yang.vectorDeviate_size(self)

    def swap(self, v):
        return _yang.vectorDeviate_swap(self, v)

    def begin(self):
        return _yang.vectorDeviate_begin(self)

    def end(self):
        return _yang.vectorDeviate_end(self)

    def rbegin(self):
        return _yang.vectorDeviate_rbegin(self)

    def rend(self):
        return _yang.vectorDeviate_rend(self)

    def clear(self):
        return _yang.vectorDeviate_clear(self)

    def get_allocator(self):
        return _yang.vectorDeviate_get_allocator(self)

    def pop_back(self):
        return _yang.vectorDeviate_pop_back(self)

    def erase(self, *args):
        return _yang.vectorDeviate_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorDeviate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorDeviate_push_back(self, x)

    def front(self):
        return _yang.vectorDeviate_front(self)

    def back(self):
        return _yang.vectorDeviate_back(self)

    def assign(self, n, x):
        return _yang.vectorDeviate_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorDeviate_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorDeviate_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorDeviate_reserve(self, n)

    def capacity(self):
        return _yang.vectorDeviate_capacity(self)
vectorDeviate_swigregister = _yang.vectorDeviate_swigregister
vectorDeviate_swigregister(vectorDeviate)

class vectorDeviation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDeviation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDeviation, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorDeviation_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorDeviation___nonzero__(self)

    def __bool__(self):
        return _yang.vectorDeviation___bool__(self)

    def __len__(self):
        return _yang.vectorDeviation___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorDeviation___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorDeviation___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorDeviation___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorDeviation___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorDeviation___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorDeviation___setitem__(self, *args)

    def pop(self):
        return _yang.vectorDeviation_pop(self)

    def append(self, x):
        return _yang.vectorDeviation_append(self, x)

    def empty(self):
        return _yang.vectorDeviation_empty(self)

    def size(self):
        return _yang.vectorDeviation_size(self)

    def swap(self, v):
        return _yang.vectorDeviation_swap(self, v)

    def begin(self):
        return _yang.vectorDeviation_begin(self)

    def end(self):
        return _yang.vectorDeviation_end(self)

    def rbegin(self):
        return _yang.vectorDeviation_rbegin(self)

    def rend(self):
        return _yang.vectorDeviation_rend(self)

    def clear(self):
        return _yang.vectorDeviation_clear(self)

    def get_allocator(self):
        return _yang.vectorDeviation_get_allocator(self)

    def pop_back(self):
        return _yang.vectorDeviation_pop_back(self)

    def erase(self, *args):
        return _yang.vectorDeviation_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorDeviation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorDeviation_push_back(self, x)

    def front(self):
        return _yang.vectorDeviation_front(self)

    def back(self):
        return _yang.vectorDeviation_back(self)

    def assign(self, n, x):
        return _yang.vectorDeviation_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorDeviation_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorDeviation_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorDeviation_reserve(self, n)

    def capacity(self):
        return _yang.vectorDeviation_capacity(self)
vectorDeviation_swigregister = _yang.vectorDeviation_swigregister
vectorDeviation_swigregister(vectorDeviation)

class vectorIdent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorIdent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorIdent, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorIdent_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorIdent___nonzero__(self)

    def __bool__(self):
        return _yang.vectorIdent___bool__(self)

    def __len__(self):
        return _yang.vectorIdent___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorIdent___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorIdent___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorIdent___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorIdent___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorIdent___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorIdent___setitem__(self, *args)

    def pop(self):
        return _yang.vectorIdent_pop(self)

    def append(self, x):
        return _yang.vectorIdent_append(self, x)

    def empty(self):
        return _yang.vectorIdent_empty(self)

    def size(self):
        return _yang.vectorIdent_size(self)

    def swap(self, v):
        return _yang.vectorIdent_swap(self, v)

    def begin(self):
        return _yang.vectorIdent_begin(self)

    def end(self):
        return _yang.vectorIdent_end(self)

    def rbegin(self):
        return _yang.vectorIdent_rbegin(self)

    def rend(self):
        return _yang.vectorIdent_rend(self)

    def clear(self):
        return _yang.vectorIdent_clear(self)

    def get_allocator(self):
        return _yang.vectorIdent_get_allocator(self)

    def pop_back(self):
        return _yang.vectorIdent_pop_back(self)

    def erase(self, *args):
        return _yang.vectorIdent_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorIdent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorIdent_push_back(self, x)

    def front(self):
        return _yang.vectorIdent_front(self)

    def back(self):
        return _yang.vectorIdent_back(self)

    def assign(self, n, x):
        return _yang.vectorIdent_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorIdent_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorIdent_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorIdent_reserve(self, n)

    def capacity(self):
        return _yang.vectorIdent_capacity(self)
vectorIdent_swigregister = _yang.vectorIdent_swigregister
vectorIdent_swigregister(vectorIdent)

class vectorRestr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorRestr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorRestr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorRestr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorRestr___nonzero__(self)

    def __bool__(self):
        return _yang.vectorRestr___bool__(self)

    def __len__(self):
        return _yang.vectorRestr___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorRestr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorRestr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorRestr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorRestr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorRestr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorRestr___setitem__(self, *args)

    def pop(self):
        return _yang.vectorRestr_pop(self)

    def append(self, x):
        return _yang.vectorRestr_append(self, x)

    def empty(self):
        return _yang.vectorRestr_empty(self)

    def size(self):
        return _yang.vectorRestr_size(self)

    def swap(self, v):
        return _yang.vectorRestr_swap(self, v)

    def begin(self):
        return _yang.vectorRestr_begin(self)

    def end(self):
        return _yang.vectorRestr_end(self)

    def rbegin(self):
        return _yang.vectorRestr_rbegin(self)

    def rend(self):
        return _yang.vectorRestr_rend(self)

    def clear(self):
        return _yang.vectorRestr_clear(self)

    def get_allocator(self):
        return _yang.vectorRestr_get_allocator(self)

    def pop_back(self):
        return _yang.vectorRestr_pop_back(self)

    def erase(self, *args):
        return _yang.vectorRestr_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorRestr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorRestr_push_back(self, x)

    def front(self):
        return _yang.vectorRestr_front(self)

    def back(self):
        return _yang.vectorRestr_back(self)

    def assign(self, n, x):
        return _yang.vectorRestr_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorRestr_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorRestr_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorRestr_reserve(self, n)

    def capacity(self):
        return _yang.vectorRestr_capacity(self)
vectorRestr_swigregister = _yang.vectorRestr_swigregister
vectorRestr_swigregister(vectorRestr)

class vectorTpdf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorTpdf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorTpdf, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorTpdf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorTpdf___nonzero__(self)

    def __bool__(self):
        return _yang.vectorTpdf___bool__(self)

    def __len__(self):
        return _yang.vectorTpdf___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorTpdf___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorTpdf___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorTpdf___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorTpdf___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorTpdf___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorTpdf___setitem__(self, *args)

    def pop(self):
        return _yang.vectorTpdf_pop(self)

    def append(self, x):
        return _yang.vectorTpdf_append(self, x)

    def empty(self):
        return _yang.vectorTpdf_empty(self)

    def size(self):
        return _yang.vectorTpdf_size(self)

    def swap(self, v):
        return _yang.vectorTpdf_swap(self, v)

    def begin(self):
        return _yang.vectorTpdf_begin(self)

    def end(self):
        return _yang.vectorTpdf_end(self)

    def rbegin(self):
        return _yang.vectorTpdf_rbegin(self)

    def rend(self):
        return _yang.vectorTpdf_rend(self)

    def clear(self):
        return _yang.vectorTpdf_clear(self)

    def get_allocator(self):
        return _yang.vectorTpdf_get_allocator(self)

    def pop_back(self):
        return _yang.vectorTpdf_pop_back(self)

    def erase(self, *args):
        return _yang.vectorTpdf_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorTpdf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorTpdf_push_back(self, x)

    def front(self):
        return _yang.vectorTpdf_front(self)

    def back(self):
        return _yang.vectorTpdf_back(self)

    def assign(self, n, x):
        return _yang.vectorTpdf_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorTpdf_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorTpdf_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorTpdf_reserve(self, n)

    def capacity(self):
        return _yang.vectorTpdf_capacity(self)
vectorTpdf_swigregister = _yang.vectorTpdf_swigregister
vectorTpdf_swigregister(vectorTpdf)

class vectorUnique(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorUnique, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorUnique, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorUnique_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorUnique___nonzero__(self)

    def __bool__(self):
        return _yang.vectorUnique___bool__(self)

    def __len__(self):
        return _yang.vectorUnique___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorUnique___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorUnique___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorUnique___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorUnique___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorUnique___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorUnique___setitem__(self, *args)

    def pop(self):
        return _yang.vectorUnique_pop(self)

    def append(self, x):
        return _yang.vectorUnique_append(self, x)

    def empty(self):
        return _yang.vectorUnique_empty(self)

    def size(self):
        return _yang.vectorUnique_size(self)

    def swap(self, v):
        return _yang.vectorUnique_swap(self, v)

    def begin(self):
        return _yang.vectorUnique_begin(self)

    def end(self):
        return _yang.vectorUnique_end(self)

    def rbegin(self):
        return _yang.vectorUnique_rbegin(self)

    def rend(self):
        return _yang.vectorUnique_rend(self)

    def clear(self):
        return _yang.vectorUnique_clear(self)

    def get_allocator(self):
        return _yang.vectorUnique_get_allocator(self)

    def pop_back(self):
        return _yang.vectorUnique_pop_back(self)

    def erase(self, *args):
        return _yang.vectorUnique_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorUnique(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorUnique_push_back(self, x)

    def front(self):
        return _yang.vectorUnique_front(self)

    def back(self):
        return _yang.vectorUnique_back(self)

    def assign(self, n, x):
        return _yang.vectorUnique_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorUnique_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorUnique_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorUnique_reserve(self, n)

    def capacity(self):
        return _yang.vectorUnique_capacity(self)
vectorUnique_swigregister = _yang.vectorUnique_swigregister
vectorUnique_swigregister(vectorUnique)

class vectorSchema_Node_Leaf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorSchema_Node_Leaf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorSchema_Node_Leaf, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorSchema_Node_Leaf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorSchema_Node_Leaf___nonzero__(self)

    def __bool__(self):
        return _yang.vectorSchema_Node_Leaf___bool__(self)

    def __len__(self):
        return _yang.vectorSchema_Node_Leaf___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorSchema_Node_Leaf___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorSchema_Node_Leaf___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorSchema_Node_Leaf___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorSchema_Node_Leaf___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorSchema_Node_Leaf___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorSchema_Node_Leaf___setitem__(self, *args)

    def pop(self):
        return _yang.vectorSchema_Node_Leaf_pop(self)

    def append(self, x):
        return _yang.vectorSchema_Node_Leaf_append(self, x)

    def empty(self):
        return _yang.vectorSchema_Node_Leaf_empty(self)

    def size(self):
        return _yang.vectorSchema_Node_Leaf_size(self)

    def swap(self, v):
        return _yang.vectorSchema_Node_Leaf_swap(self, v)

    def begin(self):
        return _yang.vectorSchema_Node_Leaf_begin(self)

    def end(self):
        return _yang.vectorSchema_Node_Leaf_end(self)

    def rbegin(self):
        return _yang.vectorSchema_Node_Leaf_rbegin(self)

    def rend(self):
        return _yang.vectorSchema_Node_Leaf_rend(self)

    def clear(self):
        return _yang.vectorSchema_Node_Leaf_clear(self)

    def get_allocator(self):
        return _yang.vectorSchema_Node_Leaf_get_allocator(self)

    def pop_back(self):
        return _yang.vectorSchema_Node_Leaf_pop_back(self)

    def erase(self, *args):
        return _yang.vectorSchema_Node_Leaf_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorSchema_Node_Leaf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorSchema_Node_Leaf_push_back(self, x)

    def front(self):
        return _yang.vectorSchema_Node_Leaf_front(self)

    def back(self):
        return _yang.vectorSchema_Node_Leaf_back(self)

    def assign(self, n, x):
        return _yang.vectorSchema_Node_Leaf_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorSchema_Node_Leaf_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorSchema_Node_Leaf_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorSchema_Node_Leaf_reserve(self, n)

    def capacity(self):
        return _yang.vectorSchema_Node_Leaf_capacity(self)
vectorSchema_Node_Leaf_swigregister = _yang.vectorSchema_Node_Leaf_swigregister
vectorSchema_Node_Leaf_swigregister(vectorSchema_Node_Leaf)

class vectorSchema_Node_Augment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorSchema_Node_Augment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorSchema_Node_Augment, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorSchema_Node_Augment_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorSchema_Node_Augment___nonzero__(self)

    def __bool__(self):
        return _yang.vectorSchema_Node_Augment___bool__(self)

    def __len__(self):
        return _yang.vectorSchema_Node_Augment___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorSchema_Node_Augment___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorSchema_Node_Augment___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorSchema_Node_Augment___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorSchema_Node_Augment___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorSchema_Node_Augment___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorSchema_Node_Augment___setitem__(self, *args)

    def pop(self):
        return _yang.vectorSchema_Node_Augment_pop(self)

    def append(self, x):
        return _yang.vectorSchema_Node_Augment_append(self, x)

    def empty(self):
        return _yang.vectorSchema_Node_Augment_empty(self)

    def size(self):
        return _yang.vectorSchema_Node_Augment_size(self)

    def swap(self, v):
        return _yang.vectorSchema_Node_Augment_swap(self, v)

    def begin(self):
        return _yang.vectorSchema_Node_Augment_begin(self)

    def end(self):
        return _yang.vectorSchema_Node_Augment_end(self)

    def rbegin(self):
        return _yang.vectorSchema_Node_Augment_rbegin(self)

    def rend(self):
        return _yang.vectorSchema_Node_Augment_rend(self)

    def clear(self):
        return _yang.vectorSchema_Node_Augment_clear(self)

    def get_allocator(self):
        return _yang.vectorSchema_Node_Augment_get_allocator(self)

    def pop_back(self):
        return _yang.vectorSchema_Node_Augment_pop_back(self)

    def erase(self, *args):
        return _yang.vectorSchema_Node_Augment_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorSchema_Node_Augment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorSchema_Node_Augment_push_back(self, x)

    def front(self):
        return _yang.vectorSchema_Node_Augment_front(self)

    def back(self):
        return _yang.vectorSchema_Node_Augment_back(self)

    def assign(self, n, x):
        return _yang.vectorSchema_Node_Augment_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorSchema_Node_Augment_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorSchema_Node_Augment_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorSchema_Node_Augment_reserve(self, n)

    def capacity(self):
        return _yang.vectorSchema_Node_Augment_capacity(self)
vectorSchema_Node_Augment_swigregister = _yang.vectorSchema_Node_Augment_swigregister
vectorSchema_Node_Augment_swigregister(vectorSchema_Node_Augment)

class vectorType_Bit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorType_Bit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorType_Bit, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorType_Bit_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorType_Bit___nonzero__(self)

    def __bool__(self):
        return _yang.vectorType_Bit___bool__(self)

    def __len__(self):
        return _yang.vectorType_Bit___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorType_Bit___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorType_Bit___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorType_Bit___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorType_Bit___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorType_Bit___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorType_Bit___setitem__(self, *args)

    def pop(self):
        return _yang.vectorType_Bit_pop(self)

    def append(self, x):
        return _yang.vectorType_Bit_append(self, x)

    def empty(self):
        return _yang.vectorType_Bit_empty(self)

    def size(self):
        return _yang.vectorType_Bit_size(self)

    def swap(self, v):
        return _yang.vectorType_Bit_swap(self, v)

    def begin(self):
        return _yang.vectorType_Bit_begin(self)

    def end(self):
        return _yang.vectorType_Bit_end(self)

    def rbegin(self):
        return _yang.vectorType_Bit_rbegin(self)

    def rend(self):
        return _yang.vectorType_Bit_rend(self)

    def clear(self):
        return _yang.vectorType_Bit_clear(self)

    def get_allocator(self):
        return _yang.vectorType_Bit_get_allocator(self)

    def pop_back(self):
        return _yang.vectorType_Bit_pop_back(self)

    def erase(self, *args):
        return _yang.vectorType_Bit_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorType_Bit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorType_Bit_push_back(self, x)

    def front(self):
        return _yang.vectorType_Bit_front(self)

    def back(self):
        return _yang.vectorType_Bit_back(self)

    def assign(self, n, x):
        return _yang.vectorType_Bit_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorType_Bit_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorType_Bit_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorType_Bit_reserve(self, n)

    def capacity(self):
        return _yang.vectorType_Bit_capacity(self)
vectorType_Bit_swigregister = _yang.vectorType_Bit_swigregister
vectorType_Bit_swigregister(vectorType_Bit)

class vectorType_Enum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorType_Enum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorType_Enum, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorType_Enum_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorType_Enum___nonzero__(self)

    def __bool__(self):
        return _yang.vectorType_Enum___bool__(self)

    def __len__(self):
        return _yang.vectorType_Enum___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorType_Enum___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorType_Enum___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorType_Enum___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorType_Enum___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorType_Enum___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorType_Enum___setitem__(self, *args)

    def pop(self):
        return _yang.vectorType_Enum_pop(self)

    def append(self, x):
        return _yang.vectorType_Enum_append(self, x)

    def empty(self):
        return _yang.vectorType_Enum_empty(self)

    def size(self):
        return _yang.vectorType_Enum_size(self)

    def swap(self, v):
        return _yang.vectorType_Enum_swap(self, v)

    def begin(self):
        return _yang.vectorType_Enum_begin(self)

    def end(self):
        return _yang.vectorType_Enum_end(self)

    def rbegin(self):
        return _yang.vectorType_Enum_rbegin(self)

    def rend(self):
        return _yang.vectorType_Enum_rend(self)

    def clear(self):
        return _yang.vectorType_Enum_clear(self)

    def get_allocator(self):
        return _yang.vectorType_Enum_get_allocator(self)

    def pop_back(self):
        return _yang.vectorType_Enum_pop_back(self)

    def erase(self, *args):
        return _yang.vectorType_Enum_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorType_Enum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorType_Enum_push_back(self, x)

    def front(self):
        return _yang.vectorType_Enum_front(self)

    def back(self):
        return _yang.vectorType_Enum_back(self)

    def assign(self, n, x):
        return _yang.vectorType_Enum_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorType_Enum_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorType_Enum_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorType_Enum_reserve(self, n)

    def capacity(self):
        return _yang.vectorType_Enum_capacity(self)
vectorType_Enum_swigregister = _yang.vectorType_Enum_swigregister
vectorType_Enum_swigregister(vectorType_Enum)

class vectorError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorError, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _yang.vectorError_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _yang.vectorError___nonzero__(self)

    def __bool__(self):
        return _yang.vectorError___bool__(self)

    def __len__(self):
        return _yang.vectorError___len__(self)

    def __getslice__(self, i, j):
        return _yang.vectorError___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _yang.vectorError___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _yang.vectorError___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _yang.vectorError___delitem__(self, *args)

    def __getitem__(self, *args):
        return _yang.vectorError___getitem__(self, *args)

    def __setitem__(self, *args):
        return _yang.vectorError___setitem__(self, *args)

    def pop(self):
        return _yang.vectorError_pop(self)

    def append(self, x):
        return _yang.vectorError_append(self, x)

    def empty(self):
        return _yang.vectorError_empty(self)

    def size(self):
        return _yang.vectorError_size(self)

    def swap(self, v):
        return _yang.vectorError_swap(self, v)

    def begin(self):
        return _yang.vectorError_begin(self)

    def end(self):
        return _yang.vectorError_end(self)

    def rbegin(self):
        return _yang.vectorError_rbegin(self)

    def rend(self):
        return _yang.vectorError_rend(self)

    def clear(self):
        return _yang.vectorError_clear(self)

    def get_allocator(self):
        return _yang.vectorError_get_allocator(self)

    def pop_back(self):
        return _yang.vectorError_pop_back(self)

    def erase(self, *args):
        return _yang.vectorError_erase(self, *args)

    def __init__(self, *args):
        this = _yang.new_vectorError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _yang.vectorError_push_back(self, x)

    def front(self):
        return _yang.vectorError_front(self)

    def back(self):
        return _yang.vectorError_back(self)

    def assign(self, n, x):
        return _yang.vectorError_assign(self, n, x)

    def resize(self, *args):
        return _yang.vectorError_resize(self, *args)

    def insert(self, *args):
        return _yang.vectorError_insert(self, *args)

    def reserve(self, n):
        return _yang.vectorError_reserve(self, n)

    def capacity(self):
        return _yang.vectorError_capacity(self)
vectorError_swigregister = _yang.vectorError_swigregister
vectorError_swigregister(vectorError)

class pairStringLysInformat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairStringLysInformat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairStringLysInformat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_pairStringLysInformat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _yang.pairStringLysInformat_first_set
    __swig_getmethods__["first"] = _yang.pairStringLysInformat_first_get
    if _newclass:
        first = _swig_property(_yang.pairStringLysInformat_first_get, _yang.pairStringLysInformat_first_set)
    __swig_setmethods__["second"] = _yang.pairStringLysInformat_second_set
    __swig_getmethods__["second"] = _yang.pairStringLysInformat_second_get
    if _newclass:
        second = _swig_property(_yang.pairStringLysInformat_second_get, _yang.pairStringLysInformat_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
pairStringLysInformat_swigregister = _yang.pairStringLysInformat_swigregister
pairStringLysInformat_swigregister(pairStringLysInformat)


def check_libyang_error(ctx):
    return _yang.check_libyang_error(ctx)
check_libyang_error = _yang.check_libyang_error
Free_Type_CONTEXT = _yang.Free_Type_CONTEXT
Free_Type_DATA_NODE = _yang.Free_Type_DATA_NODE
Free_Type_SCHEMA_NODE = _yang.Free_Type_SCHEMA_NODE
Free_Type_MODULE = _yang.Free_Type_MODULE
Free_Type_SUBMODULE = _yang.Free_Type_SUBMODULE
Free_Type_XML = _yang.Free_Type_XML
Free_Type_SET = _yang.Free_Type_SET
Free_Type_DIFFLIST = _yang.Free_Type_DIFFLIST
class value_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, value_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, value_t, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["ctx"] = _yang.value_t_ctx_set
    __swig_getmethods__["ctx"] = _yang.value_t_ctx_get
    if _newclass:
        ctx = _swig_property(_yang.value_t_ctx_get, _yang.value_t_ctx_set)
    __swig_setmethods__["data"] = _yang.value_t_data_set
    __swig_getmethods__["data"] = _yang.value_t_data_get
    if _newclass:
        data = _swig_property(_yang.value_t_data_get, _yang.value_t_data_set)
    __swig_setmethods__["schema"] = _yang.value_t_schema_set
    __swig_getmethods__["schema"] = _yang.value_t_schema_get
    if _newclass:
        schema = _swig_property(_yang.value_t_schema_get, _yang.value_t_schema_set)
    __swig_setmethods__["module"] = _yang.value_t_module_set
    __swig_getmethods__["module"] = _yang.value_t_module_get
    if _newclass:
        module = _swig_property(_yang.value_t_module_get, _yang.value_t_module_set)
    __swig_setmethods__["submodule"] = _yang.value_t_submodule_set
    __swig_getmethods__["submodule"] = _yang.value_t_submodule_get
    if _newclass:
        submodule = _swig_property(_yang.value_t_submodule_get, _yang.value_t_submodule_set)
    __swig_setmethods__["elem"] = _yang.value_t_elem_set
    __swig_getmethods__["elem"] = _yang.value_t_elem_get
    if _newclass:
        elem = _swig_property(_yang.value_t_elem_get, _yang.value_t_elem_set)
    __swig_setmethods__["set"] = _yang.value_t_set_set
    __swig_getmethods__["set"] = _yang.value_t_set_get
    if _newclass:
        set = _swig_property(_yang.value_t_set_get, _yang.value_t_set_set)
    __swig_setmethods__["diff"] = _yang.value_t_diff_set
    __swig_getmethods__["diff"] = _yang.value_t_diff_get
    if _newclass:
        diff = _swig_property(_yang.value_t_diff_get, _yang.value_t_diff_set)
value_t_swigregister = _yang.value_t_swigregister
value_t_swigregister(value_t)

class Deleter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Deleter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Deleter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Deleter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Deleter
    __del__ = lambda self: None
Deleter_swigregister = _yang.Deleter_swigregister
Deleter_swigregister(Deleter)

class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Context
    __del__ = lambda self: None

    def set_searchdir(self, search_dir):
        return _yang.Context_set_searchdir(self, search_dir)

    def unset_searchdirs(self, idx):
        return _yang.Context_unset_searchdirs(self, idx)

    def get_searchdirs(self):
        return _yang.Context_get_searchdirs(self)

    def set_allimplemented(self):
        return _yang.Context_set_allimplemented(self)

    def unset_allimplemented(self):
        return _yang.Context_unset_allimplemented(self)

    def set_disable_searchdirs(self):
        return _yang.Context_set_disable_searchdirs(self)

    def unset_disable_searchdirs(self):
        return _yang.Context_unset_disable_searchdirs(self)

    def set_disable_searchdir_cwd(self):
        return _yang.Context_set_disable_searchdir_cwd(self)

    def unset_disable_searchdir_cwd(self):
        return _yang.Context_unset_disable_searchdir_cwd(self)

    def set_prefer_searchdirs(self):
        return _yang.Context_set_prefer_searchdirs(self)

    def unset_prefer_searchdirs(self):
        return _yang.Context_unset_prefer_searchdirs(self)

    def info(self):
        return _yang.Context_info(self)

    def get_module_iter(self):
        return _yang.Context_get_module_iter(self)

    def get_disabled_module_iter(self):
        return _yang.Context_get_disabled_module_iter(self)

    def get_module(self, name, revision=None, implemented=0):
        return _yang.Context_get_module(self, name, revision, implemented)

    def get_module_older(self, module):
        return _yang.Context_get_module_older(self, module)

    def load_module(self, name, revision=None):
        return _yang.Context_load_module(self, name, revision)

    def get_module_by_ns(self, ns, revision=None, implemented=0):
        return _yang.Context_get_module_by_ns(self, ns, revision, implemented)

    def get_submodule(self, module, revision=None, submodule=None, sub_revision=None):
        return _yang.Context_get_submodule(self, module, revision, submodule, sub_revision)

    def get_submodule2(self, main_module, submodule=None):
        return _yang.Context_get_submodule2(self, main_module, submodule)

    def get_node(self, start, data_path, output=0):
        return _yang.Context_get_node(self, start, data_path, output)

    def data_instantiables(self, options):
        return _yang.Context_data_instantiables(self, options)

    def find_path(self, schema_path):
        return _yang.Context_find_path(self, schema_path)

    def clean(self):
        return _yang.Context_clean(self)

    def add_missing_module_callback(self, *args):
        return _yang.Context_add_missing_module_callback(self, *args)

    def parse_data_mem(self, data, format, options=0):
        return _yang.Context_parse_data_mem(self, data, format, options)

    def parse_data_fd(self, fd, format, options=0):
        return _yang.Context_parse_data_fd(self, fd, format, options)

    def parse_data_path(self, path, format, options=0):
        return _yang.Context_parse_data_path(self, path, format, options)

    def parse_data_xml(self, elem, options=0):
        return _yang.Context_parse_data_xml(self, elem, options)

    def parse_module_mem(self, data, format):
        return _yang.Context_parse_module_mem(self, data, format)

    def parse_module_fd(self, fd, format):
        return _yang.Context_parse_module_fd(self, fd, format)

    def parse_module_path(self, path, format):
        return _yang.Context_parse_module_path(self, path, format)
    __swig_setmethods__["mod_missing_cb"] = _yang.Context_mod_missing_cb_set
    __swig_getmethods__["mod_missing_cb"] = _yang.Context_mod_missing_cb_get
    if _newclass:
        mod_missing_cb = _swig_property(_yang.Context_mod_missing_cb_get, _yang.Context_mod_missing_cb_set)
    __swig_setmethods__["mod_missing_deleter"] = _yang.Context_mod_missing_deleter_set
    __swig_getmethods__["mod_missing_deleter"] = _yang.Context_mod_missing_deleter_get
    if _newclass:
        mod_missing_deleter = _swig_property(_yang.Context_mod_missing_deleter_get, _yang.Context_mod_missing_deleter_set)
    if _newclass:
        cpp_mod_missing_cb = staticmethod(_yang.Context_cpp_mod_missing_cb)
    else:
        cpp_mod_missing_cb = _yang.Context_cpp_mod_missing_cb
    if _newclass:
        cpp_mod_missing_deleter = staticmethod(_yang.Context_cpp_mod_missing_deleter)
    else:
        cpp_mod_missing_deleter = _yang.Context_cpp_mod_missing_deleter

    def swig_ctx(self):
        return _yang.Context_swig_ctx(self)
    __swig_setmethods__["wrap_cb_l"] = _yang.Context_wrap_cb_l_set
    __swig_getmethods__["wrap_cb_l"] = _yang.Context_wrap_cb_l_get
    if _newclass:
        wrap_cb_l = _swig_property(_yang.Context_wrap_cb_l_get, _yang.Context_wrap_cb_l_set)

    def set_module_imp_clb(self, clb, user_data=None):
        return _yang.Context_set_module_imp_clb(self, clb, user_data)
Context_swigregister = _yang.Context_swigregister
Context_swigregister(Context)

def Context_cpp_mod_missing_cb(mod_name, mod_rev, submod_name, sub_rev, user_data, format, free_module_data):
    return _yang.Context_cpp_mod_missing_cb(mod_name, mod_rev, submod_name, sub_rev, user_data, format, free_module_data)
Context_cpp_mod_missing_cb = _yang.Context_cpp_mod_missing_cb

def Context_cpp_mod_missing_deleter(data, user_data):
    return _yang.Context_cpp_mod_missing_deleter(data, user_data)
Context_cpp_mod_missing_deleter = _yang.Context_cpp_mod_missing_deleter


def create_new_Context(ctx):
    return _yang.create_new_Context(ctx)
create_new_Context = _yang.create_new_Context
class Error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr

    def __init__(self, eitem):
        this = _yang.new_Error(eitem)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Error
    __del__ = lambda self: None

    def err(self):
        return _yang.Error_err(self)

    def vecode(self):
        return _yang.Error_vecode(self)

    def errmsg(self):
        return _yang.Error_errmsg(self)

    def errpath(self):
        return _yang.Error_errpath(self)

    def errapptag(self):
        return _yang.Error_errapptag(self)
Error_swigregister = _yang.Error_swigregister
Error_swigregister(Error)


def get_ly_errors(context):
    return _yang.get_ly_errors(context)
get_ly_errors = _yang.get_ly_errors

def set_log_options(options):
    return _yang.set_log_options(options)
set_log_options = _yang.set_log_options

def set_log_verbosity(level):
    return _yang.set_log_verbosity(level)
set_log_verbosity = _yang.set_log_verbosity
class Set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Set, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Set(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Set
    __del__ = lambda self: None

    def size(self):
        return _yang.Set_size(self)

    def number(self):
        return _yang.Set_number(self)

    def data(self):
        return _yang.Set_data(self)

    def schema(self):
        return _yang.Set_schema(self)

    def dup(self):
        return _yang.Set_dup(self)

    def add(self, *args):
        return _yang.Set_add(self, *args)

    def contains(self, *args):
        return _yang.Set_contains(self, *args)

    def clean(self):
        return _yang.Set_clean(self)

    def rm(self, *args):
        return _yang.Set_rm(self, *args)

    def rm_index(self, index):
        return _yang.Set_rm_index(self, index)
Set_swigregister = _yang.Set_swigregister
Set_swigregister(Set)

class Value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr

    def __init__(self, value, value_type, value_flags, deleter):
        this = _yang.new_Value(value, value_type, value_flags, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Value
    __del__ = lambda self: None

    def binary(self):
        return _yang.Value_binary(self)

    def bln(self):
        return _yang.Value_bln(self)

    def dec64(self):
        return _yang.Value_dec64(self)

    def enm(self):
        return _yang.Value_enm(self)

    def ident(self):
        return _yang.Value_ident(self)

    def instance(self):
        return _yang.Value_instance(self)

    def int8(self):
        return _yang.Value_int8(self)

    def int16(self):
        return _yang.Value_int16(self)

    def int32(self):
        return _yang.Value_int32(self)

    def int64(self):
        return _yang.Value_int64(self)

    def leafref(self):
        return _yang.Value_leafref(self)

    def string(self):
        return _yang.Value_string(self)

    def uint8(self):
        return _yang.Value_uint8(self)

    def uint16(self):
        return _yang.Value_uint16(self)

    def uintu32(self):
        return _yang.Value_uintu32(self)

    def uint64(self):
        return _yang.Value_uint64(self)
Value_swigregister = _yang.Value_swigregister
Value_swigregister(Value)

class Data_Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data_Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data_Node, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Data_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Data_Node
    __del__ = lambda self: None

    def schema(self):
        return _yang.Data_Node_schema(self)

    def validity(self):
        return _yang.Data_Node_validity(self)

    def dflt(self):
        return _yang.Data_Node_dflt(self)

    def when_status(self):
        return _yang.Data_Node_when_status(self)

    def attr(self):
        return _yang.Data_Node_attr(self)

    def next(self):
        return _yang.Data_Node_next(self)

    def prev(self):
        return _yang.Data_Node_prev(self)

    def parent(self):
        return _yang.Data_Node_parent(self)

    def child(self):
        return _yang.Data_Node_child(self)

    def path(self):
        return _yang.Data_Node_path(self)

    def dup(self, recursive):
        return _yang.Data_Node_dup(self, recursive)

    def dup_withsiblings(self, recursive):
        return _yang.Data_Node_dup_withsiblings(self, recursive)

    def dup_to_ctx(self, recursive, context):
        return _yang.Data_Node_dup_to_ctx(self, recursive, context)

    def merge(self, source, options):
        return _yang.Data_Node_merge(self, source, options)

    def merge_to_ctx(self, source, options, context):
        return _yang.Data_Node_merge_to_ctx(self, source, options, context)

    def insert(self, new_node):
        return _yang.Data_Node_insert(self, new_node)

    def insert_sibling(self, new_node):
        return _yang.Data_Node_insert_sibling(self, new_node)

    def insert_before(self, new_node):
        return _yang.Data_Node_insert_before(self, new_node)

    def insert_after(self, new_node):
        return _yang.Data_Node_insert_after(self, new_node)

    def schema_sort(self, recursive):
        return _yang.Data_Node_schema_sort(self, recursive)

    def find_path(self, expr):
        return _yang.Data_Node_find_path(self, expr)

    def find_instance(self, schema):
        return _yang.Data_Node_find_instance(self, schema)

    def first_sibling(self):
        return _yang.Data_Node_first_sibling(self)

    def validate(self, *args):
        return _yang.Data_Node_validate(self, *args)

    def validate_value(self, value):
        return _yang.Data_Node_validate_value(self, value)

    def diff(self, second, options):
        return _yang.Data_Node_diff(self, second, options)

    def new_path(self, *args):
        return _yang.Data_Node_new_path(self, *args)

    def list_pos(self):
        return _yang.Data_Node_list_pos(self)

    def unlink(self):
        return _yang.Data_Node_unlink(self)

    def insert_attr(self, module, name, value):
        return _yang.Data_Node_insert_attr(self, module, name, value)

    def node_module(self):
        return _yang.Data_Node_node_module(self)

    def print_mem(self, format, options):
        return _yang.Data_Node_print_mem(self, format, options)

    def tree_for(self):
        return _yang.Data_Node_tree_for(self)

    def tree_dfs(self):
        return _yang.Data_Node_tree_dfs(self)

    def swig_node(self):
        return _yang.Data_Node_swig_node(self)

    def swig_deleter(self):
        return _yang.Data_Node_swig_deleter(self)

    def C_lyd_node(self):
        return _yang.Data_Node_C_lyd_node(self)

    def subtype(self):
        return _yang.Data_Node_subtype(self)
Data_Node_swigregister = _yang.Data_Node_swigregister
Data_Node_swigregister(Data_Node)


def create_new_Data_Node(node):
    return _yang.create_new_Data_Node(node)
create_new_Data_Node = _yang.create_new_Data_Node
class Data_Node_Leaf_List(Data_Node):
    __swig_setmethods__ = {}
    for _s in [Data_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data_Node_Leaf_List, name, value)
    __swig_getmethods__ = {}
    for _s in [Data_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Data_Node_Leaf_List, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Data_Node_Leaf_List(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Data_Node_Leaf_List
    __del__ = lambda self: None

    def value_str(self):
        return _yang.Data_Node_Leaf_List_value_str(self)

    def value(self):
        return _yang.Data_Node_Leaf_List_value(self)

    def value_type(self):
        return _yang.Data_Node_Leaf_List_value_type(self)

    def child(self):
        return _yang.Data_Node_Leaf_List_child(self)

    def change_leaf(self, val_str):
        return _yang.Data_Node_Leaf_List_change_leaf(self, val_str)

    def wd_default(self):
        return _yang.Data_Node_Leaf_List_wd_default(self)

    def leaf_type(self):
        return _yang.Data_Node_Leaf_List_leaf_type(self)
Data_Node_Leaf_List_swigregister = _yang.Data_Node_Leaf_List_swigregister
Data_Node_Leaf_List_swigregister(Data_Node_Leaf_List)

class Data_Node_Anydata(Data_Node):
    __swig_setmethods__ = {}
    for _s in [Data_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data_Node_Anydata, name, value)
    __swig_getmethods__ = {}
    for _s in [Data_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Data_Node_Anydata, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Data_Node_Anydata(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Data_Node_Anydata
    __del__ = lambda self: None

    def value_type(self):
        return _yang.Data_Node_Anydata_value_type(self)

    def value(self):
        return _yang.Data_Node_Anydata_value(self)

    def child(self):
        return _yang.Data_Node_Anydata_child(self)
Data_Node_Anydata_swigregister = _yang.Data_Node_Anydata_swigregister
Data_Node_Anydata_swigregister(Data_Node_Anydata)

class Attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Attr, name)
    __repr__ = _swig_repr

    def __init__(self, attr, deleter=0):
        this = _yang.new_Attr(attr, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Attr
    __del__ = lambda self: None

    def parent(self):
        return _yang.Attr_parent(self)

    def next(self):
        return _yang.Attr_next(self)

    def name(self):
        return _yang.Attr_name(self)

    def value_str(self):
        return _yang.Attr_value_str(self)

    def value(self):
        return _yang.Attr_value(self)

    def value_type(self):
        return _yang.Attr_value_type(self)
Attr_swigregister = _yang.Attr_swigregister
Attr_swigregister(Attr)

class Difflist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Difflist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Difflist, name)
    __repr__ = _swig_repr

    def __init__(self, diff, deleter):
        this = _yang.new_Difflist(diff, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Difflist
    __del__ = lambda self: None

    def type(self):
        return _yang.Difflist_type(self)

    def first(self):
        return _yang.Difflist_first(self)

    def second(self):
        return _yang.Difflist_second(self)
Difflist_swigregister = _yang.Difflist_swigregister
Difflist_swigregister(Difflist)

class Module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr

    def __init__(self, module, deleter):
        this = _yang.new_Module(module, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Module
    __del__ = lambda self: None

    def name(self):
        return _yang.Module_name(self)

    def prefix(self):
        return _yang.Module_prefix(self)

    def dsc(self):
        return _yang.Module_dsc(self)

    def ref(self):
        return _yang.Module_ref(self)

    def org(self):
        return _yang.Module_org(self)

    def contact(self):
        return _yang.Module_contact(self)

    def filepath(self):
        return _yang.Module_filepath(self)

    def type(self):
        return _yang.Module_type(self)

    def version(self):
        return _yang.Module_version(self)

    def deviated(self):
        return _yang.Module_deviated(self)

    def disabled(self):
        return _yang.Module_disabled(self)

    def implemented(self):
        return _yang.Module_implemented(self)

    def rev_size(self):
        return _yang.Module_rev_size(self)

    def imp_size(self):
        return _yang.Module_imp_size(self)

    def inc_size(self):
        return _yang.Module_inc_size(self)

    def ident_size(self):
        return _yang.Module_ident_size(self)

    def tpdf_size(self):
        return _yang.Module_tpdf_size(self)

    def features_size(self):
        return _yang.Module_features_size(self)

    def augment_size(self):
        return _yang.Module_augment_size(self)

    def devaiation_size(self):
        return _yang.Module_devaiation_size(self)

    def extensions_size(self):
        return _yang.Module_extensions_size(self)

    def ext_size(self):
        return _yang.Module_ext_size(self)

    def ns(self):
        return _yang.Module_ns(self)

    def rev(self):
        return _yang.Module_rev(self)

    def deviation(self):
        return _yang.Module_deviation(self)

    def data(self):
        return _yang.Module_data(self)

    def data_instantiables(self, options):
        return _yang.Module_data_instantiables(self, options)

    def print_mem(self, *args):
        return _yang.Module_print_mem(self, *args)

    def feature_enable(self, feature):
        return _yang.Module_feature_enable(self, feature)

    def feature_disable(self, feature):
        return _yang.Module_feature_disable(self, feature)

    def feature_state(self, feature):
        return _yang.Module_feature_state(self, feature)
Module_swigregister = _yang.Module_swigregister
Module_swigregister(Module)

class Submodule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Submodule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Submodule, name)
    __repr__ = _swig_repr

    def __init__(self, submodule, deleter):
        this = _yang.new_Submodule(submodule, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Submodule
    __del__ = lambda self: None

    def ctx(self):
        return _yang.Submodule_ctx(self)

    def name(self):
        return _yang.Submodule_name(self)

    def prefix(self):
        return _yang.Submodule_prefix(self)

    def dsc(self):
        return _yang.Submodule_dsc(self)

    def ref(self):
        return _yang.Submodule_ref(self)

    def org(self):
        return _yang.Submodule_org(self)

    def contact(self):
        return _yang.Submodule_contact(self)

    def filepath(self):
        return _yang.Submodule_filepath(self)

    def type(self):
        return _yang.Submodule_type(self)

    def version(self):
        return _yang.Submodule_version(self)

    def deviated(self):
        return _yang.Submodule_deviated(self)

    def disabled(self):
        return _yang.Submodule_disabled(self)

    def implemented(self):
        return _yang.Submodule_implemented(self)

    def rev_size(self):
        return _yang.Submodule_rev_size(self)

    def imp_size(self):
        return _yang.Submodule_imp_size(self)

    def inc_size(self):
        return _yang.Submodule_inc_size(self)

    def ident_size(self):
        return _yang.Submodule_ident_size(self)

    def tpdf_size(self):
        return _yang.Submodule_tpdf_size(self)

    def features_size(self):
        return _yang.Submodule_features_size(self)

    def augment_size(self):
        return _yang.Submodule_augment_size(self)

    def deviation_size(self):
        return _yang.Submodule_deviation_size(self)

    def extensions_size(self):
        return _yang.Submodule_extensions_size(self)

    def ext_size(self):
        return _yang.Submodule_ext_size(self)

    def rev(self):
        return _yang.Submodule_rev(self)

    def deviation(self):
        return _yang.Submodule_deviation(self)

    def belongsto(self):
        return _yang.Submodule_belongsto(self)
Submodule_swigregister = _yang.Submodule_swigregister
Submodule_swigregister(Submodule)

class Type_Info_Binary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Binary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Binary, name)
    __repr__ = _swig_repr

    def __init__(self, info_binary, deleter):
        this = _yang.new_Type_Info_Binary(info_binary, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Binary
    __del__ = lambda self: None

    def length(self):
        return _yang.Type_Info_Binary_length(self)
Type_Info_Binary_swigregister = _yang.Type_Info_Binary_swigregister
Type_Info_Binary_swigregister(Type_Info_Binary)

class Type_Bit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Bit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Bit, name)
    __repr__ = _swig_repr

    def __init__(self, info_bit, deleter):
        this = _yang.new_Type_Bit(info_bit, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Bit
    __del__ = lambda self: None

    def name(self):
        return _yang.Type_Bit_name(self)

    def dsc(self):
        return _yang.Type_Bit_dsc(self)

    def ref(self):
        return _yang.Type_Bit_ref(self)

    def flags(self):
        return _yang.Type_Bit_flags(self)

    def ext_size(self):
        return _yang.Type_Bit_ext_size(self)

    def iffeature_size(self):
        return _yang.Type_Bit_iffeature_size(self)

    def pos(self):
        return _yang.Type_Bit_pos(self)

    def ext(self):
        return _yang.Type_Bit_ext(self)

    def iffeature(self):
        return _yang.Type_Bit_iffeature(self)
Type_Bit_swigregister = _yang.Type_Bit_swigregister
Type_Bit_swigregister(Type_Bit)

class Type_Info_Bits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Bits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Bits, name)
    __repr__ = _swig_repr

    def __init__(self, info_bits, deleter):
        this = _yang.new_Type_Info_Bits(info_bits, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Bits
    __del__ = lambda self: None

    def bit(self):
        return _yang.Type_Info_Bits_bit(self)

    def count(self):
        return _yang.Type_Info_Bits_count(self)
Type_Info_Bits_swigregister = _yang.Type_Info_Bits_swigregister
Type_Info_Bits_swigregister(Type_Info_Bits)

class Type_Info_Dec64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Dec64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Dec64, name)
    __repr__ = _swig_repr

    def __init__(self, info_dec64, deleter):
        this = _yang.new_Type_Info_Dec64(info_dec64, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Dec64
    __del__ = lambda self: None

    def range(self):
        return _yang.Type_Info_Dec64_range(self)

    def dig(self):
        return _yang.Type_Info_Dec64_dig(self)

    def div(self):
        return _yang.Type_Info_Dec64_div(self)
Type_Info_Dec64_swigregister = _yang.Type_Info_Dec64_swigregister
Type_Info_Dec64_swigregister(Type_Info_Dec64)

class Type_Enum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Enum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Enum, name)
    __repr__ = _swig_repr

    def __init__(self, info_enum, deleter):
        this = _yang.new_Type_Enum(info_enum, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Enum
    __del__ = lambda self: None

    def name(self):
        return _yang.Type_Enum_name(self)

    def dsc(self):
        return _yang.Type_Enum_dsc(self)

    def ref(self):
        return _yang.Type_Enum_ref(self)

    def flags(self):
        return _yang.Type_Enum_flags(self)

    def ext_size(self):
        return _yang.Type_Enum_ext_size(self)

    def iffeature_size(self):
        return _yang.Type_Enum_iffeature_size(self)

    def value(self):
        return _yang.Type_Enum_value(self)

    def ext(self):
        return _yang.Type_Enum_ext(self)

    def iffeature(self):
        return _yang.Type_Enum_iffeature(self)
Type_Enum_swigregister = _yang.Type_Enum_swigregister
Type_Enum_swigregister(Type_Enum)

class Type_Info_Enums(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Enums, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Enums, name)
    __repr__ = _swig_repr

    def __init__(self, info_enums, deleter):
        this = _yang.new_Type_Info_Enums(info_enums, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Enums
    __del__ = lambda self: None

    def enm(self):
        return _yang.Type_Info_Enums_enm(self)

    def count(self):
        return _yang.Type_Info_Enums_count(self)
Type_Info_Enums_swigregister = _yang.Type_Info_Enums_swigregister
Type_Info_Enums_swigregister(Type_Info_Enums)

class Type_Info_Ident(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Ident, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Ident, name)
    __repr__ = _swig_repr

    def __init__(self, info_ident, deleter):
        this = _yang.new_Type_Info_Ident(info_ident, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Ident
    __del__ = lambda self: None

    def ref(self):
        return _yang.Type_Info_Ident_ref(self)

    def count(self):
        return _yang.Type_Info_Ident_count(self)
Type_Info_Ident_swigregister = _yang.Type_Info_Ident_swigregister
Type_Info_Ident_swigregister(Type_Info_Ident)

class Type_Info_Inst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Inst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Inst, name)
    __repr__ = _swig_repr

    def __init__(self, info_inst, deleter):
        this = _yang.new_Type_Info_Inst(info_inst, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Inst
    __del__ = lambda self: None

    def req(self):
        return _yang.Type_Info_Inst_req(self)
Type_Info_Inst_swigregister = _yang.Type_Info_Inst_swigregister
Type_Info_Inst_swigregister(Type_Info_Inst)

class Type_Info_Num(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Num, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Num, name)
    __repr__ = _swig_repr

    def __init__(self, info_num, deleter):
        this = _yang.new_Type_Info_Num(info_num, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Num
    __del__ = lambda self: None

    def range(self):
        return _yang.Type_Info_Num_range(self)
Type_Info_Num_swigregister = _yang.Type_Info_Num_swigregister
Type_Info_Num_swigregister(Type_Info_Num)

class Type_Info_Lref(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Lref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Lref, name)
    __repr__ = _swig_repr

    def __init__(self, info_lref, deleter):
        this = _yang.new_Type_Info_Lref(info_lref, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Lref
    __del__ = lambda self: None

    def path(self):
        return _yang.Type_Info_Lref_path(self)

    def target(self):
        return _yang.Type_Info_Lref_target(self)

    def req(self):
        return _yang.Type_Info_Lref_req(self)
Type_Info_Lref_swigregister = _yang.Type_Info_Lref_swigregister
Type_Info_Lref_swigregister(Type_Info_Lref)

class Type_Info_Str(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Str, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Str, name)
    __repr__ = _swig_repr

    def __init__(self, info_str, deleter):
        this = _yang.new_Type_Info_Str(info_str, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Str
    __del__ = lambda self: None

    def length(self):
        return _yang.Type_Info_Str_length(self)

    def patterns(self):
        return _yang.Type_Info_Str_patterns(self)

    def pat_count(self):
        return _yang.Type_Info_Str_pat_count(self)
Type_Info_Str_swigregister = _yang.Type_Info_Str_swigregister
Type_Info_Str_swigregister(Type_Info_Str)

class Type_Info_Union(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info_Union, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info_Union, name)
    __repr__ = _swig_repr

    def __init__(self, info_union, deleter):
        this = _yang.new_Type_Info_Union(info_union, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info_Union
    __del__ = lambda self: None

    def types(self):
        return _yang.Type_Info_Union_types(self)

    def count(self):
        return _yang.Type_Info_Union_count(self)

    def has_ptr_type(self):
        return _yang.Type_Info_Union_has_ptr_type(self)
Type_Info_Union_swigregister = _yang.Type_Info_Union_swigregister
Type_Info_Union_swigregister(Type_Info_Union)

class Type_Info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type_Info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type_Info, name)
    __repr__ = _swig_repr

    def __init__(self, info, type, flags, deleter):
        this = _yang.new_Type_Info(info, type, flags, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type_Info
    __del__ = lambda self: None

    def binary(self):
        return _yang.Type_Info_binary(self)

    def bits(self):
        return _yang.Type_Info_bits(self)

    def dec64(self):
        return _yang.Type_Info_dec64(self)

    def enums(self):
        return _yang.Type_Info_enums(self)

    def ident(self):
        return _yang.Type_Info_ident(self)

    def inst(self):
        return _yang.Type_Info_inst(self)

    def num(self):
        return _yang.Type_Info_num(self)

    def lref(self):
        return _yang.Type_Info_lref(self)

    def str(self):
        return _yang.Type_Info_str(self)

    def uni(self):
        return _yang.Type_Info_uni(self)
Type_Info_swigregister = _yang.Type_Info_swigregister
Type_Info_swigregister(Type_Info)

class Type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type, name)
    __repr__ = _swig_repr

    def __init__(self, type, deleter):
        this = _yang.new_Type(type, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Type
    __del__ = lambda self: None

    def base(self):
        return _yang.Type_base(self)

    def ext_size(self):
        return _yang.Type_ext_size(self)

    def ext(self):
        return _yang.Type_ext(self)

    def der(self):
        return _yang.Type_der(self)

    def parent(self):
        return _yang.Type_parent(self)

    def info(self):
        return _yang.Type_info(self)
Type_swigregister = _yang.Type_swigregister
Type_swigregister(Type)

class Iffeature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Iffeature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Iffeature, name)
    __repr__ = _swig_repr

    def __init__(self, iffeature, deleter):
        this = _yang.new_Iffeature(iffeature, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Iffeature
    __del__ = lambda self: None

    def expr(self):
        return _yang.Iffeature_expr(self)

    def ext_size(self):
        return _yang.Iffeature_ext_size(self)

    def ext(self):
        return _yang.Iffeature_ext(self)

    def value(self):
        return _yang.Iffeature_value(self)
Iffeature_swigregister = _yang.Iffeature_swigregister
Iffeature_swigregister(Iffeature)

class Ext_Instance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ext_Instance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ext_Instance, name)
    __repr__ = _swig_repr

    def __init__(self, ext_instance, deleter):
        this = _yang.new_Ext_Instance(ext_instance, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Ext_Instance
    __del__ = lambda self: None

    def arg_value(self):
        return _yang.Ext_Instance_arg_value(self)

    def flags(self):
        return _yang.Ext_Instance_flags(self)

    def ext_size(self):
        return _yang.Ext_Instance_ext_size(self)

    def insubstmt_index(self):
        return _yang.Ext_Instance_insubstmt_index(self)

    def insubstmt(self):
        return _yang.Ext_Instance_insubstmt(self)

    def parent_type(self):
        return _yang.Ext_Instance_parent_type(self)

    def ext_type(self):
        return _yang.Ext_Instance_ext_type(self)

    def ext(self):
        return _yang.Ext_Instance_ext(self)

    def _def(self):
        return _yang.Ext_Instance__def(self)

    def priv(self):
        return _yang.Ext_Instance_priv(self)

    def module(self):
        return _yang.Ext_Instance_module(self)

    def nodetype(self):
        return _yang.Ext_Instance_nodetype(self)
Ext_Instance_swigregister = _yang.Ext_Instance_swigregister
Ext_Instance_swigregister(Ext_Instance)

class Schema_Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node, name)
    __repr__ = _swig_repr

    def __init__(self, node, deleter):
        this = _yang.new_Schema_Node(node, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node
    __del__ = lambda self: None

    def name(self):
        return _yang.Schema_Node_name(self)

    def dsc(self):
        return _yang.Schema_Node_dsc(self)

    def ref(self):
        return _yang.Schema_Node_ref(self)

    def flags(self):
        return _yang.Schema_Node_flags(self)

    def ext_size(self):
        return _yang.Schema_Node_ext_size(self)

    def iffeature_size(self):
        return _yang.Schema_Node_iffeature_size(self)

    def ext(self):
        return _yang.Schema_Node_ext(self)

    def iffeature(self):
        return _yang.Schema_Node_iffeature(self)

    def module(self):
        return _yang.Schema_Node_module(self)

    def nodetype(self):
        return _yang.Schema_Node_nodetype(self)

    def parent(self):
        return _yang.Schema_Node_parent(self)

    def child(self):
        return _yang.Schema_Node_child(self)

    def next(self):
        return _yang.Schema_Node_next(self)

    def prev(self):
        return _yang.Schema_Node_prev(self)

    def path(self, options=0):
        return _yang.Schema_Node_path(self, options)

    def validate_value(self, value):
        return _yang.Schema_Node_validate_value(self, value)

    def child_instantiables(self, options):
        return _yang.Schema_Node_child_instantiables(self, options)

    def find_path(self, path):
        return _yang.Schema_Node_find_path(self, path)

    def xpath_atomize(self, *args):
        return _yang.Schema_Node_xpath_atomize(self, *args)

    def tree_for(self):
        return _yang.Schema_Node_tree_for(self)

    def tree_dfs(self):
        return _yang.Schema_Node_tree_dfs(self)

    def swig_node(self):
        return _yang.Schema_Node_swig_node(self)

    def swig_deleter(self):
        return _yang.Schema_Node_swig_deleter(self)

    def subtype(self):
        return _yang.Schema_Node_subtype(self)
Schema_Node_swigregister = _yang.Schema_Node_swigregister
Schema_Node_swigregister(Schema_Node)

class Schema_Node_Container(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Container, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Container, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Container(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Container
    __del__ = lambda self: None

    def when(self):
        return _yang.Schema_Node_Container_when(self)

    def must(self):
        return _yang.Schema_Node_Container_must(self)

    def ptdf(self):
        return _yang.Schema_Node_Container_ptdf(self)

    def presence(self):
        return _yang.Schema_Node_Container_presence(self)
Schema_Node_Container_swigregister = _yang.Schema_Node_Container_swigregister
Schema_Node_Container_swigregister(Schema_Node_Container)

class Schema_Node_Choice(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Choice, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Choice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Choice(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Choice
    __del__ = lambda self: None

    def when(self):
        return _yang.Schema_Node_Choice_when(self)

    def dflt(self):
        return _yang.Schema_Node_Choice_dflt(self)
Schema_Node_Choice_swigregister = _yang.Schema_Node_Choice_swigregister
Schema_Node_Choice_swigregister(Schema_Node_Choice)

class Schema_Node_Leaf(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Leaf, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Leaf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Leaf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Leaf
    __del__ = lambda self: None

    def backlinks(self):
        return _yang.Schema_Node_Leaf_backlinks(self)

    def when(self):
        return _yang.Schema_Node_Leaf_when(self)

    def type(self):
        return _yang.Schema_Node_Leaf_type(self)

    def units(self):
        return _yang.Schema_Node_Leaf_units(self)

    def dflt(self):
        return _yang.Schema_Node_Leaf_dflt(self)

    def child(self):
        return _yang.Schema_Node_Leaf_child(self)

    def is_key(self):
        return _yang.Schema_Node_Leaf_is_key(self)
Schema_Node_Leaf_swigregister = _yang.Schema_Node_Leaf_swigregister
Schema_Node_Leaf_swigregister(Schema_Node_Leaf)

class Schema_Node_Leaflist(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Leaflist, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Leaflist, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Leaflist(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Leaflist
    __del__ = lambda self: None

    def dflt_size(self):
        return _yang.Schema_Node_Leaflist_dflt_size(self)

    def must_size(self):
        return _yang.Schema_Node_Leaflist_must_size(self)

    def when(self):
        return _yang.Schema_Node_Leaflist_when(self)

    def backlinks(self):
        return _yang.Schema_Node_Leaflist_backlinks(self)

    def must(self):
        return _yang.Schema_Node_Leaflist_must(self)

    def type(self):
        return _yang.Schema_Node_Leaflist_type(self)

    def units(self):
        return _yang.Schema_Node_Leaflist_units(self)

    def dflt(self):
        return _yang.Schema_Node_Leaflist_dflt(self)

    def min(self):
        return _yang.Schema_Node_Leaflist_min(self)

    def max(self):
        return _yang.Schema_Node_Leaflist_max(self)

    def child(self):
        return _yang.Schema_Node_Leaflist_child(self)
Schema_Node_Leaflist_swigregister = _yang.Schema_Node_Leaflist_swigregister
Schema_Node_Leaflist_swigregister(Schema_Node_Leaflist)

class Schema_Node_List(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_List, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_List, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_List(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_List
    __del__ = lambda self: None

    def must_size(self):
        return _yang.Schema_Node_List_must_size(self)

    def tpdf_size(self):
        return _yang.Schema_Node_List_tpdf_size(self)

    def keys_size(self):
        return _yang.Schema_Node_List_keys_size(self)

    def unique_size(self):
        return _yang.Schema_Node_List_unique_size(self)

    def when(self):
        return _yang.Schema_Node_List_when(self)

    def must(self):
        return _yang.Schema_Node_List_must(self)

    def tpdf(self):
        return _yang.Schema_Node_List_tpdf(self)

    def keys(self):
        return _yang.Schema_Node_List_keys(self)

    def unique(self):
        return _yang.Schema_Node_List_unique(self)

    def min(self):
        return _yang.Schema_Node_List_min(self)

    def max(self):
        return _yang.Schema_Node_List_max(self)

    def keys_str(self):
        return _yang.Schema_Node_List_keys_str(self)
Schema_Node_List_swigregister = _yang.Schema_Node_List_swigregister
Schema_Node_List_swigregister(Schema_Node_List)

class Schema_Node_Anydata(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Anydata, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Anydata, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Anydata(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Anydata
    __del__ = lambda self: None

    def must_size(self):
        return _yang.Schema_Node_Anydata_must_size(self)

    def when(self):
        return _yang.Schema_Node_Anydata_when(self)

    def must(self):
        return _yang.Schema_Node_Anydata_must(self)
Schema_Node_Anydata_swigregister = _yang.Schema_Node_Anydata_swigregister
Schema_Node_Anydata_swigregister(Schema_Node_Anydata)

class Schema_Node_Uses(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Uses, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Uses, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Uses(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Uses
    __del__ = lambda self: None

    def augment_size(self):
        return _yang.Schema_Node_Uses_augment_size(self)

    def when(self):
        return _yang.Schema_Node_Uses_when(self)

    def refine(self):
        return _yang.Schema_Node_Uses_refine(self)

    def augment(self):
        return _yang.Schema_Node_Uses_augment(self)

    def grp(self):
        return _yang.Schema_Node_Uses_grp(self)
Schema_Node_Uses_swigregister = _yang.Schema_Node_Uses_swigregister
Schema_Node_Uses_swigregister(Schema_Node_Uses)

class Schema_Node_Grp(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Grp, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Grp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Grp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Grp
    __del__ = lambda self: None

    def tpdf_size(self):
        return _yang.Schema_Node_Grp_tpdf_size(self)

    def tpdf(self):
        return _yang.Schema_Node_Grp_tpdf(self)
Schema_Node_Grp_swigregister = _yang.Schema_Node_Grp_swigregister
Schema_Node_Grp_swigregister(Schema_Node_Grp)

class Schema_Node_Case(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Case, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Case, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Case(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Case
    __del__ = lambda self: None

    def when(self):
        return _yang.Schema_Node_Case_when(self)
Schema_Node_Case_swigregister = _yang.Schema_Node_Case_swigregister
Schema_Node_Case_swigregister(Schema_Node_Case)

class Schema_Node_Inout(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Inout, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Inout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Inout(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Inout
    __del__ = lambda self: None

    def tpdf_size(self):
        return _yang.Schema_Node_Inout_tpdf_size(self)

    def must_size(self):
        return _yang.Schema_Node_Inout_must_size(self)

    def tpdf(self):
        return _yang.Schema_Node_Inout_tpdf(self)

    def must(self):
        return _yang.Schema_Node_Inout_must(self)
Schema_Node_Inout_swigregister = _yang.Schema_Node_Inout_swigregister
Schema_Node_Inout_swigregister(Schema_Node_Inout)

class Schema_Node_Notif(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Notif, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Notif, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Notif(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Notif
    __del__ = lambda self: None

    def tpdf_size(self):
        return _yang.Schema_Node_Notif_tpdf_size(self)

    def must_size(self):
        return _yang.Schema_Node_Notif_must_size(self)

    def tpdf(self):
        return _yang.Schema_Node_Notif_tpdf(self)

    def must(self):
        return _yang.Schema_Node_Notif_must(self)
Schema_Node_Notif_swigregister = _yang.Schema_Node_Notif_swigregister
Schema_Node_Notif_swigregister(Schema_Node_Notif)

class Schema_Node_Rpc_Action(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Rpc_Action, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Rpc_Action, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Rpc_Action(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Rpc_Action
    __del__ = lambda self: None

    def tpdf_size(self):
        return _yang.Schema_Node_Rpc_Action_tpdf_size(self)

    def tpdf(self):
        return _yang.Schema_Node_Rpc_Action_tpdf(self)
Schema_Node_Rpc_Action_swigregister = _yang.Schema_Node_Rpc_Action_swigregister
Schema_Node_Rpc_Action_swigregister(Schema_Node_Rpc_Action)

class Schema_Node_Augment(Schema_Node):
    __swig_setmethods__ = {}
    for _s in [Schema_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema_Node_Augment, name, value)
    __swig_getmethods__ = {}
    for _s in [Schema_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Schema_Node_Augment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _yang.new_Schema_Node_Augment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Schema_Node_Augment
    __del__ = lambda self: None

    def when(self):
        return _yang.Schema_Node_Augment_when(self)

    def target(self):
        return _yang.Schema_Node_Augment_target(self)
Schema_Node_Augment_swigregister = _yang.Schema_Node_Augment_swigregister
Schema_Node_Augment_swigregister(Schema_Node_Augment)

class Substmt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Substmt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Substmt, name)
    __repr__ = _swig_repr

    def __init__(self, substmt, deleter):
        this = _yang.new_Substmt(substmt, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Substmt
    __del__ = lambda self: None

    def stmt(self):
        return _yang.Substmt_stmt(self)

    def offset(self):
        return _yang.Substmt_offset(self)

    def cardinality(self):
        return _yang.Substmt_cardinality(self)
Substmt_swigregister = _yang.Substmt_swigregister
Substmt_swigregister(Substmt)

class Ext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ext, name)
    __repr__ = _swig_repr

    def __init__(self, ext, deleter):
        this = _yang.new_Ext(ext, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Ext
    __del__ = lambda self: None

    def name(self):
        return _yang.Ext_name(self)

    def dsc(self):
        return _yang.Ext_dsc(self)

    def ref(self):
        return _yang.Ext_ref(self)

    def flags(self):
        return _yang.Ext_flags(self)

    def ext_size(self):
        return _yang.Ext_ext_size(self)

    def ext_instance(self):
        return _yang.Ext_ext_instance(self)

    def argument(self):
        return _yang.Ext_argument(self)

    def module(self):
        return _yang.Ext_module(self)
Ext_swigregister = _yang.Ext_swigregister
Ext_swigregister(Ext)

class Refine_Mod_List(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Refine_Mod_List, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Refine_Mod_List, name)
    __repr__ = _swig_repr

    def __init__(self, list, deleter):
        this = _yang.new_Refine_Mod_List(list, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Refine_Mod_List
    __del__ = lambda self: None

    def min(self):
        return _yang.Refine_Mod_List_min(self)

    def max(self):
        return _yang.Refine_Mod_List_max(self)
Refine_Mod_List_swigregister = _yang.Refine_Mod_List_swigregister
Refine_Mod_List_swigregister(Refine_Mod_List)

class Refine_Mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Refine_Mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Refine_Mod, name)
    __repr__ = _swig_repr

    def __init__(self, mod, target_type, deleter):
        this = _yang.new_Refine_Mod(mod, target_type, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Refine_Mod
    __del__ = lambda self: None

    def presence(self):
        return _yang.Refine_Mod_presence(self)

    def list(self):
        return _yang.Refine_Mod_list(self)
Refine_Mod_swigregister = _yang.Refine_Mod_swigregister
Refine_Mod_swigregister(Refine_Mod)

class Refine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Refine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Refine, name)
    __repr__ = _swig_repr

    def __init__(self, refine, deleter):
        this = _yang.new_Refine(refine, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Refine
    __del__ = lambda self: None

    def target_name(self):
        return _yang.Refine_target_name(self)

    def dsc(self):
        return _yang.Refine_dsc(self)

    def ref(self):
        return _yang.Refine_ref(self)

    def flags(self):
        return _yang.Refine_flags(self)

    def ext_size(self):
        return _yang.Refine_ext_size(self)

    def iffeature_size(self):
        return _yang.Refine_iffeature_size(self)

    def target_type(self):
        return _yang.Refine_target_type(self)

    def must_size(self):
        return _yang.Refine_must_size(self)

    def dflt_size(self):
        return _yang.Refine_dflt_size(self)

    def ext(self):
        return _yang.Refine_ext(self)

    def iffeature(self):
        return _yang.Refine_iffeature(self)

    def module(self):
        return _yang.Refine_module(self)

    def must(self):
        return _yang.Refine_must(self)

    def dflt(self):
        return _yang.Refine_dflt(self)

    def mod(self):
        return _yang.Refine_mod(self)
Refine_swigregister = _yang.Refine_swigregister
Refine_swigregister(Refine)

class Deviate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Deviate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Deviate, name)
    __repr__ = _swig_repr

    def __init__(self, deviate, deleter):
        this = _yang.new_Deviate(deviate, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Deviate
    __del__ = lambda self: None

    def mod(self):
        return _yang.Deviate_mod(self)

    def flags(self):
        return _yang.Deviate_flags(self)

    def dflt_size(self):
        return _yang.Deviate_dflt_size(self)

    def ext_size(self):
        return _yang.Deviate_ext_size(self)

    def min_set(self):
        return _yang.Deviate_min_set(self)

    def max_set(self):
        return _yang.Deviate_max_set(self)

    def must_size(self):
        return _yang.Deviate_must_size(self)

    def unique_size(self):
        return _yang.Deviate_unique_size(self)

    def min(self):
        return _yang.Deviate_min(self)

    def max(self):
        return _yang.Deviate_max(self)

    def must(self):
        return _yang.Deviate_must(self)

    def unique(self):
        return _yang.Deviate_unique(self)

    def type(self):
        return _yang.Deviate_type(self)

    def units(self):
        return _yang.Deviate_units(self)

    def dflt(self):
        return _yang.Deviate_dflt(self)

    def ext(self):
        return _yang.Deviate_ext(self)
Deviate_swigregister = _yang.Deviate_swigregister
Deviate_swigregister(Deviate)

class Deviation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Deviation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Deviation, name)
    __repr__ = _swig_repr

    def __init__(self, deviation, deleter):
        this = _yang.new_Deviation(deviation, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Deviation
    __del__ = lambda self: None

    def target_name(self):
        return _yang.Deviation_target_name(self)

    def dsc(self):
        return _yang.Deviation_dsc(self)

    def ref(self):
        return _yang.Deviation_ref(self)

    def orig_node(self):
        return _yang.Deviation_orig_node(self)

    def deviate_size(self):
        return _yang.Deviation_deviate_size(self)

    def ext_size(self):
        return _yang.Deviation_ext_size(self)

    def deviate(self):
        return _yang.Deviation_deviate(self)

    def ext(self):
        return _yang.Deviation_ext(self)
Deviation_swigregister = _yang.Deviation_swigregister
Deviation_swigregister(Deviation)

class Import(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Import, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Import, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, deleter):
        this = _yang.new_Import(arg2, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Import
    __del__ = lambda self: None

    def module(self):
        return _yang.Import_module(self)

    def prefix(self):
        return _yang.Import_prefix(self)

    def rev(self):
        return _yang.Import_rev(self)

    def ext_size(self):
        return _yang.Import_ext_size(self)

    def ext(self):
        return _yang.Import_ext(self)

    def dsc(self):
        return _yang.Import_dsc(self)

    def ref(self):
        return _yang.Import_ref(self)
Import_swigregister = _yang.Import_swigregister
Import_swigregister(Import)

class Include(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Include, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Include, name)
    __repr__ = _swig_repr

    def __init__(self, include, deleter):
        this = _yang.new_Include(include, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Include
    __del__ = lambda self: None

    def submodule(self):
        return _yang.Include_submodule(self)

    def rev(self):
        return _yang.Include_rev(self)

    def ext_size(self):
        return _yang.Include_ext_size(self)

    def ext(self):
        return _yang.Include_ext(self)

    def dsc(self):
        return _yang.Include_dsc(self)

    def ref(self):
        return _yang.Include_ref(self)
Include_swigregister = _yang.Include_swigregister
Include_swigregister(Include)

class Revision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Revision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Revision, name)
    __repr__ = _swig_repr

    def __init__(self, revision, deleter):
        this = _yang.new_Revision(revision, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Revision
    __del__ = lambda self: None

    def date(self):
        return _yang.Revision_date(self)

    def ext_size(self):
        return _yang.Revision_ext_size(self)

    def dsc(self):
        return _yang.Revision_dsc(self)

    def ref(self):
        return _yang.Revision_ref(self)
Revision_swigregister = _yang.Revision_swigregister
Revision_swigregister(Revision)

class Tpdf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tpdf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tpdf, name)
    __repr__ = _swig_repr

    def __init__(self, tpdf, deleter):
        this = _yang.new_Tpdf(tpdf, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Tpdf
    __del__ = lambda self: None

    def name(self):
        return _yang.Tpdf_name(self)

    def dsc(self):
        return _yang.Tpdf_dsc(self)

    def ref(self):
        return _yang.Tpdf_ref(self)

    def flags(self):
        return _yang.Tpdf_flags(self)

    def ext_size(self):
        return _yang.Tpdf_ext_size(self)

    def padding_iffsize(self):
        return _yang.Tpdf_padding_iffsize(self)

    def has_union_leafref(self):
        return _yang.Tpdf_has_union_leafref(self)

    def ext(self):
        return _yang.Tpdf_ext(self)

    def units(self):
        return _yang.Tpdf_units(self)

    def module(self):
        return _yang.Tpdf_module(self)

    def type(self):
        return _yang.Tpdf_type(self)

    def dflt(self):
        return _yang.Tpdf_dflt(self)
Tpdf_swigregister = _yang.Tpdf_swigregister
Tpdf_swigregister(Tpdf)

class Unique(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unique, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Unique, name)
    __repr__ = _swig_repr

    def __init__(self, unique, deleter):
        this = _yang.new_Unique(unique, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Unique
    __del__ = lambda self: None

    def expr(self):
        return _yang.Unique_expr(self)

    def expr_size(self):
        return _yang.Unique_expr_size(self)

    def trg_type(self):
        return _yang.Unique_trg_type(self)
Unique_swigregister = _yang.Unique_swigregister
Unique_swigregister(Unique)

class Feature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Feature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Feature, name)
    __repr__ = _swig_repr

    def __init__(self, feature, arg3):
        this = _yang.new_Feature(feature, arg3)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Feature
    __del__ = lambda self: None

    def name(self):
        return _yang.Feature_name(self)

    def dsc(self):
        return _yang.Feature_dsc(self)

    def ref(self):
        return _yang.Feature_ref(self)

    def flags(self):
        return _yang.Feature_flags(self)

    def ext_size(self):
        return _yang.Feature_ext_size(self)

    def iffeature_size(self):
        return _yang.Feature_iffeature_size(self)

    def ext(self):
        return _yang.Feature_ext(self)

    def iffeature(self):
        return _yang.Feature_iffeature(self)

    def module(self):
        return _yang.Feature_module(self)

    def depfeatures(self):
        return _yang.Feature_depfeatures(self)
Feature_swigregister = _yang.Feature_swigregister
Feature_swigregister(Feature)

class Restr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Restr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Restr, name)
    __repr__ = _swig_repr

    def __init__(self, restr, deleter):
        this = _yang.new_Restr(restr, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Restr
    __del__ = lambda self: None

    def expr(self):
        return _yang.Restr_expr(self)

    def dsc(self):
        return _yang.Restr_dsc(self)

    def ref(self):
        return _yang.Restr_ref(self)

    def eapptag(self):
        return _yang.Restr_eapptag(self)

    def emsg(self):
        return _yang.Restr_emsg(self)

    def ext(self):
        return _yang.Restr_ext(self)

    def ext_size(self):
        return _yang.Restr_ext_size(self)
Restr_swigregister = _yang.Restr_swigregister
Restr_swigregister(Restr)

class When(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, When, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, When, name)
    __repr__ = _swig_repr

    def __init__(self, when, deleter=0):
        this = _yang.new_When(when, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_When
    __del__ = lambda self: None

    def cond(self):
        return _yang.When_cond(self)

    def dsc(self):
        return _yang.When_dsc(self)

    def ref(self):
        return _yang.When_ref(self)

    def ext(self):
        return _yang.When_ext(self)

    def ext_size(self):
        return _yang.When_ext_size(self)
When_swigregister = _yang.When_swigregister
When_swigregister(When)

class Ident(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ident, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ident, name)
    __repr__ = _swig_repr

    def __init__(self, ident, deleter):
        this = _yang.new_Ident(ident, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Ident
    __del__ = lambda self: None

    def name(self):
        return _yang.Ident_name(self)

    def dsc(self):
        return _yang.Ident_dsc(self)

    def ref(self):
        return _yang.Ident_ref(self)

    def flags(self):
        return _yang.Ident_flags(self)

    def ext_size(self):
        return _yang.Ident_ext_size(self)

    def iffeature_size(self):
        return _yang.Ident_iffeature_size(self)

    def base_size(self):
        return _yang.Ident_base_size(self)

    def ext(self):
        return _yang.Ident_ext(self)

    def iffeature(self):
        return _yang.Ident_iffeature(self)

    def module(self):
        return _yang.Ident_module(self)

    def base(self):
        return _yang.Ident_base(self)

    def der(self):
        return _yang.Ident_der(self)
Ident_swigregister = _yang.Ident_swigregister
Ident_swigregister(Ident)

class Xml_Ns(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xml_Ns, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xml_Ns, name)
    __repr__ = _swig_repr

    def __init__(self, ns, deleter):
        this = _yang.new_Xml_Ns(ns, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Xml_Ns
    __del__ = lambda self: None

    def type(self):
        return _yang.Xml_Ns_type(self)

    def next(self):
        return _yang.Xml_Ns_next(self)

    def prefix(self):
        return _yang.Xml_Ns_prefix(self)

    def value(self):
        return _yang.Xml_Ns_value(self)
Xml_Ns_swigregister = _yang.Xml_Ns_swigregister
Xml_Ns_swigregister(Xml_Ns)

class Xml_Attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xml_Attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xml_Attr, name)
    __repr__ = _swig_repr

    def __init__(self, attr, deleter):
        this = _yang.new_Xml_Attr(attr, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Xml_Attr
    __del__ = lambda self: None

    def type(self):
        return _yang.Xml_Attr_type(self)

    def next(self):
        return _yang.Xml_Attr_next(self)

    def ns(self):
        return _yang.Xml_Attr_ns(self)

    def name(self):
        return _yang.Xml_Attr_name(self)

    def value(self):
        return _yang.Xml_Attr_value(self)
Xml_Attr_swigregister = _yang.Xml_Attr_swigregister
Xml_Attr_swigregister(Xml_Attr)

class Xml_Elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xml_Elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xml_Elem, name)
    __repr__ = _swig_repr

    def __init__(self, context, elem, deleter):
        this = _yang.new_Xml_Elem(context, elem, deleter)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _yang.delete_Xml_Elem
    __del__ = lambda self: None

    def flags(self):
        return _yang.Xml_Elem_flags(self)

    def parent(self):
        return _yang.Xml_Elem_parent(self)

    def attr(self):
        return _yang.Xml_Elem_attr(self)

    def child(self):
        return _yang.Xml_Elem_child(self)

    def next(self):
        return _yang.Xml_Elem_next(self)

    def prev(self):
        return _yang.Xml_Elem_prev(self)

    def name(self):
        return _yang.Xml_Elem_name(self)

    def ns(self):
        return _yang.Xml_Elem_ns(self)

    def content(self):
        return _yang.Xml_Elem_content(self)

    def get_attr(self, name, ns=None):
        return _yang.Xml_Elem_get_attr(self, name, ns)

    def get_ns(self, prefix):
        return _yang.Xml_Elem_get_ns(self, prefix)

    def print_mem(self, options):
        return _yang.Xml_Elem_print_mem(self, options)

    def tree_for(self):
        return _yang.Xml_Elem_tree_for(self)

    def tree_dfs(self):
        return _yang.Xml_Elem_tree_dfs(self)
Xml_Elem_swigregister = _yang.Xml_Elem_swigregister
Xml_Elem_swigregister(Xml_Elem)

LY_VERSION_MAJOR = _yang.LY_VERSION_MAJOR
LY_VERSION_MINOR = _yang.LY_VERSION_MINOR
LY_VERSION_MICRO = _yang.LY_VERSION_MICRO
LY_VERSION = _yang.LY_VERSION
LY_CTX_ALLIMPLEMENTED = _yang.LY_CTX_ALLIMPLEMENTED
LY_CTX_TRUSTED = _yang.LY_CTX_TRUSTED
LY_CTX_NOYANGLIBRARY = _yang.LY_CTX_NOYANGLIBRARY
LY_CTX_DISABLE_SEARCHDIRS = _yang.LY_CTX_DISABLE_SEARCHDIRS
LY_CTX_DISABLE_SEARCHDIR_CWD = _yang.LY_CTX_DISABLE_SEARCHDIR_CWD
LY_CTX_PREFER_SEARCHDIRS = _yang.LY_CTX_PREFER_SEARCHDIRS
LY_MODCLB_NOT_IMPLEMENTED = _yang.LY_MODCLB_NOT_IMPLEMENTED
LY_SET_OPT_USEASLIST = _yang.LY_SET_OPT_USEASLIST
LYP_WITHSIBLINGS = _yang.LYP_WITHSIBLINGS
LYP_FORMAT = _yang.LYP_FORMAT
LYP_KEEPEMPTYCONT = _yang.LYP_KEEPEMPTYCONT
LYP_WD_MASK = _yang.LYP_WD_MASK
LYP_WD_EXPLICIT = _yang.LYP_WD_EXPLICIT
LYP_WD_TRIM = _yang.LYP_WD_TRIM
LYP_WD_ALL = _yang.LYP_WD_ALL
LYP_WD_ALL_TAG = _yang.LYP_WD_ALL_TAG
LYP_WD_IMPL_TAG = _yang.LYP_WD_IMPL_TAG
LYP_NETCONF = _yang.LYP_NETCONF
LY_LLERR = _yang.LY_LLERR
LY_LLWRN = _yang.LY_LLWRN
LY_LLVRB = _yang.LY_LLVRB
LY_LLDBG = _yang.LY_LLDBG
LY_LOLOG = _yang.LY_LOLOG
LY_LOSTORE = _yang.LY_LOSTORE
LY_LOSTORE_LAST = _yang.LY_LOSTORE_LAST
LY_LDGDICT = _yang.LY_LDGDICT
LY_LDGYANG = _yang.LY_LDGYANG
LY_LDGYIN = _yang.LY_LDGYIN
LY_LDGXPATH = _yang.LY_LDGXPATH
LY_LDGDIFF = _yang.LY_LDGDIFF
LY_LDGAPI = _yang.LY_LDGAPI
LY_LDGHASH = _yang.LY_LDGHASH
LY_SUCCESS = _yang.LY_SUCCESS
LY_EMEM = _yang.LY_EMEM
LY_ESYS = _yang.LY_ESYS
LY_EINVAL = _yang.LY_EINVAL
LY_EINT = _yang.LY_EINT
LY_EVALID = _yang.LY_EVALID
LY_EPLUGIN = _yang.LY_EPLUGIN
LYVE_SUCCESS = _yang.LYVE_SUCCESS
LYVE_XML_MISS = _yang.LYVE_XML_MISS
LYVE_XML_INVAL = _yang.LYVE_XML_INVAL
LYVE_XML_INCHAR = _yang.LYVE_XML_INCHAR
LYVE_EOF = _yang.LYVE_EOF
LYVE_INSTMT = _yang.LYVE_INSTMT
LYVE_INPAR = _yang.LYVE_INPAR
LYVE_INID = _yang.LYVE_INID
LYVE_INDATE = _yang.LYVE_INDATE
LYVE_INARG = _yang.LYVE_INARG
LYVE_MISSSTMT = _yang.LYVE_MISSSTMT
LYVE_MISSARG = _yang.LYVE_MISSARG
LYVE_TOOMANY = _yang.LYVE_TOOMANY
LYVE_DUPID = _yang.LYVE_DUPID
LYVE_DUPLEAFLIST = _yang.LYVE_DUPLEAFLIST
LYVE_DUPLIST = _yang.LYVE_DUPLIST
LYVE_NOUNIQ = _yang.LYVE_NOUNIQ
LYVE_ENUM_INVAL = _yang.LYVE_ENUM_INVAL
LYVE_ENUM_INNAME = _yang.LYVE_ENUM_INNAME
LYVE_ENUM_WS = _yang.LYVE_ENUM_WS
LYVE_BITS_INVAL = _yang.LYVE_BITS_INVAL
LYVE_BITS_INNAME = _yang.LYVE_BITS_INNAME
LYVE_INMOD = _yang.LYVE_INMOD
LYVE_KEY_NLEAF = _yang.LYVE_KEY_NLEAF
LYVE_KEY_TYPE = _yang.LYVE_KEY_TYPE
LYVE_KEY_CONFIG = _yang.LYVE_KEY_CONFIG
LYVE_KEY_MISS = _yang.LYVE_KEY_MISS
LYVE_KEY_DUP = _yang.LYVE_KEY_DUP
LYVE_INREGEX = _yang.LYVE_INREGEX
LYVE_INRESOLV = _yang.LYVE_INRESOLV
LYVE_INSTATUS = _yang.LYVE_INSTATUS
LYVE_CIRC_LEAFREFS = _yang.LYVE_CIRC_LEAFREFS
LYVE_CIRC_FEATURES = _yang.LYVE_CIRC_FEATURES
LYVE_CIRC_IMPORTS = _yang.LYVE_CIRC_IMPORTS
LYVE_CIRC_INCLUDES = _yang.LYVE_CIRC_INCLUDES
LYVE_INVER = _yang.LYVE_INVER
LYVE_SUBMODULE = _yang.LYVE_SUBMODULE
LYVE_OBSDATA = _yang.LYVE_OBSDATA
LYVE_NORESOLV = _yang.LYVE_NORESOLV
LYVE_INELEM = _yang.LYVE_INELEM
LYVE_MISSELEM = _yang.LYVE_MISSELEM
LYVE_INVAL = _yang.LYVE_INVAL
LYVE_INMETA = _yang.LYVE_INMETA
LYVE_INATTR = _yang.LYVE_INATTR
LYVE_MISSATTR = _yang.LYVE_MISSATTR
LYVE_NOCONSTR = _yang.LYVE_NOCONSTR
LYVE_INCHAR = _yang.LYVE_INCHAR
LYVE_INPRED = _yang.LYVE_INPRED
LYVE_MCASEDATA = _yang.LYVE_MCASEDATA
LYVE_NOMUST = _yang.LYVE_NOMUST
LYVE_NOWHEN = _yang.LYVE_NOWHEN
LYVE_INORDER = _yang.LYVE_INORDER
LYVE_INWHEN = _yang.LYVE_INWHEN
LYVE_NOMIN = _yang.LYVE_NOMIN
LYVE_NOMAX = _yang.LYVE_NOMAX
LYVE_NOREQINS = _yang.LYVE_NOREQINS
LYVE_NOLEAFREF = _yang.LYVE_NOLEAFREF
LYVE_NOMANDCHOICE = _yang.LYVE_NOMANDCHOICE
LYVE_XPATH_INTOK = _yang.LYVE_XPATH_INTOK
LYVE_XPATH_EOF = _yang.LYVE_XPATH_EOF
LYVE_XPATH_INOP = _yang.LYVE_XPATH_INOP
LYVE_XPATH_INCTX = _yang.LYVE_XPATH_INCTX
LYVE_XPATH_INMOD = _yang.LYVE_XPATH_INMOD
LYVE_XPATH_INFUNC = _yang.LYVE_XPATH_INFUNC
LYVE_XPATH_INARGCOUNT = _yang.LYVE_XPATH_INARGCOUNT
LYVE_XPATH_INARGTYPE = _yang.LYVE_XPATH_INARGTYPE
LYVE_XPATH_DUMMY = _yang.LYVE_XPATH_DUMMY
LYVE_XPATH_NOEND = _yang.LYVE_XPATH_NOEND
LYVE_PATH_INCHAR = _yang.LYVE_PATH_INCHAR
LYVE_PATH_INMOD = _yang.LYVE_PATH_INMOD
LYVE_PATH_MISSMOD = _yang.LYVE_PATH_MISSMOD
LYVE_PATH_INNODE = _yang.LYVE_PATH_INNODE
LYVE_PATH_INKEY = _yang.LYVE_PATH_INKEY
LYVE_PATH_MISSKEY = _yang.LYVE_PATH_MISSKEY
LYVE_PATH_INIDENTREF = _yang.LYVE_PATH_INIDENTREF
LYVE_PATH_EXISTS = _yang.LYVE_PATH_EXISTS
LYVE_PATH_MISSPAR = _yang.LYVE_PATH_MISSPAR
LYVE_PATH_PREDTOOMANY = _yang.LYVE_PATH_PREDTOOMANY
LY_REV_SIZE = _yang.LY_REV_SIZE
LYS_IN_UNKNOWN = _yang.LYS_IN_UNKNOWN
LYS_IN_YANG = _yang.LYS_IN_YANG
LYS_IN_YIN = _yang.LYS_IN_YIN
LYS_OUT_UNKNOWN = _yang.LYS_OUT_UNKNOWN
LYS_OUT_YANG = _yang.LYS_OUT_YANG
LYS_OUT_YIN = _yang.LYS_OUT_YIN
LYS_OUT_TREE = _yang.LYS_OUT_TREE
LYS_OUT_INFO = _yang.LYS_OUT_INFO
LYS_OUT_JSON = _yang.LYS_OUT_JSON
LYS_OUTOPT_TREE_RFC = _yang.LYS_OUTOPT_TREE_RFC
LYS_OUTOPT_TREE_GROUPING = _yang.LYS_OUTOPT_TREE_GROUPING
LYS_OUTOPT_TREE_USES = _yang.LYS_OUTOPT_TREE_USES
LYS_OUTOPT_TREE_NO_LEAFREF = _yang.LYS_OUTOPT_TREE_NO_LEAFREF
LYS_YANG = _yang.LYS_YANG
LYS_YIN = _yang.LYS_YIN
LYS_UNKNOWN = _yang.LYS_UNKNOWN
LYS_CONTAINER = _yang.LYS_CONTAINER
LYS_CHOICE = _yang.LYS_CHOICE
LYS_LEAF = _yang.LYS_LEAF
LYS_LEAFLIST = _yang.LYS_LEAFLIST
LYS_LIST = _yang.LYS_LIST
LYS_ANYXML = _yang.LYS_ANYXML
LYS_CASE = _yang.LYS_CASE
LYS_NOTIF = _yang.LYS_NOTIF
LYS_RPC = _yang.LYS_RPC
LYS_INPUT = _yang.LYS_INPUT
LYS_OUTPUT = _yang.LYS_OUTPUT
LYS_GROUPING = _yang.LYS_GROUPING
LYS_USES = _yang.LYS_USES
LYS_AUGMENT = _yang.LYS_AUGMENT
LYS_ACTION = _yang.LYS_ACTION
LYS_ANYDATA = _yang.LYS_ANYDATA
LYS_EXT = _yang.LYS_EXT
LYS_NO_RPC_NOTIF_NODE = _yang.LYS_NO_RPC_NOTIF_NODE
LYS_ANY = _yang.LYS_ANY
LY_STMT_NODE = _yang.LY_STMT_NODE
LY_STMT_UNKNOWN = _yang.LY_STMT_UNKNOWN
LY_STMT_ARGUMENT = _yang.LY_STMT_ARGUMENT
LY_STMT_BASE = _yang.LY_STMT_BASE
LY_STMT_BELONGSTO = _yang.LY_STMT_BELONGSTO
LY_STMT_CONTACT = _yang.LY_STMT_CONTACT
LY_STMT_DEFAULT = _yang.LY_STMT_DEFAULT
LY_STMT_DESCRIPTION = _yang.LY_STMT_DESCRIPTION
LY_STMT_ERRTAG = _yang.LY_STMT_ERRTAG
LY_STMT_ERRMSG = _yang.LY_STMT_ERRMSG
LY_STMT_KEY = _yang.LY_STMT_KEY
LY_STMT_NAMESPACE = _yang.LY_STMT_NAMESPACE
LY_STMT_ORGANIZATION = _yang.LY_STMT_ORGANIZATION
LY_STMT_PATH = _yang.LY_STMT_PATH
LY_STMT_PREFIX = _yang.LY_STMT_PREFIX
LY_STMT_PRESENCE = _yang.LY_STMT_PRESENCE
LY_STMT_REFERENCE = _yang.LY_STMT_REFERENCE
LY_STMT_REVISIONDATE = _yang.LY_STMT_REVISIONDATE
LY_STMT_UNITS = _yang.LY_STMT_UNITS
LY_STMT_VALUE = _yang.LY_STMT_VALUE
LY_STMT_VERSION = _yang.LY_STMT_VERSION
LY_STMT_MODIFIER = _yang.LY_STMT_MODIFIER
LY_STMT_REQINSTANCE = _yang.LY_STMT_REQINSTANCE
LY_STMT_YINELEM = _yang.LY_STMT_YINELEM
LY_STMT_CONFIG = _yang.LY_STMT_CONFIG
LY_STMT_MANDATORY = _yang.LY_STMT_MANDATORY
LY_STMT_ORDEREDBY = _yang.LY_STMT_ORDEREDBY
LY_STMT_STATUS = _yang.LY_STMT_STATUS
LY_STMT_DIGITS = _yang.LY_STMT_DIGITS
LY_STMT_MAX = _yang.LY_STMT_MAX
LY_STMT_MIN = _yang.LY_STMT_MIN
LY_STMT_POSITION = _yang.LY_STMT_POSITION
LY_STMT_UNIQUE = _yang.LY_STMT_UNIQUE
LY_STMT_MODULE = _yang.LY_STMT_MODULE
LY_STMT_ACTION = _yang.LY_STMT_ACTION
LY_STMT_ANYDATA = _yang.LY_STMT_ANYDATA
LY_STMT_ANYXML = _yang.LY_STMT_ANYXML
LY_STMT_CASE = _yang.LY_STMT_CASE
LY_STMT_CHOICE = _yang.LY_STMT_CHOICE
LY_STMT_CONTAINER = _yang.LY_STMT_CONTAINER
LY_STMT_GROUPING = _yang.LY_STMT_GROUPING
LY_STMT_INPUT = _yang.LY_STMT_INPUT
LY_STMT_LEAF = _yang.LY_STMT_LEAF
LY_STMT_LEAFLIST = _yang.LY_STMT_LEAFLIST
LY_STMT_LIST = _yang.LY_STMT_LIST
LY_STMT_NOTIFICATION = _yang.LY_STMT_NOTIFICATION
LY_STMT_OUTPUT = _yang.LY_STMT_OUTPUT
LY_STMT_USES = _yang.LY_STMT_USES
LY_STMT_TYPEDEF = _yang.LY_STMT_TYPEDEF
LY_STMT_TYPE = _yang.LY_STMT_TYPE
LY_STMT_IFFEATURE = _yang.LY_STMT_IFFEATURE
LY_STMT_LENGTH = _yang.LY_STMT_LENGTH
LY_STMT_MUST = _yang.LY_STMT_MUST
LY_STMT_PATTERN = _yang.LY_STMT_PATTERN
LY_STMT_RANGE = _yang.LY_STMT_RANGE
LY_STMT_WHEN = _yang.LY_STMT_WHEN
LY_STMT_REVISION = _yang.LY_STMT_REVISION
LY_STMT_SUBMODULE = _yang.LY_STMT_SUBMODULE
LY_STMT_RPC = _yang.LY_STMT_RPC
LY_STMT_BIT = _yang.LY_STMT_BIT
LY_STMT_ENUM = _yang.LY_STMT_ENUM
LY_STMT_REFINE = _yang.LY_STMT_REFINE
LY_STMT_AUGMENT = _yang.LY_STMT_AUGMENT
LY_STMT_DEVIATE = _yang.LY_STMT_DEVIATE
LY_STMT_DEVIATION = _yang.LY_STMT_DEVIATION
LY_STMT_EXTENSION = _yang.LY_STMT_EXTENSION
LY_STMT_FEATURE = _yang.LY_STMT_FEATURE
LY_STMT_IDENTITY = _yang.LY_STMT_IDENTITY
LY_STMT_IMPORT = _yang.LY_STMT_IMPORT
LY_STMT_INCLUDE = _yang.LY_STMT_INCLUDE
LY_STMT_CARD_OPT = _yang.LY_STMT_CARD_OPT
LY_STMT_CARD_MAND = _yang.LY_STMT_CARD_MAND
LY_STMT_CARD_SOME = _yang.LY_STMT_CARD_SOME
LY_STMT_CARD_ANY = _yang.LY_STMT_CARD_ANY
LYEXT_ERR = _yang.LYEXT_ERR
LYEXT_FLAG = _yang.LYEXT_FLAG
LYEXT_COMPLEX = _yang.LYEXT_COMPLEX
LYEXT_OPT_INHERIT = _yang.LYEXT_OPT_INHERIT
LYEXT_OPT_YANG = _yang.LYEXT_OPT_YANG
LYEXT_OPT_CONTENT = _yang.LYEXT_OPT_CONTENT
LYEXT_OPT_VALID = _yang.LYEXT_OPT_VALID
LYEXT_OPT_VALID_SUBTREE = _yang.LYEXT_OPT_VALID_SUBTREE
LYEXT_OPT_PLUGIN1 = _yang.LYEXT_OPT_PLUGIN1
LYEXT_OPT_PLUGIN2 = _yang.LYEXT_OPT_PLUGIN2
LYEXT_OPT_PLUGIN3 = _yang.LYEXT_OPT_PLUGIN3
LYEXT_OPT_PLUGIN4 = _yang.LYEXT_OPT_PLUGIN4
LYEXT_OPT_PLUGIN5 = _yang.LYEXT_OPT_PLUGIN5
LYEXT_OPT_PLUGIN6 = _yang.LYEXT_OPT_PLUGIN6
LYEXT_OPT_PLUGIN7 = _yang.LYEXT_OPT_PLUGIN7
LYEXT_OPT_PLUGIN8 = _yang.LYEXT_OPT_PLUGIN8
LYS_VERSION_UNDEF = _yang.LYS_VERSION_UNDEF
LYS_VERSION_1 = _yang.LYS_VERSION_1
LYS_VERSION_1_1 = _yang.LYS_VERSION_1_1
LY_TYPE_DER = _yang.LY_TYPE_DER
LY_TYPE_BINARY = _yang.LY_TYPE_BINARY
LY_TYPE_BITS = _yang.LY_TYPE_BITS
LY_TYPE_BOOL = _yang.LY_TYPE_BOOL
LY_TYPE_DEC64 = _yang.LY_TYPE_DEC64
LY_TYPE_EMPTY = _yang.LY_TYPE_EMPTY
LY_TYPE_ENUM = _yang.LY_TYPE_ENUM
LY_TYPE_IDENT = _yang.LY_TYPE_IDENT
LY_TYPE_INST = _yang.LY_TYPE_INST
LY_TYPE_LEAFREF = _yang.LY_TYPE_LEAFREF
LY_TYPE_STRING = _yang.LY_TYPE_STRING
LY_TYPE_UNION = _yang.LY_TYPE_UNION
LY_TYPE_INT8 = _yang.LY_TYPE_INT8
LY_TYPE_UINT8 = _yang.LY_TYPE_UINT8
LY_TYPE_INT16 = _yang.LY_TYPE_INT16
LY_TYPE_UINT16 = _yang.LY_TYPE_UINT16
LY_TYPE_INT32 = _yang.LY_TYPE_INT32
LY_TYPE_UINT32 = _yang.LY_TYPE_UINT32
LY_TYPE_INT64 = _yang.LY_TYPE_INT64
LY_TYPE_UINT64 = _yang.LY_TYPE_UINT64
LY_TYPE_UNKNOWN = _yang.LY_TYPE_UNKNOWN
LY_DATA_TYPE_COUNT = _yang.LY_DATA_TYPE_COUNT
LYS_IFF_NOT = _yang.LYS_IFF_NOT
LYS_IFF_AND = _yang.LYS_IFF_AND
LYS_IFF_OR = _yang.LYS_IFF_OR
LYS_IFF_F = _yang.LYS_IFF_F
LYS_CONFIG_W = _yang.LYS_CONFIG_W
LYS_CONFIG_R = _yang.LYS_CONFIG_R
LYS_CONFIG_SET = _yang.LYS_CONFIG_SET
LYS_CONFIG_MASK = _yang.LYS_CONFIG_MASK
LYS_STATUS_CURR = _yang.LYS_STATUS_CURR
LYS_STATUS_DEPRC = _yang.LYS_STATUS_DEPRC
LYS_STATUS_OBSLT = _yang.LYS_STATUS_OBSLT
LYS_STATUS_MASK = _yang.LYS_STATUS_MASK
LYS_RFN_MAXSET = _yang.LYS_RFN_MAXSET
LYS_RFN_MINSET = _yang.LYS_RFN_MINSET
LYS_MAND_TRUE = _yang.LYS_MAND_TRUE
LYS_MAND_FALSE = _yang.LYS_MAND_FALSE
LYS_INCL_STATUS = _yang.LYS_INCL_STATUS
LYS_MAND_MASK = _yang.LYS_MAND_MASK
LYS_USERORDERED = _yang.LYS_USERORDERED
LYS_FENABLED = _yang.LYS_FENABLED
LYS_UNIQUE = _yang.LYS_UNIQUE
LYS_AUTOASSIGNED = _yang.LYS_AUTOASSIGNED
LYS_USESGRP = _yang.LYS_USESGRP
LYS_IMPLICIT = _yang.LYS_IMPLICIT
LYS_XPCONF_DEP = _yang.LYS_XPCONF_DEP
LYS_XPSTATE_DEP = _yang.LYS_XPSTATE_DEP
LYS_LEAFREF_DEP = _yang.LYS_LEAFREF_DEP
LYS_DFLTJSON = _yang.LYS_DFLTJSON
LYS_NOTAPPLIED = _yang.LYS_NOTAPPLIED
LYS_YINELEM = _yang.LYS_YINELEM
LYS_VALID_EXT = _yang.LYS_VALID_EXT
LYS_VALID_EXT_SUBTREE = _yang.LYS_VALID_EXT_SUBTREE
LYS_NODE_HASH_COUNT = _yang.LYS_NODE_HASH_COUNT
LY_DEVIATE_NO = _yang.LY_DEVIATE_NO
LY_DEVIATE_ADD = _yang.LY_DEVIATE_ADD
LY_DEVIATE_RPL = _yang.LY_DEVIATE_RPL
LY_DEVIATE_DEL = _yang.LY_DEVIATE_DEL
LYS_GETNEXT_WITHCHOICE = _yang.LYS_GETNEXT_WITHCHOICE
LYS_GETNEXT_WITHCASE = _yang.LYS_GETNEXT_WITHCASE
LYS_GETNEXT_WITHGROUPING = _yang.LYS_GETNEXT_WITHGROUPING
LYS_GETNEXT_WITHINOUT = _yang.LYS_GETNEXT_WITHINOUT
LYS_GETNEXT_WITHUSES = _yang.LYS_GETNEXT_WITHUSES
LYS_GETNEXT_INTOUSES = _yang.LYS_GETNEXT_INTOUSES
LYS_GETNEXT_INTONPCONT = _yang.LYS_GETNEXT_INTONPCONT
LYS_GETNEXT_PARENTUSES = _yang.LYS_GETNEXT_PARENTUSES
LYS_GETNEXT_NOSTATECHECK = _yang.LYS_GETNEXT_NOSTATECHECK
LYXP_NODE_ROOT = _yang.LYXP_NODE_ROOT
LYXP_NODE_ROOT_CONFIG = _yang.LYXP_NODE_ROOT_CONFIG
LYXP_NODE_ELEM = _yang.LYXP_NODE_ELEM
LYXP_NODE_TEXT = _yang.LYXP_NODE_TEXT
LYXP_NODE_ATTR = _yang.LYXP_NODE_ATTR
LYXP_NODE_NONE = _yang.LYXP_NODE_NONE
LYXP_MUST = _yang.LYXP_MUST
LYXP_WHEN = _yang.LYXP_WHEN
LYXP_RECURSIVE = _yang.LYXP_RECURSIVE
LYXP_NO_LOCAL = _yang.LYXP_NO_LOCAL
LYS_PATH_FIRST_PREFIX = _yang.LYS_PATH_FIRST_PREFIX
LYD_UNKNOWN = _yang.LYD_UNKNOWN
LYD_XML = _yang.LYD_XML
LYD_JSON = _yang.LYD_JSON
LYD_LYB = _yang.LYD_LYB
LYD_ANYDATA_CONSTSTRING = _yang.LYD_ANYDATA_CONSTSTRING
LYD_ANYDATA_STRING = _yang.LYD_ANYDATA_STRING
LYD_ANYDATA_JSON = _yang.LYD_ANYDATA_JSON
LYD_ANYDATA_JSOND = _yang.LYD_ANYDATA_JSOND
LYD_ANYDATA_SXML = _yang.LYD_ANYDATA_SXML
LYD_ANYDATA_SXMLD = _yang.LYD_ANYDATA_SXMLD
LYD_ANYDATA_XML = _yang.LYD_ANYDATA_XML
LYD_ANYDATA_DATATREE = _yang.LYD_ANYDATA_DATATREE
LYD_ANYDATA_LYB = _yang.LYD_ANYDATA_LYB
LYD_ANYDATA_LYBD = _yang.LYD_ANYDATA_LYBD
LYD_VAL_OK = _yang.LYD_VAL_OK
LYD_VAL_DUP = _yang.LYD_VAL_DUP
LYD_VAL_UNIQUE = _yang.LYD_VAL_UNIQUE
LYD_VAL_MAND = _yang.LYD_VAL_MAND
LYD_VAL_LEAFREF = _yang.LYD_VAL_LEAFREF
LYD_VAL_INUSE = _yang.LYD_VAL_INUSE
LY_VALUE_UNRES = _yang.LY_VALUE_UNRES
LY_VALUE_USER = _yang.LY_VALUE_USER
LYD_DIFF_END = _yang.LYD_DIFF_END
LYD_DIFF_DELETED = _yang.LYD_DIFF_DELETED
LYD_DIFF_CHANGED = _yang.LYD_DIFF_CHANGED
LYD_DIFF_MOVEDAFTER1 = _yang.LYD_DIFF_MOVEDAFTER1
LYD_DIFF_CREATED = _yang.LYD_DIFF_CREATED
LYD_DIFF_MOVEDAFTER2 = _yang.LYD_DIFF_MOVEDAFTER2
LYD_DIFFOPT_NOSIBLINGS = _yang.LYD_DIFFOPT_NOSIBLINGS
LYD_DIFFOPT_WITHDEFAULTS = _yang.LYD_DIFFOPT_WITHDEFAULTS
LYD_OPT_DATA = _yang.LYD_OPT_DATA
LYD_OPT_CONFIG = _yang.LYD_OPT_CONFIG
LYD_OPT_GET = _yang.LYD_OPT_GET
LYD_OPT_GETCONFIG = _yang.LYD_OPT_GETCONFIG
LYD_OPT_EDIT = _yang.LYD_OPT_EDIT
LYD_OPT_RPC = _yang.LYD_OPT_RPC
LYD_OPT_RPCREPLY = _yang.LYD_OPT_RPCREPLY
LYD_OPT_NOTIF = _yang.LYD_OPT_NOTIF
LYD_OPT_NOTIF_FILTER = _yang.LYD_OPT_NOTIF_FILTER
LYD_OPT_TYPEMASK = _yang.LYD_OPT_TYPEMASK
LYD_OPT_STRICT = _yang.LYD_OPT_STRICT
LYD_OPT_DESTRUCT = _yang.LYD_OPT_DESTRUCT
LYD_OPT_OBSOLETE = _yang.LYD_OPT_OBSOLETE
LYD_OPT_NOSIBLINGS = _yang.LYD_OPT_NOSIBLINGS
LYD_OPT_TRUSTED = _yang.LYD_OPT_TRUSTED
LYD_OPT_WHENAUTODEL = _yang.LYD_OPT_WHENAUTODEL
LYD_OPT_NOEXTDEPS = _yang.LYD_OPT_NOEXTDEPS
LYD_OPT_DATA_NO_YANGLIB = _yang.LYD_OPT_DATA_NO_YANGLIB
LYD_OPT_DATA_ADD_YANGLIB = _yang.LYD_OPT_DATA_ADD_YANGLIB
LYD_OPT_VAL_DIFF = _yang.LYD_OPT_VAL_DIFF
LYD_OPT_LYB_MOD_UPDATE = _yang.LYD_OPT_LYB_MOD_UPDATE
LYD_OPT_DATA_TEMPLATE = _yang.LYD_OPT_DATA_TEMPLATE
LYD_PATH_OPT_UPDATE = _yang.LYD_PATH_OPT_UPDATE
LYD_PATH_OPT_NOPARENT = _yang.LYD_PATH_OPT_NOPARENT
LYD_PATH_OPT_OUTPUT = _yang.LYD_PATH_OPT_OUTPUT
LYD_PATH_OPT_DFLT = _yang.LYD_PATH_OPT_DFLT
LYD_PATH_OPT_NOPARENTRET = _yang.LYD_PATH_OPT_NOPARENTRET
LYD_PATH_OPT_EDIT = _yang.LYD_PATH_OPT_EDIT
LYD_DUP_OPT_RECURSIVE = _yang.LYD_DUP_OPT_RECURSIVE
LYD_DUP_OPT_NO_ATTR = _yang.LYD_DUP_OPT_NO_ATTR
LYD_DUP_OPT_WITH_PARENTS = _yang.LYD_DUP_OPT_WITH_PARENTS
LYD_DUP_OPT_WITH_KEYS = _yang.LYD_DUP_OPT_WITH_KEYS
LYD_DUP_OPT_WITH_WHEN = _yang.LYD_DUP_OPT_WITH_WHEN
LYD_OPT_EXPLICIT = _yang.LYD_OPT_EXPLICIT
LYEXT_API_VERSION = _yang.LYEXT_API_VERSION
LYEXT_PAR_MODULE = _yang.LYEXT_PAR_MODULE
LYEXT_PAR_NODE = _yang.LYEXT_PAR_NODE
LYEXT_PAR_TPDF = _yang.LYEXT_PAR_TPDF
LYEXT_PAR_TYPE = _yang.LYEXT_PAR_TYPE
LYEXT_PAR_TYPE_BIT = _yang.LYEXT_PAR_TYPE_BIT
LYEXT_PAR_TYPE_ENUM = _yang.LYEXT_PAR_TYPE_ENUM
LYEXT_PAR_FEATURE = _yang.LYEXT_PAR_FEATURE
LYEXT_PAR_RESTR = _yang.LYEXT_PAR_RESTR
LYEXT_PAR_WHEN = _yang.LYEXT_PAR_WHEN
LYEXT_PAR_IDENT = _yang.LYEXT_PAR_IDENT
LYEXT_PAR_EXT = _yang.LYEXT_PAR_EXT
LYEXT_PAR_EXTINST = _yang.LYEXT_PAR_EXTINST
LYEXT_PAR_REFINE = _yang.LYEXT_PAR_REFINE
LYEXT_PAR_DEVIATION = _yang.LYEXT_PAR_DEVIATION
LYEXT_PAR_DEVIATE = _yang.LYEXT_PAR_DEVIATE
LYEXT_PAR_IMPORT = _yang.LYEXT_PAR_IMPORT
LYEXT_PAR_INCLUDE = _yang.LYEXT_PAR_INCLUDE
LYEXT_PAR_REVISION = _yang.LYEXT_PAR_REVISION
LYEXT_PAR_IFFEATURE = _yang.LYEXT_PAR_IFFEATURE
LYEXT_SUBSTMT_ALL = _yang.LYEXT_SUBSTMT_ALL
LYEXT_SUBSTMT_SELF = _yang.LYEXT_SUBSTMT_SELF
LYEXT_SUBSTMT_ARGUMENT = _yang.LYEXT_SUBSTMT_ARGUMENT
LYEXT_SUBSTMT_BASE = _yang.LYEXT_SUBSTMT_BASE
LYEXT_SUBSTMT_BELONGSTO = _yang.LYEXT_SUBSTMT_BELONGSTO
LYEXT_SUBSTMT_CONTACT = _yang.LYEXT_SUBSTMT_CONTACT
LYEXT_SUBSTMT_DEFAULT = _yang.LYEXT_SUBSTMT_DEFAULT
LYEXT_SUBSTMT_DESCRIPTION = _yang.LYEXT_SUBSTMT_DESCRIPTION
LYEXT_SUBSTMT_ERRTAG = _yang.LYEXT_SUBSTMT_ERRTAG
LYEXT_SUBSTMT_ERRMSG = _yang.LYEXT_SUBSTMT_ERRMSG
LYEXT_SUBSTMT_KEY = _yang.LYEXT_SUBSTMT_KEY
LYEXT_SUBSTMT_NAMESPACE = _yang.LYEXT_SUBSTMT_NAMESPACE
LYEXT_SUBSTMT_ORGANIZATION = _yang.LYEXT_SUBSTMT_ORGANIZATION
LYEXT_SUBSTMT_PATH = _yang.LYEXT_SUBSTMT_PATH
LYEXT_SUBSTMT_PREFIX = _yang.LYEXT_SUBSTMT_PREFIX
LYEXT_SUBSTMT_PRESENCE = _yang.LYEXT_SUBSTMT_PRESENCE
LYEXT_SUBSTMT_REFERENCE = _yang.LYEXT_SUBSTMT_REFERENCE
LYEXT_SUBSTMT_REVISIONDATE = _yang.LYEXT_SUBSTMT_REVISIONDATE
LYEXT_SUBSTMT_UNITS = _yang.LYEXT_SUBSTMT_UNITS
LYEXT_SUBSTMT_VALUE = _yang.LYEXT_SUBSTMT_VALUE
LYEXT_SUBSTMT_VERSION = _yang.LYEXT_SUBSTMT_VERSION
LYEXT_SUBSTMT_MODIFIER = _yang.LYEXT_SUBSTMT_MODIFIER
LYEXT_SUBSTMT_REQINSTANCE = _yang.LYEXT_SUBSTMT_REQINSTANCE
LYEXT_SUBSTMT_YINELEM = _yang.LYEXT_SUBSTMT_YINELEM
LYEXT_SUBSTMT_CONFIG = _yang.LYEXT_SUBSTMT_CONFIG
LYEXT_SUBSTMT_MANDATORY = _yang.LYEXT_SUBSTMT_MANDATORY
LYEXT_SUBSTMT_ORDEREDBY = _yang.LYEXT_SUBSTMT_ORDEREDBY
LYEXT_SUBSTMT_STATUS = _yang.LYEXT_SUBSTMT_STATUS
LYEXT_SUBSTMT_DIGITS = _yang.LYEXT_SUBSTMT_DIGITS
LYEXT_SUBSTMT_MAX = _yang.LYEXT_SUBSTMT_MAX
LYEXT_SUBSTMT_MIN = _yang.LYEXT_SUBSTMT_MIN
LYEXT_SUBSTMT_POSITION = _yang.LYEXT_SUBSTMT_POSITION
LYEXT_SUBSTMT_UNIQUE = _yang.LYEXT_SUBSTMT_UNIQUE
LYEXT_VLOG_NONE = _yang.LYEXT_VLOG_NONE
LYEXT_VLOG_XML = _yang.LYEXT_VLOG_XML
LYEXT_VLOG_LYS = _yang.LYEXT_VLOG_LYS
LYEXT_VLOG_LYD = _yang.LYEXT_VLOG_LYD
LYEXT_VLOG_STR = _yang.LYEXT_VLOG_STR
LYEXT_VLOG_PREV = _yang.LYEXT_VLOG_PREV
LYXML_ATTR_STD = _yang.LYXML_ATTR_STD
LYXML_ATTR_NS = _yang.LYXML_ATTR_NS
LYXML_PARSE_MULTIROOT = _yang.LYXML_PARSE_MULTIROOT
LYXML_PARSE_NOMIXEDCONTENT = _yang.LYXML_PARSE_NOMIXEDCONTENT
LYXML_PRINT_OPEN = _yang.LYXML_PRINT_OPEN
LYXML_PRINT_FORMAT = _yang.LYXML_PRINT_FORMAT
LYXML_PRINT_CLOSE = _yang.LYXML_PRINT_CLOSE
LYXML_PRINT_ATTRS = _yang.LYXML_PRINT_ATTRS
LYXML_PRINT_SIBLINGS = _yang.LYXML_PRINT_SIBLINGS
LYXML_PRINT_NO_LAST_NEWLINE = _yang.LYXML_PRINT_NO_LAST_NEWLINE
# This file is compatible with both classic and new-style classes.


